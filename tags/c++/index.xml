<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>C++ on QX 的笔记</title><link>https://lqxhub.github.io/tags/c++/</link><description>Recent content in C++ on QX 的笔记</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sat, 13 Sep 2025 19:04:48 +0800</lastBuildDate><atom:link href="https://lqxhub.github.io/tags/c++/index.xml" rel="self" type="application/rss+xml"/><item><title>使用C++协程+liburing的HTTP server 和 epoll 的 HTTP server 性能对比</title><link>https://lqxhub.github.io/posts/6da4ad2d/</link><pubDate>Sat, 13 Sep 2025 19:04:48 +0800</pubDate><guid>https://lqxhub.github.io/posts/6da4ad2d/</guid><description>&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/1ca5f47363ab61f726ef725e58827790e00be3f7.jpg" alt="Featured image of post 使用C++协程+liburing的HTTP server 和 epoll 的 HTTP server 性能对比" />&lt;p>前段时间，使用C++协程+liburing实现了一个简单的 echo server，&lt;a class="link" href="https://lqxhub.github.io/posts/d26369fd" >文章地址&lt;/a>。&lt;/p>
&lt;p>都说使用 uring 可以获得更好的性能，但是究竟能提升多少呢？接下来，我们来对比一下 liburing 和 epoll 的性能。&lt;/p>
&lt;h2 id="测试方式">&lt;a href="#%e6%b5%8b%e8%af%95%e6%96%b9%e5%bc%8f" class="header-anchor">&lt;/a>测试方式
&lt;/h2>&lt;p>在原来的 echo server 基础上改动了一下，把 echo server 改成了一个简单的 HTTP server，返回一个固定的 HTML 内容。&lt;/p>
&lt;p>然后使用 &lt;a class="link" href="https://github.com/link1st/go-stress-testing" target="_blank" rel="noopener"
>go-stress-testing&lt;/a> 这个工具进行压力测试。&lt;/p>
&lt;p>测试工具在windows 10 上。HTTP 服务运行这个windows 10 的 VM虚拟机上。系统是 debian13，linux内核是 6.12.41-amd64&lt;/p>
&lt;p>编译器使用 &lt;code>clang-18&lt;/code> 编译参数 &lt;code>-O2 stdlib=libc++ -std=c++23&lt;/code> 进行编译。&lt;/p>
&lt;p>uring 服务和 epoll 服务都是单线程模型，单线程处理所有连接。&lt;/p>
&lt;h2 id="测试代码">&lt;a href="#%e6%b5%8b%e8%af%95%e4%bb%a3%e7%a0%81" class="header-anchor">&lt;/a>测试代码
&lt;/h2>&lt;p>这里就不贴所有代码了，主要贴一下关键部分。&lt;/p>
&lt;h3 id="uring-版本">&lt;a href="#uring-%e7%89%88%e6%9c%ac" class="header-anchor">&lt;/a>uring 版本
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>Task&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">false&lt;/span>&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> IoUring&lt;span style="color:#ff79c6">::&lt;/span>startSession(&lt;span style="color:#8be9fd">int&lt;/span> fd, &lt;span style="color:#8be9fd">uint64_t&lt;/span> connId) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>string buffer;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span> buffer.resize(&lt;span style="color:#bd93f9">1024&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span> &lt;span style="color:#8be9fd">bool&lt;/span> closed &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span> &lt;span style="color:#ff79c6">while&lt;/span> (&lt;span style="color:#ff79c6">!&lt;/span>closed) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> aRead &lt;span style="color:#ff79c6">=&lt;/span> AwaitableRead(&lt;span style="color:#ff79c6">this&lt;/span>, fd, buffer);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span> &lt;span style="color:#ff79c6">while&lt;/span> (&lt;span style="color:#8be9fd;font-style:italic">true&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> res &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">co_await&lt;/span> aRead;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (res &lt;span style="color:#ff79c6">&amp;lt;=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) { &lt;span style="color:#6272a4">// 连接关闭或者读取错误
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> closed &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span> &lt;span style="color:#ff79c6">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (res &lt;span style="color:#ff79c6">==&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span>) { &lt;span style="color:#6272a4">// 读完了
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#ff79c6">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (closed) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span> &lt;span style="color:#ff79c6">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21&lt;/span>&lt;span> &lt;span style="color:#6272a4">// std::cout &amp;lt;&amp;lt; &amp;#34;Received data: &amp;#34;;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>string response;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>string body &lt;span style="color:#ff79c6">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;Test Page&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;&amp;lt;p&amp;gt;Hello, this is a test HTML content for HTTP response.&amp;lt;/p&amp;gt;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28&lt;/span>&lt;span> response.reserve(&lt;span style="color:#bd93f9">128&lt;/span> &lt;span style="color:#ff79c6">+&lt;/span> body.size()); &lt;span style="color:#6272a4">// 减少拷贝
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30&lt;/span>&lt;span> response &lt;span style="color:#ff79c6">+=&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;HTTP/1.1 200 OK&lt;/span>&lt;span style="color:#f1fa8c">\r\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;Content-Length: &amp;#34;&lt;/span> &lt;span style="color:#ff79c6">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>to_string(body.size()) &lt;span style="color:#ff79c6">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>&lt;span style="color:#f1fa8c">\r\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;Content-Type: text/html; charset=UTF-8&lt;/span>&lt;span style="color:#f1fa8c">\r\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;Connection: close&lt;/span>&lt;span style="color:#f1fa8c">\r\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;Date: Mon, 21 Oct 2024 13:24:24 GMT&lt;/span>&lt;span style="color:#f1fa8c">\r\n\r\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37&lt;/span>&lt;span> response &lt;span style="color:#ff79c6">+=&lt;/span> body;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> aWrite &lt;span style="color:#ff79c6">=&lt;/span> AwaitableWrite(&lt;span style="color:#ff79c6">this&lt;/span>, fd, std&lt;span style="color:#ff79c6">::&lt;/span>move(std&lt;span style="color:#ff79c6">::&lt;/span>string(response)));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40&lt;/span>&lt;span> &lt;span style="color:#ff79c6">while&lt;/span> (&lt;span style="color:#8be9fd;font-style:italic">true&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> res &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">co_await&lt;/span> aWrite;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (res &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) { &lt;span style="color:#6272a4">// 写出错了
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> closed &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">44&lt;/span>&lt;span> &lt;span style="color:#ff79c6">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">45&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">46&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (res &lt;span style="color:#ff79c6">==&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) { &lt;span style="color:#6272a4">// 写完了
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">47&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#ff79c6">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">48&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">49&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">50&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">51&lt;/span>&lt;span> close(fd);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">52&lt;/span>&lt;span> &lt;span style="color:#ff79c6">co_return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">53&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在原来的 echo server 基础上，改成了 HTTP server。然后使用协程处理每个连接。&lt;/p>
&lt;h3 id="epoll-版本">&lt;a href="#epoll-%e7%89%88%e6%9c%ac" class="header-anchor">&lt;/a>epoll 版本
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> Epoll&lt;span style="color:#ff79c6">::&lt;/span>run()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;Epoll::run&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span> epoll_event events[EVENT_SIZE];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span> &lt;span style="color:#ff79c6">while&lt;/span> (&lt;span style="color:#8be9fd;font-style:italic">true&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> nfds &lt;span style="color:#ff79c6">=&lt;/span> epoll_wait(ePollFd_, events, EVENT_SIZE, &lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (nfds &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cerr &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;epoll_wait failed nfds:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> nfds &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;errno:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> errno &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span> &lt;span style="color:#ff79c6">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (errno &lt;span style="color:#ff79c6">==&lt;/span> EINTR)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span> &lt;span style="color:#6272a4">// 系统调用被中断，继续重试
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#ff79c6">continue&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span> &lt;span style="color:#ff79c6">for&lt;/span> (&lt;span style="color:#8be9fd">int&lt;/span> i &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>; i &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> nfds; &lt;span style="color:#ff79c6">++&lt;/span>i)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (events[i].events &lt;span style="color:#ff79c6">&amp;amp;&lt;/span> EPOLLERR &lt;span style="color:#ff79c6">||&lt;/span> events[i].events &lt;span style="color:#ff79c6">&amp;amp;&lt;/span> EPOLLHUP)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21&lt;/span>&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;epoll_wait failed errno:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> errno &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23&lt;/span>&lt;span> delFd(events[i].data.fd);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24&lt;/span>&lt;span> close(events[i].data.fd);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25&lt;/span>&lt;span> &lt;span style="color:#ff79c6">continue&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (events[i].events &lt;span style="color:#ff79c6">&amp;amp;&lt;/span> EPOLLIN)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28&lt;/span>&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (events[i].data.fd &lt;span style="color:#ff79c6">==&lt;/span> listenFd_)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30&lt;/span>&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31&lt;/span>&lt;span> sockaddr_in cliAddr{};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32&lt;/span>&lt;span> socklen_t length &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">sizeof&lt;/span>(cliAddr);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> clientFd &lt;span style="color:#ff79c6">=&lt;/span> accept4(listenFd_, &lt;span style="color:#ff79c6">reinterpret_cast&lt;/span>&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>sockaddr&lt;span style="color:#ff79c6">*&amp;gt;&lt;/span>(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>cliAddr), &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>length,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34&lt;/span>&lt;span> &lt;span style="color:#bd93f9">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (clientFd &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36&lt;/span>&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cerr &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;accept failed fd:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> clientFd &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;errno:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> errno &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38&lt;/span>&lt;span> &lt;span style="color:#ff79c6">continue&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;new client fd&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> clientFd &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41&lt;/span>&lt;span> addRead(clientFd);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43&lt;/span>&lt;span> &lt;span style="color:#ff79c6">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">44&lt;/span>&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">45&lt;/span>&lt;span> &lt;span style="color:#8be9fd">char&lt;/span> buff[&lt;span style="color:#bd93f9">1024&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">46&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> n &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">::&lt;/span>read(events[i].data.fd, buff, &lt;span style="color:#ff79c6">sizeof&lt;/span>(buff));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">47&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (n &lt;span style="color:#ff79c6">&amp;lt;=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">48&lt;/span>&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">49&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;close fd:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> events[i].data.fd &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">50&lt;/span>&lt;span> delFd(events[i].data.fd);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">51&lt;/span>&lt;span> close(events[i].data.fd);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">52&lt;/span>&lt;span> &lt;span style="color:#ff79c6">continue&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">53&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">54&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>string response;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">55&lt;/span>&lt;span> response.reserve(&lt;span style="color:#bd93f9">128&lt;/span> &lt;span style="color:#ff79c6">+&lt;/span> image.size()); &lt;span style="color:#6272a4">// 减少拷贝
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">56&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> response &lt;span style="color:#ff79c6">+=&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;HTTP/1.1 200 OK&lt;/span>&lt;span style="color:#f1fa8c">\r\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">57&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;Content-Length: &amp;#34;&lt;/span> &lt;span style="color:#ff79c6">+&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>to_string(image.size()) &lt;span style="color:#ff79c6">+&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>&lt;span style="color:#f1fa8c">\r\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">58&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;Content-Type: image/jpeg&lt;/span>&lt;span style="color:#f1fa8c">\r\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">59&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;Connection: close&lt;/span>&lt;span style="color:#f1fa8c">\r\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">60&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;Date: Mon, 21 Oct 2024 13:24:24 GMT&lt;/span>&lt;span style="color:#f1fa8c">\r\n\r\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">61&lt;/span>&lt;span> response &lt;span style="color:#ff79c6">+=&lt;/span> image;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">62&lt;/span>&lt;span> write(events[i].data.fd, response.data(), response.size());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">63&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">64&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">65&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">66&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">67&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>epoll 版本没有使用协程，直接在事件循环中处理所有连接。两个HTTP server 处理逻辑是一样的，都是读取请求，然后返回一个固定的 HTML 内容。&lt;/p>
&lt;h2 id="测试结果">&lt;a href="#%e6%b5%8b%e8%af%95%e7%bb%93%e6%9e%9c" class="header-anchor">&lt;/a>测试结果
&lt;/h2>&lt;p>&lt;strong>本次测试 io_uring使用 中断模式&lt;/strong>&lt;/p>
&lt;p>中断模式也是 &lt;code>io_uring&lt;/code> 的默认模式，关于 &lt;code>io_uring&lt;/code> 的两种模式，&lt;strong>中断模式&lt;/strong> &lt;strong>轮询模式&lt;/strong> 和 &lt;strong>内核轮询模式&lt;/strong> 的区别， 先挖个坑，后续再写一篇文章进行介绍。&lt;/p>
&lt;p>这个HTTP server 返回一个简单的 HTML 内容：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">&amp;lt;!DOCTYPE html&amp;gt;&lt;/span>&amp;lt;&lt;span style="color:#ff79c6">html&lt;/span>&amp;gt;&amp;lt;&lt;span style="color:#ff79c6">head&lt;/span>&amp;gt;&amp;lt;&lt;span style="color:#ff79c6">title&lt;/span>&amp;gt;Test Page&amp;lt;/&lt;span style="color:#ff79c6">title&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#ff79c6">head&lt;/span>&amp;gt;&amp;lt;&lt;span style="color:#ff79c6">body&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span> &amp;lt;&lt;span style="color:#ff79c6">p&lt;/span>&amp;gt;Hello, this is a test HTML content for HTTP response.&amp;lt;/&lt;span style="color:#ff79c6">p&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3&lt;/span>&lt;span>&amp;lt;/&lt;span style="color:#ff79c6">body&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#ff79c6">html&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用 go-stress-testing 进行压力测试，测试命令如下：&lt;/p>
&lt;p>开启 100 个并发连接，每个连接发送 100 次请求。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>go-stress-testing-win.exe -u &lt;span style="color:#f1fa8c">&amp;#34;http://192.168.1.19:8088&amp;#34;&lt;/span> -c &lt;span style="color:#bd93f9">100&lt;/span> -n &lt;span style="color:#bd93f9">100&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>uring 版本测试结果&lt;/p>
&lt;p>
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/2ee22b6ac54c63b68eef982c2f3dd23d346c1107.png">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/2ee22b6ac54c63b68eef982c2f3dd23d346c1107.png" alt="" />
&lt;/a>
&lt;/div>
&lt;/p>
&lt;p>可以看到 QPS 达到了 4800+，平均响应时间 20ms。&lt;/p>
&lt;p>epoll 版本测试结果&lt;/p>
&lt;p>
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/2cc64d644c2e50030d1c23e074ac0658800a91c4.png">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/2cc64d644c2e50030d1c23e074ac0658800a91c4.png" alt="" />
&lt;/a>
&lt;/div>
&lt;/p>
&lt;p>可以看到 QPS 只有 4000+，平均响应时间 23ms。&lt;/p>
&lt;p>uring 版本的性能比 epoll 版本提升了 20% 左右。&lt;/p>
&lt;h2 id="测试2">&lt;a href="#%e6%b5%8b%e8%af%952" class="header-anchor">&lt;/a>测试2
&lt;/h2>&lt;p>上面的测试中，HTML返回了一个简单的网页，现在改成返回一个148KB 的图片，为了防止网络成为瓶颈，这次并发数改成 50，连接数改成 50。&lt;/p>
&lt;p>在进程启动的时候，把图片读到内存中，避免每次都读磁盘，然后每次请求都返回这个图片。&lt;/p>
&lt;p>这个改动比较小，只一下 response 的内容：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span> response.reserve(&lt;span style="color:#bd93f9">128&lt;/span> &lt;span style="color:#ff79c6">+&lt;/span> image.size()); &lt;span style="color:#6272a4">// 减少拷贝
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span> response &lt;span style="color:#ff79c6">+=&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;HTTP/1.1 200 OK&lt;/span>&lt;span style="color:#f1fa8c">\r\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;Content-Length: &amp;#34;&lt;/span> &lt;span style="color:#ff79c6">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>to_string(image.size()) &lt;span style="color:#ff79c6">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>&lt;span style="color:#f1fa8c">\r\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;Content-Type: image/jpeg&lt;/span>&lt;span style="color:#f1fa8c">\r\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;Connection: close&lt;/span>&lt;span style="color:#f1fa8c">\r\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;Date: Mon, 21 Oct 2024 13:24:24 GMT&lt;/span>&lt;span style="color:#f1fa8c">\r\n\r\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span> response &lt;span style="color:#ff79c6">+=&lt;/span> image;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用 go-stress-testing 进行压力测试，测试命令如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>go-stress-testing-win.exe -u &lt;span style="color:#f1fa8c">&amp;#34;http://192.168.1.19:8088&amp;#34;&lt;/span> -c &lt;span style="color:#bd93f9">50&lt;/span> -n &lt;span style="color:#bd93f9">50&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>开启 50 个并发连接，每个连接发送 50 次请求。&lt;/p>
&lt;p>uring 版本测试结果&lt;/p>
&lt;p>
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/ae8ac9a2b8045857abfddf2f01bfcbf0ff25798b.png">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/ae8ac9a2b8045857abfddf2f01bfcbf0ff25798b.png" alt="" />
&lt;/a>
&lt;/div>
&lt;/p>
&lt;p>可以看到 QPS 达到了 1300+，平均响应时间 37ms。&lt;/p>
&lt;p>epoll 版本测试结果&lt;/p>
&lt;p>
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/32a5770fb20f16abca3f7d48d51e2b21374a8e2b.png">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/32a5770fb20f16abca3f7d48d51e2b21374a8e2b.png" alt="" />
&lt;/a>
&lt;/div>
&lt;/p>
&lt;p>可以看到 QPS 只有 520+，平均响应时间 93ms。&lt;/p>
&lt;p>可以看到，uring 版本的性能是 epoll 版本的 2.5 倍左右。这个提升还是非常明显的。&lt;/p>
&lt;h2 id="总结">&lt;a href="#%e6%80%bb%e7%bb%93" class="header-anchor">&lt;/a>总结
&lt;/h2>&lt;p>通过上面的测试，可以看到 &lt;code>liburing&lt;/code> 相比 &lt;code>epoll&lt;/code> 在高并发场景下，不管是 &lt;strong>QPS&lt;/strong> 还是 &lt;strong>响应耗时&lt;/strong>，性能提升还是比较明显的。&lt;/p>
&lt;p>具体来说，uring 版本在处理小文件时的 QPS 比 epoll 版本高出 &lt;strong>20%&lt;/strong> 左右，而在处理大文件时的 QPS 则高出 &lt;strong>2.5&lt;/strong> 倍左右。这些测试结果表明，liburing 在高并发场景下具有更好的性能表现，尤其是在读取和写入大的数据时，优势更加明显。这还是提前从文件中读取到内存中，避免了磁盘 I/O 的影响。如果是每次都从磁盘读取，使用 liburing 异步读取和普通的 &lt;code>read&lt;/code> 函数读取对比，性能差距可能会更大。
这也是因为 liburing 能够更高效地利用内核的异步 I/O 能力，减少了系统调用的开销，从而提升了整体的吞吐量和响应速度。&lt;/p></description></item><item><title>linux中io_uring和C++协程的结合，实现真正的异步I/O。简单的TCP echo server</title><link>https://lqxhub.github.io/posts/d26369fd/</link><pubDate>Sat, 23 Aug 2025 17:04:05 +0800</pubDate><guid>https://lqxhub.github.io/posts/d26369fd/</guid><description>&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/cc0fd96def7c84c2e2b5d6a00915b3b8175116cf.jpg" alt="Featured image of post linux中io_uring和C++协程的结合，实现真正的异步I/O。简单的TCP echo server" />&lt;p>前两天刚写了一篇文章，怎样在C++中使用协程 &lt;a class="link" href="https://lqxhub.github.io/posts/541b707d" >传送门&lt;/a>。那个只是一个简单的例子，今天我们来聊聊如何将协程与 io_uring 结合起来使用，实现真正的异步 I/O 操作。
我个人觉得，C++协程最好的使用场景就是配合异步 I/O。&lt;/p>
&lt;p>以前也写过一篇关于 io_uring 的文章 &lt;a class="link" href="https://lqxhub.github.io/posts/f0e9829c" >传送门&lt;/a>，里面介绍了 io_uring 的基本概念和使用方法。今天我们就基于那个例子，来实现一个简单的 echo 服务器，使用协程来处理客户端的连接和数据收发。&lt;/p>
&lt;p>
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/872dbc550f1e63b8d6052bf661f991174671534b.svg">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/872dbc550f1e63b8d6052bf661f991174671534b.svg" alt="" />
&lt;/a>
&lt;/div>
&lt;/p>
&lt;p>简单画一个图，每一个 &lt;code>Awaitable&lt;/code> 都是一个协程，在一个进程中，每一个连接都有两个协程（一个用于读，一个用于写）。还有一个特殊的协程 &lt;code>AwaitableAccept&lt;/code> 用来处理接受连接的操作。
同一时刻，最多只能有一个协程在执行。其他的协程会被挂起，等待当前协程完成后再恢复执行。&lt;/p>
&lt;p>因为协程可以让我们以同步的方式编写异步代码，避免传统的“回调函数地狱”，从而提高代码的可读性和可维护性。而 io_uring 则是 Linux 提供的一种高性能异步 I/O 接口，可以与协程结合使用，进一步提升性能。&lt;/p>
&lt;p>因为代码量有点大，就不全贴在这里了，已经上传到GitHub上，可以去这里查看 &lt;a class="link" href="https://github.com/lqxhub/co_uring_server" target="_blank" rel="noopener"
>传送门&lt;/a>。&lt;/p>
&lt;p>不废话了，直接上代码&lt;/p>
&lt;h2 id="coroutine-handle">&lt;a href="#coroutine-handle" class="header-anchor">&lt;/a>coroutine handle
&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#ifndef TASK_H
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#define TASK_H
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span>&lt;span style="color:#ff79c6">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;coroutine&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;exception&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;functional&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span>&lt;span style="color:#ff79c6">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span>&lt;span style="color:#ff79c6">template&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&lt;/span>&lt;span style="color:#8be9fd">bool&lt;/span> initialSuspend&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> &lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">Task&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span> &lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">promise_type&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>coroutine_handle&lt;span style="color:#ff79c6">&amp;lt;&amp;gt;&lt;/span> handle;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>function&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>&lt;span style="color:#8be9fd">void&lt;/span>()&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> onDone; &lt;span style="color:#6272a4">// 协程结束时调用的清理回调
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> &lt;span style="color:#50fa7b">get_return_object&lt;/span>() { &lt;span style="color:#ff79c6">return&lt;/span> Task{&lt;span style="color:#ff79c6">*&lt;/span>&lt;span style="color:#ff79c6">this&lt;/span>}; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> &lt;span style="color:#50fa7b">initial_suspend&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> &lt;span style="color:#ff79c6">constexpr&lt;/span> (initialSuspend) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>suspend_always{};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span> } &lt;span style="color:#ff79c6">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>suspend_never{};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> &lt;span style="color:#50fa7b">final_suspend&lt;/span>() &lt;span style="color:#ff79c6">noexcept&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24&lt;/span>&lt;span> &lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">Awaiter&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25&lt;/span>&lt;span> &lt;span style="color:#8be9fd">bool&lt;/span> await_ready() &lt;span style="color:#ff79c6">noexcept&lt;/span> { &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">false&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27&lt;/span>&lt;span> &lt;span style="color:#8be9fd">void&lt;/span> await_suspend(std&lt;span style="color:#ff79c6">::&lt;/span>coroutine_handle&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>promise_type&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> h) &lt;span style="color:#ff79c6">noexcept&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (h.promise().onDone) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29&lt;/span>&lt;span> h.promise().onDone();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33&lt;/span>&lt;span> &lt;span style="color:#8be9fd">void&lt;/span> await_resume() &lt;span style="color:#ff79c6">noexcept&lt;/span> {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34&lt;/span>&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> Awaiter{};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38&lt;/span>&lt;span> &lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">unhandled_exception&lt;/span>() { std&lt;span style="color:#ff79c6">::&lt;/span>terminate(); }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40&lt;/span>&lt;span> &lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">return_void&lt;/span>() {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42&lt;/span>&lt;span> promise_type() &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">default&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43&lt;/span>&lt;span> &lt;span style="color:#ff79c6">~&lt;/span>promise_type() &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">default&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">44&lt;/span>&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">45&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">46&lt;/span>&lt;span> &lt;span style="color:#ff79c6">explicit&lt;/span> &lt;span style="color:#50fa7b">Task&lt;/span>(promise_type &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>promise)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">47&lt;/span>&lt;span> &lt;span style="color:#ff79c6">:&lt;/span> handle_(std&lt;span style="color:#ff79c6">::&lt;/span>coroutine_handle&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>promise_type&lt;span style="color:#ff79c6">&amp;gt;::&lt;/span>from_promise(promise)) {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">48&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">49&lt;/span>&lt;span> Task(Task &lt;span style="color:#ff79c6">&amp;amp;&amp;amp;&lt;/span>other) &lt;span style="color:#ff79c6">noexcept&lt;/span> &lt;span style="color:#ff79c6">:&lt;/span> handle_(other.handle_) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">50&lt;/span>&lt;span> other.handle_ &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">nullptr&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">51&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">52&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">53&lt;/span>&lt;span> Task &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>&lt;span style="color:#ff79c6">operator&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>(Task &lt;span style="color:#ff79c6">&amp;amp;&amp;amp;&lt;/span>other) &lt;span style="color:#ff79c6">noexcept&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">54&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (&lt;span style="color:#ff79c6">this&lt;/span> &lt;span style="color:#ff79c6">!=&lt;/span> &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>other) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">55&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (handle_ &lt;span style="color:#ff79c6">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#ff79c6">!&lt;/span>handle_.done())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">56&lt;/span>&lt;span> handle_.destroy();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">57&lt;/span>&lt;span> handle_ &lt;span style="color:#ff79c6">=&lt;/span> other.handle_;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">58&lt;/span>&lt;span> other.handle_ &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">nullptr&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">59&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">60&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>&lt;span style="color:#ff79c6">this&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">61&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">62&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">63&lt;/span>&lt;span> Task(&lt;span style="color:#ff79c6">const&lt;/span> Task &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>) &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">delete&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">64&lt;/span>&lt;span> Task &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>&lt;span style="color:#ff79c6">operator&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>(&lt;span style="color:#ff79c6">const&lt;/span> Task &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>) &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">delete&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">65&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">66&lt;/span>&lt;span> &lt;span style="color:#ff79c6">~&lt;/span>Task() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">67&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (handle_ &lt;span style="color:#ff79c6">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#ff79c6">!&lt;/span>handle_.done())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">68&lt;/span>&lt;span> handle_.destroy();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">69&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">70&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">71&lt;/span>&lt;span> &lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">resume&lt;/span>() { handle_.resume(); }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">72&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">73&lt;/span>&lt;span> &lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">setOnDone&lt;/span>(std&lt;span style="color:#ff79c6">::&lt;/span>function&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>&lt;span style="color:#8be9fd">void&lt;/span>()&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> onDone) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">74&lt;/span>&lt;span> handle_.promise().onDone &lt;span style="color:#ff79c6">=&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>move(onDone);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">75&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">76&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">77&lt;/span>&lt;span>&lt;span style="color:#ff79c6">private&lt;/span>&lt;span style="color:#ff79c6">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">78&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>coroutine_handle&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>promise_type&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> handle_;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">79&lt;/span>&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">80&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">81&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#endif &lt;/span>&lt;span style="color:#6272a4">// TASK_H
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>简单说一下几个关键点：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>使用模板变量，来控制协程的初始挂起状态。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在协程结束时，可以通过 &lt;code>onDone&lt;/code> 回调来执行清理操作。
在协程结束时，可以调用这个函数，完成一些自定义操作，后面会用到。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>协程结束时会自动调用 &lt;code>final_suspend&lt;/code>，可以在这里进行一些收尾工作。
final_suspend中定义了一个 &lt;code>Awaiter&lt;/code>，用于在协程结束时执行清理操作。当协程结束时，&lt;code>Awaiter&lt;/code> 会被唤醒，从而调用 &lt;code>onDone&lt;/code> 回调。当 &lt;code>onDone&lt;/code> 执行完成后，协程的资源会被释放。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="io_uring-wrapper">&lt;a href="#io_uring-wrapper" class="header-anchor">&lt;/a>io_uring wrapper
&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">class&lt;/span> &lt;span style="color:#50fa7b">IoUring&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>&lt;span style="color:#ff79c6">public&lt;/span>&lt;span style="color:#ff79c6">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span> &lt;span style="color:#ff79c6">explicit&lt;/span> IoUring(&lt;span style="color:#8be9fd">int&lt;/span> port) &lt;span style="color:#ff79c6">:&lt;/span> port_(port) {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span> IoUring(&lt;span style="color:#ff79c6">const&lt;/span> IoUring &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>) &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">delete&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span> IoUring &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>&lt;span style="color:#ff79c6">operator&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>(&lt;span style="color:#ff79c6">const&lt;/span> IoUring &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>) &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">delete&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span> IoUring(IoUring &lt;span style="color:#ff79c6">&amp;amp;&amp;amp;&lt;/span>) &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">delete&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span> IoUring &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>&lt;span style="color:#ff79c6">operator&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>(IoUring &lt;span style="color:#ff79c6">&amp;amp;&amp;amp;&lt;/span>) &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">delete&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span> &lt;span style="color:#ff79c6">~&lt;/span>IoUring() &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">default&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span> &lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">Stop&lt;/span>() { running_.store(&lt;span style="color:#8be9fd;font-style:italic">false&lt;/span>); }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span> io_uring &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>Uring() { &lt;span style="color:#ff79c6">return&lt;/span> ring_; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>expected&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>&lt;span style="color:#8be9fd">bool&lt;/span>, std&lt;span style="color:#ff79c6">::&lt;/span>string&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> Init();&lt;span style="color:#6272a4">//初始化io_uring和网络
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">run&lt;/span>();&lt;span style="color:#6272a4">//运行io_uring事件循环
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> Task&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">true&lt;/span>&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> acceptServer();&lt;span style="color:#6272a4">//接受客户端连接
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20&lt;/span>&lt;span> Task&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">false&lt;/span>&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> startSession(&lt;span style="color:#8be9fd">int&lt;/span> fd, &lt;span style="color:#8be9fd">uint64_t&lt;/span> connId);&lt;span style="color:#6272a4">//处理客户端会话
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22&lt;/span>&lt;span>&lt;span style="color:#ff79c6">private&lt;/span>&lt;span style="color:#ff79c6">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>expected&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>&lt;span style="color:#8be9fd">bool&lt;/span>, std&lt;span style="color:#ff79c6">::&lt;/span>string&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> createListenSocket();&lt;span style="color:#6272a4">//创建监听socket
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25&lt;/span>&lt;span> &lt;span style="color:#ff79c6">static&lt;/span> &lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">set_nonblocking&lt;/span>(&lt;span style="color:#8be9fd">int&lt;/span> fd) {&lt;span style="color:#6272a4">//设置socket为非阻塞IO
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#ff79c6">return&lt;/span> fcntl(fd, F_SETFL, fcntl(fd, F_GETFL, &lt;span style="color:#bd93f9">0&lt;/span>) &lt;span style="color:#ff79c6">|&lt;/span> O_NONBLOCK);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29&lt;/span>&lt;span> &lt;span style="color:#8be9fd">uint64_t&lt;/span> &lt;span style="color:#50fa7b">getConnId&lt;/span>() { &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#ff79c6">++&lt;/span>connId; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31&lt;/span>&lt;span> io_uring ring_{};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32&lt;/span>&lt;span> &lt;span style="color:#8be9fd">uint16_t&lt;/span> port_;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> listenFd_ &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34&lt;/span>&lt;span> &lt;span style="color:#ff79c6">const&lt;/span> &lt;span style="color:#8be9fd">int&lt;/span> entries_ &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">256&lt;/span>; &lt;span style="color:#6272a4">// Default number of entries
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>atomic&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>&lt;span style="color:#8be9fd">bool&lt;/span>&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> running_ &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37&lt;/span>&lt;span> &lt;span style="color:#8be9fd">uint64_t&lt;/span> connId &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>; &lt;span style="color:#6272a4">// Connection ID for tracking connections
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>unordered_map&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>&lt;span style="color:#8be9fd">uint64_t&lt;/span>, Task&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">false&lt;/span>&lt;span style="color:#ff79c6">&amp;gt;&amp;gt;&lt;/span> sessions_;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40&lt;/span>&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>以上就是对 io_uring 的一个简单封装，下面挑几个关键的函数来聊一下&lt;/p>
&lt;h3 id="iouringrun">&lt;a href="#iouringrun" class="header-anchor">&lt;/a>IoUring::run
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> IoUring&lt;span style="color:#ff79c6">::&lt;/span>run() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span> &lt;span style="color:#ff79c6">while&lt;/span> (running_.load()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span> io_uring_cqe &lt;span style="color:#ff79c6">*&lt;/span>cqe &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">nullptr&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> ret &lt;span style="color:#ff79c6">=&lt;/span> io_uring_wait_cqe(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>ring_, &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>cqe);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (ret &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (ret &lt;span style="color:#ff79c6">==&lt;/span> &lt;span style="color:#ff79c6">-&lt;/span>EINTR)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span> &lt;span style="color:#ff79c6">continue&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span> &lt;span style="color:#ff79c6">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span> &lt;span style="color:#6272a4">// user_data 保存着 Op 指针
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#ff79c6">auto&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>op &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">reinterpret_cast&lt;/span>&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>AwaitableBaseOp &lt;span style="color:#ff79c6">*&amp;gt;&lt;/span>(cqe&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>user_data);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (&lt;span style="color:#ff79c6">!&lt;/span>op) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span> io_uring_cqe_seen(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>ring_, cqe);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span> &lt;span style="color:#ff79c6">continue&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span> op&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>SetRes(cqe&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>res);&lt;span style="color:#6272a4">//设置操作结果
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> io_uring_cqe_seen(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>ring_, cqe);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>&lt;span> op&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>resume();&lt;span style="color:#6272a4">//恢复协程执行
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>循环遍历 &lt;code>io_uring&lt;/code> 的完成队列，处理每个完成的操作。&lt;/p>
&lt;p>&lt;code>AwaitableBaseOp&lt;/code> 是所有可等待操作的基类，负责管理协程的状态和生命周期，后面会用到。&lt;/p>
&lt;p>&lt;code>op-&amp;gt;SetRes(cqe-&amp;gt;res);&lt;/code> 把io_uring的结果传递给操作对象。&lt;/p>
&lt;p>在 &lt;code>op-&amp;gt;resume()&lt;/code> 被调用时，协程会继续执行，直至下一个挂起点。&lt;/p>
&lt;h3 id="iouringstartsession">&lt;a href="#iouringstartsession" class="header-anchor">&lt;/a>IoUring::startSession
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>Task&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">false&lt;/span>&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> IoUring&lt;span style="color:#ff79c6">::&lt;/span>startSession(&lt;span style="color:#8be9fd">int&lt;/span> fd, &lt;span style="color:#8be9fd">uint64_t&lt;/span> connId) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>string buffer;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span> buffer.resize(&lt;span style="color:#bd93f9">1024&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span> &lt;span style="color:#ff79c6">while&lt;/span> (&lt;span style="color:#8be9fd;font-style:italic">true&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> res &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">co_await&lt;/span> AwaitableRead(&lt;span style="color:#ff79c6">this&lt;/span>, fd, buffer);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (res &lt;span style="color:#ff79c6">&amp;lt;=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span> &lt;span style="color:#ff79c6">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;Received data: &amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout.write(buffer.data(), res);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span> res &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">co_await&lt;/span> AwaitableWrite(&lt;span style="color:#ff79c6">this&lt;/span>, fd, std&lt;span style="color:#ff79c6">::&lt;/span>move(std&lt;span style="color:#ff79c6">::&lt;/span>string(buffer)));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (res &lt;span style="color:#ff79c6">&amp;lt;=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span> &lt;span style="color:#ff79c6">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span> close(fd);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span> &lt;span style="color:#ff79c6">co_return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>启动一个客户端会话，处理数据的读取和写入。&lt;/p>
&lt;p>使用 &lt;code>co_await&lt;/code> 关键字来等待异步操作的完成。&lt;/p>
&lt;p>&lt;code>co_await AwaitableRead&lt;/code> 这里会把当前协程挂起，然后当读取操作完成时，协程会被唤醒，并且可以获取到读取的结果。&lt;/p>
&lt;p>&lt;code>co_await AwaitableWrite&lt;/code> 这里同样会把当前协程挂起，等待写入操作完成。&lt;/p>
&lt;h3 id="iouringacceptserver">&lt;a href="#iouringacceptserver" class="header-anchor">&lt;/a>IoUring::acceptServer
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>Task&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">true&lt;/span>&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> IoUring&lt;span style="color:#ff79c6">::&lt;/span>acceptServer() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span> &lt;span style="color:#ff79c6">while&lt;/span> (&lt;span style="color:#8be9fd;font-style:italic">true&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> clientFd &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">co_await&lt;/span> AwaitableAccept(&lt;span style="color:#ff79c6">this&lt;/span>, listenFd_);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> clientFd &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (clientFd &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span> &lt;span style="color:#ff79c6">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span> set_nonblocking(clientFd);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> connId &lt;span style="color:#ff79c6">=&lt;/span> getConnId();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> t &lt;span style="color:#ff79c6">=&lt;/span> startSession(clientFd, connId);&lt;span style="color:#6272a4">//启动一个客户端会话，处理数据的读取和写入。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> t.setOnDone([connId, &lt;span style="color:#ff79c6">this&lt;/span>]() { sessions_.erase(connId); });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span> sessions_.emplace(connId, std&lt;span style="color:#ff79c6">::&lt;/span>move(t));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span> close(listenFd_);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span> &lt;span style="color:#ff79c6">co_return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>开始一个服务器端的会话，接受客户端连接。&lt;/p>
&lt;p>&lt;code>co_await AwaitableAccept&lt;/code> 这里会把当前协程挂起，当有客户端连接时，协程会被唤醒，并且可以获取到接受的结果。&lt;/p>
&lt;p>&lt;code>auto t = startSession(clientFd, connId);&lt;/code> 这里会启动一个协程，处理数据的读取和写入。
这里有个关键点，&lt;code>startSession&lt;/code> 会返回一个协程的句柄，一定要妥善保管这个句柄，如果没有保存，当 &lt;code>while&lt;/code> 循环结束时，协程会被销毁，导致异常。
所以要把协程的句柄保存在 &lt;code>sessions_&lt;/code> 这个 map 中，以便后续管理。&lt;/p>
&lt;p>&lt;code>t.setOnDone([connId, this]() { sessions_.erase(connId); });&lt;/code> 在这里，通过设置回调函数，设置了协程完成后的清理工作。&lt;/p>
&lt;h3 id="awaitablebaseop">&lt;a href="#awaitablebaseop" class="header-anchor">&lt;/a>AwaitableBaseOp
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">class&lt;/span> &lt;span style="color:#50fa7b">AwaitableBaseOp&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>&lt;span style="color:#ff79c6">public&lt;/span>&lt;span style="color:#ff79c6">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span> &lt;span style="color:#ff79c6">explicit&lt;/span> AwaitableBaseOp(std&lt;span style="color:#ff79c6">::&lt;/span>coroutine_handle&lt;span style="color:#ff79c6">&amp;lt;&amp;gt;&lt;/span> h) &lt;span style="color:#ff79c6">:&lt;/span> coro_(h) {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span> &lt;span style="color:#ff79c6">virtual&lt;/span> &lt;span style="color:#ff79c6">~&lt;/span>AwaitableBaseOp() &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">default&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span> &lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">resume&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (coro_ &lt;span style="color:#ff79c6">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#ff79c6">!&lt;/span>coro_.done()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span> coro_.resume();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span> &lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">SetRes&lt;/span>(&lt;span style="color:#8be9fd">int&lt;/span> res) { res_ &lt;span style="color:#ff79c6">=&lt;/span> res; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">GetRes&lt;/span>() &lt;span style="color:#ff79c6">const&lt;/span> { &lt;span style="color:#ff79c6">return&lt;/span> res_; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span>&lt;span style="color:#ff79c6">protected&lt;/span>&lt;span style="color:#ff79c6">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>coroutine_handle&lt;span style="color:#ff79c6">&amp;lt;&amp;gt;&lt;/span> coro_;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> res_ &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20&lt;/span>&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>定义了协程的基本操作，包括恢复协程和设置结果。这个类的实例的指针会被传递给 &lt;code>io_uring_sqe&lt;/code> 的 user_data 中。
当 &lt;code>io_uring&lt;/code> 的异步操作完成时，&lt;code>io_uring&lt;/code> 通过得到 &lt;code>io_uring_cqe&lt;/code> &lt;code>AwaitableBaseOp&lt;/code> 的指针，调用 &lt;code>SetRes&lt;/code> 来设置结果，然后调用 &lt;code>resume&lt;/code> 来恢复协程。&lt;/p>
&lt;h3 id="awaitable">&lt;a href="#awaitable" class="header-anchor">&lt;/a>Awaitable
&lt;/h3>&lt;p>需要到 accept read write 的操作都可以封装成一个 Awaitable 类，方便管理协程的状态和生命周期。&lt;/p>
&lt;h4 id="accept">&lt;a href="#accept" class="header-anchor">&lt;/a>accept
&lt;/h4>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">class&lt;/span> &lt;span style="color:#50fa7b">AwaitableAccept&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span> IoUring &lt;span style="color:#ff79c6">*&lt;/span>uring_ &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">nullptr&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span> sockaddr_storage addr_{};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span> socklen_t addrlen_{};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> serverFd_ &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span> AwaitableBaseOp &lt;span style="color:#ff79c6">*&lt;/span>op &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">nullptr&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span>&lt;span style="color:#ff79c6">public&lt;/span>&lt;span style="color:#ff79c6">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span> &lt;span style="color:#6272a4">//省略部分代码
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span> &lt;span style="color:#ff79c6">~&lt;/span>AwaitableAccept() &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">default&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span> &lt;span style="color:#8be9fd">bool&lt;/span> &lt;span style="color:#50fa7b">await_ready&lt;/span>() &lt;span style="color:#ff79c6">const&lt;/span> &lt;span style="color:#ff79c6">noexcept&lt;/span> { &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">false&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span> &lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">await_suspend&lt;/span>(std&lt;span style="color:#ff79c6">::&lt;/span>coroutine_handle&lt;span style="color:#ff79c6">&amp;lt;&amp;gt;&lt;/span> h) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span> op &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">new&lt;/span> AwaitableBaseOp(h);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>&lt;span> io_uring_sqe &lt;span style="color:#ff79c6">*&lt;/span>sqe &lt;span style="color:#ff79c6">=&lt;/span> io_uring_get_sqe(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>uring_&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>Uring());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20&lt;/span>&lt;span> io_uring_prep_accept(sqe, serverFd_, &lt;span style="color:#ff79c6">reinterpret_cast&lt;/span>&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>sockaddr &lt;span style="color:#ff79c6">*&amp;gt;&lt;/span>(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>addr_),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21&lt;/span>&lt;span> &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>addrlen_, &lt;span style="color:#bd93f9">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22&lt;/span>&lt;span> io_uring_sqe_set_data(sqe, op);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23&lt;/span>&lt;span> io_uring_submit(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>uring_&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>Uring());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">await_resume&lt;/span>() &lt;span style="color:#ff79c6">const&lt;/span> &lt;span style="color:#ff79c6">noexcept&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> res &lt;span style="color:#ff79c6">=&lt;/span> op&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>GetRes();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28&lt;/span>&lt;span> &lt;span style="color:#ff79c6">delete&lt;/span> op;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> res;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31&lt;/span>&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这是 &lt;code>AwaitableAccept&lt;/code> 类的实现，封装了对 &lt;code>io_uring&lt;/code> 的 accept 操作。通过使用协程，可以方便地管理异步 I/O 操作的状态和生命周期。&lt;/p>
&lt;p>&lt;code>await_suspend&lt;/code> 函数会在协程挂起时（co_await 操作）被调用，负责将协程的句柄与 &lt;code>io_uring&lt;/code> 的请求关联起来。
在函数内部，创建一个 &lt;code>AwaitableBaseOp&lt;/code> 对象，并将协程的句柄传递给它。然后，准备一个 &lt;code>io_uring&lt;/code> 的提交请求，并将 &lt;code>AwaitableBaseOp&lt;/code> 对象的指针设置为请求的用户数据。最后，提交请求到 &lt;code>io_uring&lt;/code>。&lt;/p>
&lt;p>&lt;code>await_resume&lt;/code> 函数会在协程恢复时（调用 &lt;code>resume&lt;/code>）被调用，负责获取异步操作的结果并清理资源。
这里 &lt;code>return&lt;/code> 最后返回结果。这里 &lt;code>return&lt;/code> 的值会被 &lt;code>co_await&lt;/code> 表达式的调用者获取到。&lt;/p>
&lt;h4 id="read">&lt;a href="#read" class="header-anchor">&lt;/a>read
&lt;/h4>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">class&lt;/span> &lt;span style="color:#50fa7b">AwaitableRead&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span> IoUring &lt;span style="color:#ff79c6">*&lt;/span>uring_ &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">nullptr&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> fd_ &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>string &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>buffer_;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span> AwaitableBaseOp &lt;span style="color:#ff79c6">*&lt;/span>op_ &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">nullptr&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span>&lt;span style="color:#ff79c6">public&lt;/span>&lt;span style="color:#ff79c6">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span> &lt;span style="color:#6272a4">//省略部分代码
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#8be9fd">void&lt;/span> await_suspend(std&lt;span style="color:#ff79c6">::&lt;/span>coroutine_handle&lt;span style="color:#ff79c6">&amp;lt;&amp;gt;&lt;/span> h) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span> op_ &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">new&lt;/span> AwaitableBaseOp(h);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span> io_uring_sqe &lt;span style="color:#ff79c6">*&lt;/span>sqe &lt;span style="color:#ff79c6">=&lt;/span> io_uring_get_sqe(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>uring_&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>Uring());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span> io_uring_prep_recv(sqe, fd_, buffer_.data(), buffer_.size(), &lt;span style="color:#bd93f9">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span> io_uring_sqe_set_data(sqe, op_);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span> io_uring_submit(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>uring_&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>Uring());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span> &lt;span style="color:#6272a4">//省略部分代码
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>AwaitableRead&lt;/code> 类的实现，封装了对 &lt;code>io_uring&lt;/code> 的读取操作。&lt;/p>
&lt;p>中间省略了一些代码细节，但整体思路就是通过 &lt;code>AwaitableRead&lt;/code> 类来简化异步读取操作的实现。&lt;/p>
&lt;p>&lt;code>await_suspend&lt;/code> 函数内部，将协程的句柄与 &lt;code>io_uring&lt;/code> 的请求关联起来。然后，准备一个 &lt;code>io_uring&lt;/code> 的提交请求，并将 &lt;code>AwaitableBaseOp&lt;/code> 对象的指针设置为请求的用户数据。最后，提交请求到 &lt;code>io_uring&lt;/code>。&lt;/p>
&lt;p>&lt;code>await_resume&lt;/code> 函数会在协程恢复时被调用，负责获取异步操作的结果并清理资源。这里 &lt;code>return&lt;/code> 最后返回结果。这里 &lt;code>return&lt;/code> 的值会被 &lt;code>co_await&lt;/code> 表达式的调用者获取到。&lt;/p>
&lt;h4 id="write">&lt;a href="#write" class="header-anchor">&lt;/a>write
&lt;/h4>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">class&lt;/span> &lt;span style="color:#50fa7b">AwaitableWrite&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span> IoUring &lt;span style="color:#ff79c6">*&lt;/span>uring_ &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">nullptr&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> fd_ &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>string buffer_;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span> AwaitableBaseOp &lt;span style="color:#ff79c6">*&lt;/span>op_ &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">nullptr&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span>&lt;span style="color:#ff79c6">public&lt;/span>&lt;span style="color:#ff79c6">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span> &lt;span style="color:#6272a4">//省略部分代码
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span> &lt;span style="color:#8be9fd">void&lt;/span> await_suspend(std&lt;span style="color:#ff79c6">::&lt;/span>coroutine_handle&lt;span style="color:#ff79c6">&amp;lt;&amp;gt;&lt;/span> h) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span> op_ &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">new&lt;/span> AwaitableBaseOp(h);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span> io_uring_sqe &lt;span style="color:#ff79c6">*&lt;/span>sqe &lt;span style="color:#ff79c6">=&lt;/span> io_uring_get_sqe(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>uring_&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>Uring());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span> io_uring_prep_write(sqe, fd_, buffer_.data(), buffer_.size(), &lt;span style="color:#bd93f9">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span> io_uring_sqe_set_data(sqe, op_);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span> io_uring_submit(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>uring_&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>Uring());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span> &lt;span style="color:#6272a4">//省略部分代码
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>AwaitableWrite&lt;/code> 类的实现，封装了对 &lt;code>io_uring&lt;/code> 的写入操作。基本和 &lt;code>AwaitableRead&lt;/code> 类类似，通过协程的方式简化了异步写入的流程。&lt;code>await_suspend&lt;/code> 函数负责将协程的句柄与 &lt;code>io_uring&lt;/code> 的请求关联起来，并提交写入请求。&lt;code>await_resume&lt;/code> 函数则负责获取写入操作的结果并清理资源。&lt;/p>
&lt;h2 id="run">&lt;a href="#run" class="header-anchor">&lt;/a>run
&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span> IoUring ioUring(&lt;span style="color:#bd93f9">8088&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (&lt;span style="color:#ff79c6">auto&lt;/span> ret &lt;span style="color:#ff79c6">=&lt;/span> ioUring.Init(); &lt;span style="color:#ff79c6">!&lt;/span>ret) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;uring init fail&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> ret.error() &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> t &lt;span style="color:#ff79c6">=&lt;/span> ioUring.acceptServer();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;Server started on port 8088.&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span> t.resume();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span> ioUring.run();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>运行这个程序&lt;/p>
&lt;ol>
&lt;li>创建一个 &lt;code>IoUring&lt;/code> 对象，监听8088端口。&lt;/li>
&lt;li>调用 &lt;code>IoUring::Init&lt;/code> 初始化 &lt;code>io_uring&lt;/code>。&lt;/li>
&lt;li>调用 &lt;code>IoUring::acceptServer&lt;/code> 开始接受连接。&lt;/li>
&lt;li>调用 &lt;code>IoUring::run&lt;/code> 进入事件循环。&lt;/li>
&lt;/ol>
&lt;p>到这，整个协程与 &lt;code>io_uring&lt;/code> 的结合就完成了。通过这种方式，我们可以在 C++ 中优雅地处理异步 I/O 操作，充分利用协程的优势，提高代码的可读性和可维护性。
可能会有人问，怎么没看到有关线程 &lt;code>std::thread&lt;/code> 的代码？因为这个例子是单线程内使用协程的，所有的操作都是在同一个线程中完成的。所谓的异步是通过协程的挂起和恢复来实现的，而不是通过多线程并发执行。通过异步 I/O 读写时，不会阻塞当前线程，当读写完成后，通知当前线程，来实现的异步。&lt;/p>
&lt;p>那这样设计的好处是什么呢？首先，它避免了多线程编程中的许多复杂性，比如线程安全、锁竞争等问题。其次，协程的上下文切换比线程轻量得多，性能开销更小。最后，协程可以让异步代码看起来像同步代码，极大地提高了可读性和可维护性。&lt;/p>
&lt;p>如果要使用多线程来充分利用多核 CPU 的性能，可以在每个线程中创建一个 &lt;code>IoUring&lt;/code> 对象，并使用协程来处理每个线程中的异步 I/O 操作。这样可以在保持代码简洁的同时，充分利用多核 CPU 的优势。&lt;/p></description></item><item><title>C++20协程，入门，基础，异步 - QX's blog</title><link>https://lqxhub.github.io/posts/541b707d/</link><pubDate>Sun, 17 Aug 2025 20:19:20 +0800</pubDate><guid>https://lqxhub.github.io/posts/541b707d/</guid><description>&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/6271dad17bae0c4a3d2fd061106001be135c745e.jpg" alt="Featured image of post C++20协程，入门，基础，异步 - QX's blog" />&lt;p>差不多有半年没有写东西了，主要是这段时间太忙了，一直没空，这两周开始有了一点空闲时间，重新捡起了C++协程相关的知识，又学了一下，写篇文章，做点笔记。
去年就了解了一点C++协程相关的知识，但是当时只是浅显的了解了一下，很多东西没有弄清楚，这次整理了一些概念，写了一些demo。&lt;/p>
&lt;p>C++的协程是C++20开始支持的，协程也不是什么新鲜东西了，诞生于2009年的golang出生就带协程。使用过golang协程的可能都深有体会，协程在异步编程中提供了很好的支持，可以大幅度简化代码逻辑。但是说实话，C++这版本的协程只是实现了基础功能，对于写具体业务代码来说，还是很不方便的，太多的东西需要自己解决。不像golang的协程，一个 &lt;code>go&lt;/code> 关键字就行了。所以很多人开玩笑说，这版本的协程是给库作者的，不是给普通开发者的。这样也有好处，给了使用者更多的灵活性和控制权。&lt;/p>
&lt;p>在学习之前，先明确一个知识点，C++20的协程，如果没有自己实现多线程的调度逻辑，都是在单线程中执行的。只是 &lt;strong>并发&lt;/strong> 不是 &lt;strong>并行&lt;/strong> 。golang的协程能做到并行，是因为go的runtime实现了多线程的调度逻辑，而C++20的协程只是提供了协程的语法和基本的状态机支持，并没有提供多线程的调度逻辑。C++的协程，是通过函数的状态切换（把暂时不需要使用CPU的函数暂停，等到合适的时机再恢复执行）提高了CPU的利用效率，看上去像是异步执行了。&lt;/p>
&lt;p>C++协程的实现方式，后面会浅显介绍一下。因为太深入的我也了解不多。目前了解到的，C++的协程是基于状态机的实现的，编译器在编译协程时，会将协程转换为状态机的形式，从而实现协程的调度和切换。&lt;/p>
&lt;p>说到协程，首先要了解的是协程的两种基本类型：有栈协程和无栈协程。&lt;/p>
&lt;h2 id="有栈协程和无栈协程">&lt;a href="#%e6%9c%89%e6%a0%88%e5%8d%8f%e7%a8%8b%e5%92%8c%e6%97%a0%e6%a0%88%e5%8d%8f%e7%a8%8b" class="header-anchor">&lt;/a>有栈协程和无栈协程
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>有栈协程：
协程在执行时会使用自己的栈空间，协程的调用和返回都是通过栈来实现的。这种方式的优点是实现简单，性能较好，但缺点是栈空间有限，容易导致栈溢出。go语言的协程就是有栈协程的一个典型例子。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>无栈协程：
协程在执行时不使用自己的栈空间，而是将所有的状态信息保存在堆上。这种方式的优点是可以支持更大的协程栈，但缺点是实现复杂。C#的协程就是无栈协程的一个典型例子。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>既然是聊C++的协程（没有特殊说明，下文中所提到的C++协程都是指C++20的原生协程），那关注点就要放在C++的协程实现上，C++的协程采用的就是无栈协程，当然也有一些第三方协程库是有栈协程，这个不在本次讨论范围。C++的协程是基于状态机的实现的，编译器在编译协程时，会将协程转换为状态机的形式，从而实现协程的调度和切换。&lt;/p>
&lt;p>说的通俗一点，就是编译器在编译代码时，把协程函数编译成一个特殊的函数，这个函数有很多状态，可以被挂起（让出CPU资源，也叫暂停执行），恢复执行等等。这样的函数也叫做可重入函数。协程的状态信息（如局部变量、返回地址等）保存在堆上，而不是栈上。&lt;/p>
&lt;p>画一下协程的状态机图，可能会更清晰一些：&lt;/p>
&lt;p>
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/d31763e2ac703af0b000165eb12d05d98b8b7417.svg">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/d31763e2ac703af0b000165eb12d05d98b8b7417.svg" alt="" />
&lt;/a>
&lt;/div>
&lt;/p>
&lt;p>从这个图中可以看出，协程函数可以被挂起（暂停执行）和恢复执行，协程函数可以在多个状态之间切换，这些状态包括挂起、恢复和完成等。这样的设计使得协程能够在执行过程中灵活地让出控制权。&lt;/p>
&lt;p>至于协程函数是怎样被挂起和恢复的，主要是通过编译器生成的状态机来实现的。当协程函数被挂起时，编译器会保存当前的执行状态（如局部变量、返回地址等），并将控制权交回给调用者。当协程函数被恢复时，编译器会恢复之前保存的执行状态，从而实现协程的继续执行。&lt;/p>
&lt;p>下面将一点点来分析协程函数的控制。&lt;/p>
&lt;h2 id="c协程函数">&lt;a href="#c%e5%8d%8f%e7%a8%8b%e5%87%bd%e6%95%b0" class="header-anchor">&lt;/a>C++协程函数
&lt;/h2>&lt;p>C++协程函数的实现主要依赖于编译器的支持。在编写协程函数时，开发者只需使用 &lt;code>co_await&lt;/code>、&lt;code>co_yield&lt;/code> 和 &lt;code>co_return&lt;/code> 等关键字来定义协程的行为。编译器会根据这些关键字生成相应的状态机代码，从而实现协程的挂起和恢复。&lt;/p>
&lt;p>具体来说，当协程函数被调用时，编译器会创建一个状态机对象来管理协程的状态。这个状态机对象会保存协程的局部变量、返回地址等信息。当协程函数执行到 &lt;code>co_await&lt;/code> 或 &lt;code>co_yield&lt;/code> 时，编译器会将当前的执行状态保存到状态机对象中，并将控制权交回给调用者。当协程函数被恢复时，编译器会从状态机对象中恢复之前保存的执行状态，从而实现协程的继续执行。&lt;/p>
&lt;p>需要注意的是，C++协程函数的返回类型并不是普通的返回值，而是一个特殊的协程句柄（coroutine handle）。这个句柄可以用来管理协程的生命周期，例如启动、挂起和恢复等操作。&lt;/p>
&lt;p>看到这些可能会一头雾水，别着急，让我们一点点来。&lt;/p>
&lt;h3 id="协程函数和普通函数的区别">&lt;a href="#%e5%8d%8f%e7%a8%8b%e5%87%bd%e6%95%b0%e5%92%8c%e6%99%ae%e9%80%9a%e5%87%bd%e6%95%b0%e7%9a%84%e5%8c%ba%e5%88%ab" class="header-anchor">&lt;/a>协程函数和普通函数的区别
&lt;/h3>&lt;p>最明显的区别是协程函数可以被挂起和恢复。但是有没有想过，编译器在编译代码的时候，是怎样识别一个函数是普通函数还是协程函数呢？
这主要是通过协程函数的返回类型来判断的。协程函数的返回类型是一个特殊的协程句柄&lt;code>coroutine handle&lt;/code>，而不是普通的返回值。这个协程句柄可以用来管理协程的生命周期。&lt;/p>
&lt;p>所以当编译器看到一个函数的返回类型是&lt;code>coroutine handle&lt;/code>时，就会将其识别为协程函数。&lt;/p>
&lt;p>下面来看一下什么是协程句柄 &lt;code>coroutine handle&lt;/code>&lt;/p>
&lt;p>协程句柄是一个特殊的对象，用于管理协程的生命周期。它可以用来启动、挂起和恢复协程。协程句柄的实现依赖于编译器生成的状态机代码。&lt;/p>
&lt;p>说到 &lt;code>coroutine_handle&lt;/code> 就不得不提协程的 &lt;code>promise&lt;/code>。&lt;code>promise&lt;/code> 类型是协程的核心，它负责管理协程的状态和生命周期。每个协程都有一个对应的 &lt;code>promise&lt;/code> 对象，用于保存协程的状态信息。&lt;/p>
&lt;p>在 C++20 中，协程句柄的类型是 &lt;code>std::coroutine_handle&lt;/code>。这个类型是一个模板类，接受一个 &lt;code>promise&lt;/code> 类型作为模板参数。&lt;code>promise&lt;/code> 类型是协程的状态机对象，负责管理协程的状态。&lt;/p>
&lt;p>&lt;code>promise&lt;/code> 不是一个具体的类型，通常需要实现以下几个方法的结构体就是 &lt;code>promise&lt;/code>类型：&lt;/p>
&lt;ul>
&lt;li>&lt;code>get_return_object()&lt;/code>：返回协程的句柄&lt;/li>
&lt;li>&lt;code>initial_suspend()&lt;/code>：协程开始时是否挂起&lt;/li>
&lt;li>&lt;code>final_suspend()&lt;/code>：协程结束时是否挂起&lt;/li>
&lt;li>&lt;code>yield_value()&lt;/code>：协程中使用 &lt;code>co_yield&lt;/code> 返回值时的处理&lt;/li>
&lt;li>&lt;code>return_void()&lt;/code>：协程返回时是否返回值&lt;/li>
&lt;li>&lt;code>unhandled_exception()&lt;/code>：处理未捕获的异常&lt;/li>
&lt;/ul>
&lt;p>通过这些方法，协程的 &lt;code>promise&lt;/code> 类型可以与协程句柄进行交互，从而实现协程的挂起和恢复。&lt;/p>
&lt;p>也就是说，只要一个函数的返回值是 &lt;code>coroutine_handle&lt;/code> 类型，编译器就会将其识别为协程函数，协程函数能实现挂起和恢复的功能，主要是通过 &lt;code>promise&lt;/code> 对象来管理协程的状态和生命周期。&lt;/p>
&lt;h3 id="协程关键字">&lt;a href="#%e5%8d%8f%e7%a8%8b%e5%85%b3%e9%94%ae%e5%ad%97" class="header-anchor">&lt;/a>协程关键字
&lt;/h3>&lt;p>在C++20中，协程函数使用了三个个关键字来控制协程行为&lt;/p>
&lt;ol>
&lt;li>&lt;code>co_await&lt;/code>：用于挂起协程并等待一个异步操作的完成。&lt;/li>
&lt;li>&lt;code>co_yield&lt;/code>：用于返回一个值并挂起协程的执行。&lt;/li>
&lt;li>&lt;code>co_return&lt;/code>：用于返回协程的最终结果。&lt;/li>
&lt;/ol>
&lt;p>通过这些关键字，开发者可以方便地定义协程的行为，从而实现异步编程的需求。&lt;/p>
&lt;p>&lt;code>co_await&lt;/code> 和 &lt;code>co_yield&lt;/code> 关键字可以用于实现协程的挂起和恢复，而 &lt;code>co_return&lt;/code> 关键字则用于返回协程的最终结果。&lt;/p>
&lt;p>其中 &lt;code>co_await&lt;/code> 是用于挂起协程并等待一个异步操作的完成的关键字。&lt;/p>
&lt;p>说到 &lt;code>co_await&lt;/code>，我们就不得不提一下可等待对象&lt;code>awaitable&lt;/code>。这个对象和 &lt;code>promise&lt;/code> 有点类似，不是一个具体的类型，而是一个接口。这个对象需要实现以下三个方法：&lt;/p>
&lt;ol>
&lt;li>&lt;code>await_ready()&lt;/code>：用于检查异步操作是否已经完成。&lt;/li>
&lt;li>&lt;code>await_suspend()&lt;/code>：用于挂起协程并等待异步操作的完成。&lt;/li>
&lt;li>&lt;code>await_resume()&lt;/code>：用于恢复协程并返回异步操作的结果。&lt;/li>
&lt;/ol>
&lt;p>下面一个个来介绍一下这三个方法的具体实现。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">bool&lt;/span> &lt;span style="color:#50fa7b">await_ready&lt;/span>() &lt;span style="color:#ff79c6">const&lt;/span> &lt;span style="color:#ff79c6">noexcept&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个函数用于检查异步操作是否已经完成。如果异步操作已经完成，则返回 &lt;code>true&lt;/code>，否则返回 &lt;code>false&lt;/code>。如果返回 &lt;code>true&lt;/code>，则协程会立即恢复执行，而不会挂起。&lt;/p>
&lt;p>这个函数一般会在协程的 &lt;code>await&lt;/code> 表达式中被调用。如果返回 &lt;code>false&lt;/code>，则协程会被挂起，等待异步操作的完成。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> await_suspend(std&lt;span style="color:#ff79c6">::&lt;/span>coroutine_handle&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>result&lt;span style="color:#ff79c6">::&lt;/span>promise_type&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> coro)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个函数用于挂起协程并等待异步操作的完成。它接受一个协程句柄作为参数，这个句柄指向当前协程的 &lt;code>promise&lt;/code> 对象。
当异步操作完成时，协程会被恢复执行。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> await_resume()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个函数用于恢复协程并返回异步操作的结果。它一般会在协程的 &lt;code>await&lt;/code> 表达式中被调用，用于获取异步操作的结果。&lt;/p>
&lt;p>函数的返回值类型可以是任意类型，通常是异步操作的结果类型。如果异步操作没有结果，则可以返回 &lt;code>void&lt;/code>。&lt;/p>
&lt;p>这里还有两个特殊的 &lt;code>await&lt;/code>， &lt;code>std::suspend_always&lt;/code> 和 &lt;code>std::suspend_never&lt;/code>&lt;/p>
&lt;ul>
&lt;li>&lt;code>std::suspend_always&lt;/code>：表示协程在每次挂起时都会等待，直到显式调用 &lt;code>resume()&lt;/code> 恢复协程。&lt;/li>
&lt;li>&lt;code>std::suspend_never&lt;/code>：表示协程在挂起时不会等待，直接返回控制权给调用者。&lt;/li>
&lt;/ul>
&lt;p>直接去看一下这两个类型的实现就明白了，下面是在 llvm-18 的 libc++ 中的实现：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">suspend_never&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span> _LIBCPP_HIDE_FROM_ABI &lt;span style="color:#ff79c6">constexpr&lt;/span> &lt;span style="color:#8be9fd">bool&lt;/span> &lt;span style="color:#50fa7b">await_ready&lt;/span>() &lt;span style="color:#ff79c6">const&lt;/span> &lt;span style="color:#ff79c6">noexcept&lt;/span> { &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">true&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span> _LIBCPP_HIDE_FROM_ABI &lt;span style="color:#ff79c6">constexpr&lt;/span> &lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">await_suspend&lt;/span>(coroutine_handle&lt;span style="color:#ff79c6">&amp;lt;&amp;gt;&lt;/span>) &lt;span style="color:#ff79c6">const&lt;/span> &lt;span style="color:#ff79c6">noexcept&lt;/span> {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span> _LIBCPP_HIDE_FROM_ABI &lt;span style="color:#ff79c6">constexpr&lt;/span> &lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">await_resume&lt;/span>() &lt;span style="color:#ff79c6">const&lt;/span> &lt;span style="color:#ff79c6">noexcept&lt;/span> {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span>&lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">suspend_always&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span> _LIBCPP_HIDE_FROM_ABI &lt;span style="color:#ff79c6">constexpr&lt;/span> &lt;span style="color:#8be9fd">bool&lt;/span> &lt;span style="color:#50fa7b">await_ready&lt;/span>() &lt;span style="color:#ff79c6">const&lt;/span> &lt;span style="color:#ff79c6">noexcept&lt;/span> { &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">false&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span> _LIBCPP_HIDE_FROM_ABI &lt;span style="color:#ff79c6">constexpr&lt;/span> &lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">await_suspend&lt;/span>(coroutine_handle&lt;span style="color:#ff79c6">&amp;lt;&amp;gt;&lt;/span>) &lt;span style="color:#ff79c6">const&lt;/span> &lt;span style="color:#ff79c6">noexcept&lt;/span> {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span> _LIBCPP_HIDE_FROM_ABI &lt;span style="color:#ff79c6">constexpr&lt;/span> &lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">await_resume&lt;/span>() &lt;span style="color:#ff79c6">const&lt;/span> &lt;span style="color:#ff79c6">noexcept&lt;/span> {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="协程注意事项">&lt;a href="#%e5%8d%8f%e7%a8%8b%e6%b3%a8%e6%84%8f%e4%ba%8b%e9%a1%b9" class="header-anchor">&lt;/a>协程注意事项
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>协程的生命周期&lt;/strong>：协程的生命周期由协程句柄 &lt;code>coroutine_handle&lt;/code> 管理。协程句柄可以用来启动、挂起和恢复协程。开发者需要注意协程的生命周期，以避免悬空指针和资源泄露等问题。
协程句柄一定要妥善处理，一个协程句柄只能调用一次 &lt;code>destroy()&lt;/code> 方法。而且在协程结束后，协程句柄会被销毁，因此开发者需要确保在协程结束前完成对协程句柄的所有操作。如果没有调用 &lt;code>destroy()&lt;/code> 方法，协程的资源可能无法被释放，从而导致内存泄漏。如果多次调用 &lt;code>destroy()&lt;/code> 方法或者在调用&lt;code>destroy()&lt;/code>再次调用&lt;code>resume()&lt;/code>，可能会导致未定义行为。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>异常处理&lt;/strong>：协程中的异常处理与普通函数有所不同。协程可以通过 &lt;code>promise&lt;/code> 对象的 &lt;code>unhandled_exception()&lt;/code> 方法来处理未捕获的异常。开发者需要在 &lt;code>promise&lt;/code> 类型中实现这个方法，以确保协程中的异常能够被正确处理。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="协程例子">&lt;a href="#%e5%8d%8f%e7%a8%8b%e4%be%8b%e5%ad%90" class="header-anchor">&lt;/a>协程例子
&lt;/h2>&lt;p>说了这么多，通过这些文字可能还是难以理解，下面通过一个简单的例子来帮助理解协程的使用。&lt;/p>
&lt;p>我感觉真正适合协程的场景是需要等待某个操作完成后再继续执行后续逻辑的情况，比如网络请求、文件读写等。最好的搭档就是异步IO的场景。但是直接拿 &lt;code>iouring&lt;/code> 这种高性能的异步IO库来做协程的调度，可能会比较复杂，增加理解成本。&lt;/p>
&lt;p>所以就先拿一个简单的例子来说明协程的使用。这个例子是一个简单的协程函数，它会打印一些数字。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;coroutine&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;optional&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span>&lt;span style="color:#ff79c6">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span>&lt;span style="color:#ff79c6">template&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&lt;/span>&lt;span style="color:#ff79c6">typename&lt;/span> T&lt;span style="color:#ff79c6">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span>&lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">Task&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span> &lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">promise_type&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>optional&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>T&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> current_value;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> &lt;span style="color:#50fa7b">get_return_object&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> Task{std&lt;span style="color:#ff79c6">::&lt;/span>coroutine_handle&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>promise_type&lt;span style="color:#ff79c6">&amp;gt;::&lt;/span>from_promise(&lt;span style="color:#ff79c6">*&lt;/span>&lt;span style="color:#ff79c6">this&lt;/span>)};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> &lt;span style="color:#50fa7b">initial_suspend&lt;/span>() { &lt;span style="color:#ff79c6">return&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>suspend_always{}; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> &lt;span style="color:#50fa7b">final_suspend&lt;/span>() &lt;span style="color:#ff79c6">noexcept&lt;/span> { &lt;span style="color:#ff79c6">return&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>suspend_always{}; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span> &lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">unhandled_exception&lt;/span>() { std&lt;span style="color:#ff79c6">::&lt;/span>terminate(); }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span> &lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">return_void&lt;/span>() {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> &lt;span style="color:#50fa7b">yield_value&lt;/span>(T value) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21&lt;/span>&lt;span> current_value &lt;span style="color:#ff79c6">=&lt;/span> value;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>suspend_always{}; &lt;span style="color:#6272a4">// 挂起，等待 next() 恢复
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24&lt;/span>&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>optional&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>T&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> next() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (&lt;span style="color:#ff79c6">!&lt;/span>handle_ &lt;span style="color:#ff79c6">||&lt;/span> handle_.done()) &lt;span style="color:#ff79c6">return&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>nullopt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28&lt;/span>&lt;span> handle_.resume();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (handle_.done()) &lt;span style="color:#ff79c6">return&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>nullopt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>move(handle_.promise().current_value);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33&lt;/span>&lt;span> Task(std&lt;span style="color:#ff79c6">::&lt;/span>coroutine_handle&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>promise_type&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> h) &lt;span style="color:#ff79c6">:&lt;/span> handle_(h) {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34&lt;/span>&lt;span> Task(Task&lt;span style="color:#ff79c6">&amp;amp;&amp;amp;&lt;/span> other) &lt;span style="color:#ff79c6">noexcept&lt;/span> &lt;span style="color:#ff79c6">:&lt;/span> handle_(other.handle_) { other.handle_ &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">nullptr&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35&lt;/span>&lt;span> Task&lt;span style="color:#ff79c6">&amp;amp;&lt;/span> &lt;span style="color:#ff79c6">operator&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>(Task&lt;span style="color:#ff79c6">&amp;amp;&amp;amp;&lt;/span> other) &lt;span style="color:#ff79c6">noexcept&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (&lt;span style="color:#ff79c6">this&lt;/span> &lt;span style="color:#ff79c6">!=&lt;/span> &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>other) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (handle_) handle_.destroy();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38&lt;/span>&lt;span> handle_ &lt;span style="color:#ff79c6">=&lt;/span> other.handle_;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39&lt;/span>&lt;span> other.handle_ &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">nullptr&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>&lt;span style="color:#ff79c6">this&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">44&lt;/span>&lt;span> &lt;span style="color:#ff79c6">~&lt;/span>Task() { &lt;span style="color:#ff79c6">if&lt;/span> (handle_) handle_.destroy(); }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">45&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">46&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>coroutine_handle&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>promise_type&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> handle_;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">47&lt;/span>&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">48&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">49&lt;/span>&lt;span>&lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">Awaiter&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">50&lt;/span>&lt;span> &lt;span style="color:#8be9fd">bool&lt;/span> &lt;span style="color:#50fa7b">await_ready&lt;/span>() &lt;span style="color:#ff79c6">const&lt;/span> &lt;span style="color:#ff79c6">noexcept&lt;/span> { &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">false&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">51&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">52&lt;/span>&lt;span> &lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">await_suspend&lt;/span>(std&lt;span style="color:#ff79c6">::&lt;/span>coroutine_handle&lt;span style="color:#ff79c6">&amp;lt;&amp;gt;&lt;/span> h) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">53&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;Awaiter suspend &amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> input &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">54&lt;/span>&lt;span> &lt;span style="color:#6272a4">// 这里必须恢复协程
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">55&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> h.resume();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">56&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">57&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">58&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">await_resume&lt;/span>() &lt;span style="color:#ff79c6">noexcept&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">59&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;Awaiter resume &amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> input &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">60&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> input &lt;span style="color:#ff79c6">*&lt;/span> &lt;span style="color:#bd93f9">10&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">61&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">62&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">63&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> input &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">64&lt;/span>&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">65&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">66&lt;/span>&lt;span>Task&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>&lt;span style="color:#8be9fd">int&lt;/span>&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> AsyncFunction(&lt;span style="color:#8be9fd">int&lt;/span> n) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">67&lt;/span>&lt;span> &lt;span style="color:#ff79c6">for&lt;/span> (&lt;span style="color:#8be9fd">int&lt;/span> i &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>; i &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> n; &lt;span style="color:#ff79c6">++&lt;/span>i) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">68&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> ret &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">co_await&lt;/span> Awaiter{i &lt;span style="color:#ff79c6">+&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">69&lt;/span>&lt;span> &lt;span style="color:#ff79c6">co_yield&lt;/span> ret;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">70&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">71&lt;/span>&lt;span> &lt;span style="color:#ff79c6">co_return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">72&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">73&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">74&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">75&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> t &lt;span style="color:#ff79c6">=&lt;/span> AsyncFunction(&lt;span style="color:#bd93f9">5&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">76&lt;/span>&lt;span> &lt;span style="color:#ff79c6">while&lt;/span> (&lt;span style="color:#ff79c6">auto&lt;/span> v &lt;span style="color:#ff79c6">=&lt;/span> t.next()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">77&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;Received: &amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>v &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">78&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">79&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">80&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>程序输出如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>Awaiter suspend 1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>Awaiter resume 1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span>Received: 10
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span>Awaiter suspend 2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span>Awaiter resume 2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span>Received: 20
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span>Awaiter suspend 3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span>Awaiter resume 3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span>Received: 30
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span>Awaiter suspend 4
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span>Awaiter resume 4
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span>Received: 40
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span>Awaiter suspend 5
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span>Awaiter resume 5
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span>Received: 50
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过打印的信息可以看到，协程函数 &lt;code>AsyncFunction&lt;/code> 在每次迭代时都会挂起，并通过 &lt;code>co_yield&lt;/code> 返回一个值。每次调用 &lt;code>next()&lt;/code> 方法时，协程会恢复执行，直到下一个 &lt;code>co_yield&lt;/code> 或协程结束。&lt;/p>
&lt;p>这里是为了展示 &lt;code>co_yield&lt;/code> 的用法。才会在协程中使用 &lt;code>co_yield&lt;/code> 来返回值。这样写有点画蛇添足了，如果不需要返回值，可以直接使用 &lt;code>co_await&lt;/code> 来等待异步操作的完成。这样可以简化代码，更符合协程的使用场景。&lt;/p>
&lt;p>下面让我们来简化一下这段代码&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;coroutine&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;thread&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span>&lt;span style="color:#ff79c6">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span>&lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">Task&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span> &lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">promise_type&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> &lt;span style="color:#50fa7b">get_return_object&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> Task{std&lt;span style="color:#ff79c6">::&lt;/span>coroutine_handle&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>promise_type&lt;span style="color:#ff79c6">&amp;gt;::&lt;/span>from_promise(&lt;span style="color:#ff79c6">*&lt;/span>&lt;span style="color:#ff79c6">this&lt;/span>)};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> &lt;span style="color:#50fa7b">initial_suspend&lt;/span>() { &lt;span style="color:#ff79c6">return&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>suspend_always{}; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> &lt;span style="color:#50fa7b">final_suspend&lt;/span>() &lt;span style="color:#ff79c6">noexcept&lt;/span> { &lt;span style="color:#ff79c6">return&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>suspend_always{}; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span> &lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">unhandled_exception&lt;/span>() { std&lt;span style="color:#ff79c6">::&lt;/span>terminate(); }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>&lt;span> &lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">return_void&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20&lt;/span>&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22&lt;/span>&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24&lt;/span>&lt;span> Task(std&lt;span style="color:#ff79c6">::&lt;/span>coroutine_handle&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>promise_type&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> h) &lt;span style="color:#ff79c6">:&lt;/span> handle_(h)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25&lt;/span>&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28&lt;/span>&lt;span> Task(Task&lt;span style="color:#ff79c6">&amp;amp;&amp;amp;&lt;/span> other) &lt;span style="color:#ff79c6">noexcept&lt;/span> &lt;span style="color:#ff79c6">:&lt;/span> handle_(other.handle_) { other.handle_ &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">nullptr&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30&lt;/span>&lt;span> Task&lt;span style="color:#ff79c6">&amp;amp;&lt;/span> &lt;span style="color:#ff79c6">operator&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>(Task&lt;span style="color:#ff79c6">&amp;amp;&amp;amp;&lt;/span> other) &lt;span style="color:#ff79c6">noexcept&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31&lt;/span>&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (&lt;span style="color:#ff79c6">this&lt;/span> &lt;span style="color:#ff79c6">!=&lt;/span> &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>other)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33&lt;/span>&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (handle_) handle_.destroy();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35&lt;/span>&lt;span> handle_ &lt;span style="color:#ff79c6">=&lt;/span> other.handle_;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36&lt;/span>&lt;span> other.handle_ &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">nullptr&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>&lt;span style="color:#ff79c6">this&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41&lt;/span>&lt;span> &lt;span style="color:#ff79c6">~&lt;/span>Task() { &lt;span style="color:#ff79c6">if&lt;/span> (handle_) handle_.destroy(); }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>coroutine_handle&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>promise_type&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> handle_;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">44&lt;/span>&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">45&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">46&lt;/span>&lt;span>&lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">Awaiter&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">47&lt;/span>&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">48&lt;/span>&lt;span> &lt;span style="color:#8be9fd">bool&lt;/span> &lt;span style="color:#50fa7b">await_ready&lt;/span>() &lt;span style="color:#ff79c6">const&lt;/span> &lt;span style="color:#ff79c6">noexcept&lt;/span> { &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">false&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">49&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">50&lt;/span>&lt;span> &lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">await_suspend&lt;/span>(std&lt;span style="color:#ff79c6">::&lt;/span>coroutine_handle&lt;span style="color:#ff79c6">&amp;lt;&amp;gt;&lt;/span> h)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">51&lt;/span>&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">52&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;Awaiter suspend &amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> input &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">53&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>&lt;span style="color:#ff79c6">thread&lt;/span> t([h]()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">54&lt;/span>&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">55&lt;/span>&lt;span> &lt;span style="color:#6272a4">//把协程挂起一段时间，模拟异步操作
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">56&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>this_thread&lt;span style="color:#ff79c6">::&lt;/span>sleep_for(std&lt;span style="color:#ff79c6">::&lt;/span>chrono&lt;span style="color:#ff79c6">::&lt;/span>seconds(&lt;span style="color:#bd93f9">1&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">57&lt;/span>&lt;span> h.resume();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">58&lt;/span>&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">59&lt;/span>&lt;span> t.detach(); &lt;span style="color:#6272a4">// 分离线程，避免阻塞
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">60&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">61&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">62&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">await_resume&lt;/span>() &lt;span style="color:#ff79c6">noexcept&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">63&lt;/span>&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">64&lt;/span>&lt;span> &lt;span style="color:#6272a4">//协程恢复时执行的操作
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">65&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;Awaiter resume &amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> input &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">66&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> input &lt;span style="color:#ff79c6">*&lt;/span> &lt;span style="color:#bd93f9">10&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">67&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">68&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">69&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> input &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">70&lt;/span>&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">71&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">72&lt;/span>&lt;span>Task &lt;span style="color:#50fa7b">AsyncFunction&lt;/span>(&lt;span style="color:#8be9fd">int&lt;/span> n)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">73&lt;/span>&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">74&lt;/span>&lt;span> &lt;span style="color:#ff79c6">for&lt;/span> (&lt;span style="color:#8be9fd">int&lt;/span> i &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>; i &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> n; &lt;span style="color:#ff79c6">++&lt;/span>i)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">75&lt;/span>&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">76&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> ret &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">co_await&lt;/span> Awaiter{i &lt;span style="color:#ff79c6">+&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">77&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;Awaiter returned &amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> ret &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">78&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;------------------------&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">79&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">80&lt;/span>&lt;span> &lt;span style="color:#ff79c6">co_return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">81&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">82&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">83&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">main&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">84&lt;/span>&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">85&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> t &lt;span style="color:#ff79c6">=&lt;/span> AsyncFunction(&lt;span style="color:#bd93f9">5&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">86&lt;/span>&lt;span> t.handle_.resume();&lt;span style="color:#6272a4">//手动唤醒协程
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">87&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#ff79c6">while&lt;/span> (&lt;span style="color:#ff79c6">!&lt;/span>t.handle_.done())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">88&lt;/span>&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">89&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">90&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">91&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面就是去掉 &lt;code>co_yield&lt;/code> 后简化的代码。&lt;/p>
&lt;p>程序执行的输出如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>Awaiter suspend 1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>Awaiter resume 1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span>Awaiter returned 10
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span>------------------------
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span>Awaiter suspend 2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span>Awaiter resume 2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span>Awaiter returned 20
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span>------------------------
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span>Awaiter suspend 3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span>Awaiter resume 3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span>Awaiter returned 30
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span>------------------------
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span>Awaiter suspend 4
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span>Awaiter resume 4
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span>Awaiter returned 40
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span>------------------------
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span>Awaiter suspend 5
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span>Awaiter resume 5
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>&lt;span>Awaiter returned 50
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20&lt;/span>&lt;span>------------------------
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在 &lt;code>main&lt;/code> 函数中，我们手动唤醒协程，并通过循环等待协程完成。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">while&lt;/span> (&lt;span style="color:#ff79c6">!&lt;/span>t.handle_.done())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里通过 &lt;code>while&lt;/code> 循环不断地检查协程是否完成。为什么需要这样做，是因为如果没有检查，而是在协程挂起时直接返回，会导致程序直接退出。&lt;/p>
&lt;p>这也是协程 &lt;strong>异步&lt;/strong> 的体现。普通函数只要调用了，就会一直执行，直到整个函数都执行完成才会退出，然后由函数调用者继续执行。
协程函数会在调用 &lt;code>co_await&lt;/code> 时挂起，让出CPU资源，由协程函数的调用者（这里就是main函数）继续执行。等到异步操作完成（也就是执行了 resume）后再恢复执行。&lt;/p>
&lt;p>我们在 &lt;code>await_suspend&lt;/code> 中创建了一个新的线程来模拟异步操作。在这个线程中，我们使用 &lt;code>std::this_thread::sleep_for&lt;/code> 来让当前线程暂定1秒，模拟异步操作的延迟。&lt;/p>
&lt;p>通过这种方式，我们可以在协程中使用 &lt;code>co_await&lt;/code> 来等待异步操作的完成，而不需要使用 &lt;code>co_yield&lt;/code> 来返回值。这使得代码更加简洁，也更符合协程的使用场景。&lt;/p>
&lt;p>差不多能想到的就是这些了，当然这只是C++协程中的九牛一毛，想要更深入了解协程的使用，还要通过更多的例子来实践。&lt;/p>
&lt;p>下期将使用 &lt;code>io_uring&lt;/code> + 协程来实现真正的异步IO操作。发挥出协程的优势。&lt;/p>
&lt;p>协程+io_uring的文章来了 &lt;a class="link" href="https://lqxhub.github.io/posts/d26369fd" >传送门&lt;/a>&lt;/p></description></item><item><title>C++中的移动语义与完美转发，C++中的右值引用、std::move和std::forward的使用方法及其实现原理，结合实例讲解RVO</title><link>https://lqxhub.github.io/posts/14155cf4/</link><pubDate>Sun, 16 Mar 2025 19:50:55 +0800</pubDate><guid>https://lqxhub.github.io/posts/14155cf4/</guid><description>&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/7320b79a5cd9f9ac9e07752081db9612e98ca223.jpg" alt="Featured image of post C++中的移动语义与完美转发，C++中的右值引用、std::move和std::forward的使用方法及其实现原理，结合实例讲解RVO" />&lt;p>上一篇文章&lt;a class="link" href="https://lqxhub.github.io/posts/567e834f" >《C++变量生命周期》&lt;/a>中提到了C++中变量的生命周期与作用域是有差别的，其中提到了 &lt;strong>左值&lt;/strong> 和 &lt;strong>右值&lt;/strong> 这两个概念，引申出来了 &lt;strong>左值引用&lt;/strong> 和 &lt;strong>右值引用&lt;/strong> 这两个东西，上次因为篇幅问题，只是简单说了一下左值和右值的一些区别，生命周期和简单用法，没有详细展开。这次讨论一下右值引用的一些常见问题和使用。&lt;/p>
&lt;h2 id="move">&lt;a href="#move" class="header-anchor">&lt;/a>move
&lt;/h2>&lt;p>在C++11中，加入了 &lt;code>std::move&lt;/code> 函数，实现了移动语义，有了 move函数后，可以实现高效的资源转移，不必像传统的复制那样 ‘笨重’。&lt;/p>
&lt;h3 id="move例子">&lt;a href="#move%e4%be%8b%e5%ad%90" class="header-anchor">&lt;/a>move例子
&lt;/h3>&lt;p>先来一个简单的例子来看一下 &lt;code>move&lt;/code> 函数的魅力&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;utility&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;vector&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span>&lt;span style="color:#ff79c6">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span>&lt;span style="color:#ff79c6">class&lt;/span> &lt;span style="color:#50fa7b">MyClass&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span>&lt;span style="color:#ff79c6">public&lt;/span>&lt;span style="color:#ff79c6">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span> MyClass(&lt;span style="color:#8be9fd">int&lt;/span> value) &lt;span style="color:#ff79c6">:&lt;/span> value_(value) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;Constructing MyClass with value &amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> value_ &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span> MyClass(&lt;span style="color:#ff79c6">const&lt;/span> MyClass&lt;span style="color:#ff79c6">&amp;amp;&lt;/span> other) &lt;span style="color:#ff79c6">:&lt;/span> value_(other.value_) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;Copy constructing MyClass with value &amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> value_ &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span> MyClass(MyClass&lt;span style="color:#ff79c6">&amp;amp;&amp;amp;&lt;/span> other) &lt;span style="color:#ff79c6">noexcept&lt;/span> &lt;span style="color:#ff79c6">:&lt;/span> value_(other.value_) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span> other.value_ &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;Move constructing MyClass with value &amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> value_ &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20&lt;/span>&lt;span> MyClass&lt;span style="color:#ff79c6">&amp;amp;&lt;/span> &lt;span style="color:#ff79c6">operator&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>(&lt;span style="color:#ff79c6">const&lt;/span> MyClass&lt;span style="color:#ff79c6">&amp;amp;&lt;/span> other) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (&lt;span style="color:#ff79c6">this&lt;/span> &lt;span style="color:#ff79c6">!=&lt;/span> &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>other) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22&lt;/span>&lt;span> value_ &lt;span style="color:#ff79c6">=&lt;/span> other.value_;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;Copy assigning MyClass with value &amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> value_ &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>&lt;span style="color:#ff79c6">this&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28&lt;/span>&lt;span> MyClass&lt;span style="color:#ff79c6">&amp;amp;&lt;/span> &lt;span style="color:#ff79c6">operator&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>(MyClass&lt;span style="color:#ff79c6">&amp;amp;&amp;amp;&lt;/span> other) &lt;span style="color:#ff79c6">noexcept&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (&lt;span style="color:#ff79c6">this&lt;/span> &lt;span style="color:#ff79c6">!=&lt;/span> &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>other) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30&lt;/span>&lt;span> value_ &lt;span style="color:#ff79c6">=&lt;/span> other.value_;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31&lt;/span>&lt;span> other.value_ &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;Move assigning MyClass with value &amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> value_ &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>&lt;span style="color:#ff79c6">this&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">getValue&lt;/span>() &lt;span style="color:#ff79c6">const&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> value_;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41&lt;/span>&lt;span>&lt;span style="color:#ff79c6">private&lt;/span>&lt;span style="color:#ff79c6">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> value_;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43&lt;/span>&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">44&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">45&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">46&lt;/span>&lt;span> MyClass a(&lt;span style="color:#bd93f9">10&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">47&lt;/span>&lt;span> MyClass b &lt;span style="color:#ff79c6">=&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>move(a);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">48&lt;/span>&lt;span> MyClass c &lt;span style="color:#ff79c6">=&lt;/span> b;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">49&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">50&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout&lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;----------------------------&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span>std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">51&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">52&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;Value of a after move: &amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> a.getValue() &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">53&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;Value of b after move: &amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> b.getValue() &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">54&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">55&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout&lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;----------------------------&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span>std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">56&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>vector&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>MyClass&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> vec;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">57&lt;/span>&lt;span> vec.push_back(MyClass(&lt;span style="color:#bd93f9">20&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">58&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout&lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;----------------------------&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span>std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">59&lt;/span>&lt;span> vec.push_back(std&lt;span style="color:#ff79c6">::&lt;/span>move(b));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">60&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">61&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">62&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这段代码执行的结果&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>Constructing MyClass with value &lt;span style="color:#bd93f9">10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>Move constructing MyClass with value &lt;span style="color:#bd93f9">10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span>Copy constructing MyClass with value &lt;span style="color:#bd93f9">10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span>----------------------------
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span>Value of a after move: &lt;span style="color:#bd93f9">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span>Value of b after move: &lt;span style="color:#bd93f9">10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span>----------------------------
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span>Constructing MyClass with value &lt;span style="color:#bd93f9">20&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span>Move constructing MyClass with value &lt;span style="color:#bd93f9">20&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span>----------------------------
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span>Move constructing MyClass with value &lt;span style="color:#bd93f9">10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span>Move constructing MyClass with value &lt;span style="color:#bd93f9">20&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过代码执行的结果可以看到，&lt;/p>
&lt;p>在代码 &lt;code>MyClass a(10);&lt;/code> 中，初始化变量 &lt;code>a&lt;/code> 调用了构造函数。&lt;/p>
&lt;p>在代码 &lt;code>MyClass b = std::move(a);&lt;/code> 中，初始化变量 &lt;code>b&lt;/code> 调用了移动构造函数。&lt;/p>
&lt;p>在代码 &lt;code>MyClass c = b;&lt;/code> 中，初始化变量 &lt;code>c&lt;/code> 调用了拷贝构造函数。&lt;/p>
&lt;p>在代码 &lt;code>vec.push_back(MyClass(20));&lt;/code> 中，对应的两行输出&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>Constructing MyClass with value &lt;span style="color:#bd93f9">20&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span>Move constructing MyClass with value &lt;span style="color:#bd93f9">20&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>&lt;code>MyClass(20)&lt;/code> 构造一个临时对象&lt;/li>
&lt;li>调用移动构造函数，这个临时对象传入到 &lt;code>vec&lt;/code> 中&lt;/li>
&lt;/ol>
&lt;p>在代码 &lt;code>vec.push_back(std::move(b));&lt;/code>中，对应的一行输出&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>Move constructing MyClass with value &lt;span style="color:#bd93f9">10&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>因为是使用的 &lt;code>std::move&lt;/code> 函数，所以直接通过移动构造函数把值放到 &lt;code>vec&lt;/code> 中&lt;/p>
&lt;p>最后一行 &lt;code>Move constructing MyClass with value 20&lt;/code> 输出是因为在 &lt;code>vec.push_back(std::move(b));&lt;/code>时，&lt;code>vec&lt;/code> 发生了扩容，&lt;code>MyClass(20)&lt;/code> 这个对象发生了一次移动。&lt;/p>
&lt;p>看到这里，大概能对 &lt;code>move&lt;/code> 函数有大概的了解了。可能也会产生一个疑问，为什么要使用&lt;code>move&lt;/code> 函数呢？&lt;/p>
&lt;p>首先我们要明确一个点，在C++中，变量的赋值默认都是拷贝行为。所谓的引用传递参数，不过是编译器实现的一种指针，本质是对内存地址的一次拷贝。&lt;/p>
&lt;p>拷贝会带来什么问题呢？其中一个问题就是，在传递大的对象时，需要把对象的成员变量都复制一次。上面例子中的 &lt;code>MyClass&lt;/code> 中只有一个 &lt;code>int value_&lt;/code> 类型的成员变量开销比较小，如果成员变量很多，而且类型复杂，那每次传递变量都复制一次，这个开销就不能忽视了。&lt;/p>
&lt;h3 id="move分析">&lt;a href="#move%e5%88%86%e6%9e%90" class="header-anchor">&lt;/a>move分析
&lt;/h3>&lt;p>回到 &lt;code>move&lt;/code> 函数，移动语义允许将资源的 &lt;strong>所有权&lt;/strong> 从一个对象转移到另一个对象，而无需深拷贝。&lt;/p>
&lt;p>看到这里，是否好奇 &lt;code>move&lt;/code> 函数为什么有如此魔力，是怎样实现的呢&lt;/p>
&lt;p>下面就是 &lt;code>move&lt;/code> 函数的常见实现方式&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">template&lt;/span>&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>&lt;span style="color:#ff79c6">typename&lt;/span> T&lt;span style="color:#ff79c6">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span>&lt;span style="color:#ff79c6">typename&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>remove_reference&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>T&lt;span style="color:#ff79c6">&amp;gt;::&lt;/span>type&lt;span style="color:#ff79c6">&amp;amp;&amp;amp;&lt;/span> move(T&lt;span style="color:#ff79c6">&amp;amp;&amp;amp;&lt;/span> t) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#ff79c6">static_cast&lt;/span>&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>&lt;span style="color:#ff79c6">typename&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>remove_reference&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>T&lt;span style="color:#ff79c6">&amp;gt;::&lt;/span>type&lt;span style="color:#ff79c6">&amp;amp;&amp;amp;&amp;gt;&lt;/span>(t);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>看着挺复杂的，可以将这段代码简化一下，简化后大概就是这个样子&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">template&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&lt;/span>&lt;span style="color:#ff79c6">typename&lt;/span> T&lt;span style="color:#ff79c6">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span>T &lt;span style="color:#ff79c6">&amp;amp;&amp;amp;&lt;/span>move(T &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>t) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#ff79c6">static_cast&lt;/span>&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>T &lt;span style="color:#ff79c6">&amp;amp;&amp;amp;&amp;gt;&lt;/span>(t);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样看下来，&lt;code>move&lt;/code> 函数其实就做了一件事 &lt;strong>接受一个通用引用(T&amp;amp;&amp;amp;)，然后通过 static_cast 将其转换为右值引用&lt;/strong>&lt;/p>
&lt;p>&lt;code>move&lt;/code> 的本意是提前让一个对象“将亡”，然后把控制权“移交”给右值引用，所以才叫&lt;code>move&lt;/code>，也就是“移动语义”。但是，C++并不能真正让一个对象提前“亡”，所以这里的“移动”仅仅是“语义”上的，并不是实际的。只是告诉编译器，这个对象我不需要了，可以绑定到右值引用上了。&lt;/p>
&lt;p>有个点需要注意一下，移动构造函数需要加上 &lt;code>noexcept&lt;/code> 虽然不加也能正常执行，但是在使用容器等 STL 库时，如果对象的 移动构造函数没有 声明为 &lt;code>noexcept&lt;/code> 可能会导致不会使用移动构造，而是使用拷贝构造。&lt;/p>
&lt;p>再讨论一下上文中提到的 &lt;strong>所有权&lt;/strong>，这个概念我最早是从 &lt;strong>rust&lt;/strong> 中了解到的，后来在C++中，使用 &lt;code>std::unique_ptr&lt;/code> 智能指针的时候，逐渐对所有权这个概念有了一些理解。&lt;/p>
&lt;p>书接上面的例子&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">func1&lt;/span>(std&lt;span style="color:#ff79c6">::&lt;/span>unique_ptr&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>MyClass&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> ptr)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">func2&lt;/span>(std&lt;span style="color:#ff79c6">::&lt;/span>unique_ptr&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>MyClass&lt;span style="color:#ff79c6">&amp;gt;&amp;amp;&lt;/span> ptr)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>unique_ptr&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>MyClass&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> ptr1 &lt;span style="color:#ff79c6">=&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>make_unique&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>MyClass&lt;span style="color:#ff79c6">&amp;gt;&lt;/span>(&lt;span style="color:#bd93f9">30&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> ptr2 &lt;span style="color:#ff79c6">=&lt;/span> ptr1; &lt;span style="color:#6272a4">//编译报错
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> func1(ptr1); &lt;span style="color:#6272a4">//编译报错
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> ptr3 &lt;span style="color:#ff79c6">=&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>move(ptr1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span> func2(ptr3);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span> func1(std&lt;span style="color:#ff79c6">::&lt;/span>move(ptr2));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>ptr1&lt;/code> 这个智能指针拥有该对象的所有权，如果尝试将这个指针复制给 &lt;code>ptr2&lt;/code> 这个指针那么编译器会报错，因为 &lt;code>std::unique_ptr&lt;/code> 类型的指针只允许一个指针对象持有 &lt;code>MyClass&lt;/code> 这个对象的所有权。复制行为是将所有权共享，所以会提示错误。&lt;/p>
&lt;p>能做到只能是将所有权转移，也就是 &lt;code>ptr1&lt;/code> 指针放弃所有权，将所有权交给 &lt;code>ptr3&lt;/code> 这个指针。同样的，在作为函数的参数传递时，也是同样的道理，作为 &lt;code>func1&lt;/code> 函数的参数时，只能使用 &lt;code>move&lt;/code>，将所有权转移。&lt;/p>
&lt;p>还有一种方式，&lt;strong>借&lt;/strong>，在函数 &lt;code>func2&lt;/code> 中，可以使用引用的方式，将所有权暂时 &lt;strong>‘借’&lt;/strong> 给 &lt;code>func2&lt;/code> 中的变量使用，但是所有权还在原来的所有者那里。&lt;/p>
&lt;h3 id="move函数的优先级">&lt;a href="#move%e5%87%bd%e6%95%b0%e7%9a%84%e4%bc%98%e5%85%88%e7%ba%a7" class="header-anchor">&lt;/a>move函数的优先级
&lt;/h3>&lt;p>如果一个 class 实现了 移动构造函数，在赋值时，是否一定会使用 &lt;code>move&lt;/code> 呢？答案是不一定，是否优先使用移动构造函数取决于具体的情境。&lt;/p>
&lt;p>先来看一下 &lt;strong>拷贝构造函数&lt;/strong> 和 &lt;strong>移动构造函数&lt;/strong> 的签名&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>MyClass(&lt;span style="color:#ff79c6">const&lt;/span> MyClass&lt;span style="color:#ff79c6">&amp;amp;&lt;/span> other);&lt;span style="color:#6272a4">//拷贝构造
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>MyClass(MyClass&lt;span style="color:#ff79c6">&amp;amp;&amp;amp;&lt;/span> other) &lt;span style="color:#ff79c6">noexcept&lt;/span>;&lt;span style="color:#6272a4">//移动构造
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到，移动构造函数的参数类型是 &lt;strong>右值引用&lt;/strong>。&lt;/p>
&lt;p>也就是说，优先级规则是这样的&lt;/p>
&lt;ul>
&lt;li>如果实参是 &lt;strong>左值&lt;/strong>，编译器会调用拷贝构造函数&lt;/li>
&lt;li>如果实参是 &lt;strong>右值&lt;/strong>，并且存在移动构造函数，编译器会优先调用移动构造函数&lt;/li>
&lt;/ul>
&lt;p>但这里的关键是：&lt;strong>复制&lt;/strong> 这个行为是否涉及右值。如果代码没有显式地将对象标记为右值（比如使用 std::move），即使有移动构造函数，也不会被调用。&lt;/p>
&lt;h3 id="使用move注意事项">&lt;a href="#%e4%bd%bf%e7%94%a8move%e6%b3%a8%e6%84%8f%e4%ba%8b%e9%a1%b9" class="header-anchor">&lt;/a>使用move注意事项
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>移动后对象的状态：调用 &lt;code>std::move&lt;/code> 后，源对象并没有被销毁，但它处于一个“有效但未指定”的状态（valid but unspecified state）。比如对于 &lt;code>std::string&lt;/code>，它可能变为空字符串，但具体取决于类的实现。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>不保证移动：&lt;code>std::move&lt;/code> 只是请求移动，能否真正移动取决于目标类型是否实现了移动构造函数或移动赋值运算符。如果没有，编译器会回退到拷贝。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>不要滥用：只有当你确定某个对象不再需要时，才应该使用 &lt;code>std::move&lt;/code>。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="forward">&lt;a href="#forward" class="header-anchor">&lt;/a>forward
&lt;/h2>&lt;p>说完了 &lt;code>std::move&lt;/code> 那就不得不提 &lt;code>std::forward&lt;/code> 了。&lt;code>forward&lt;/code>也叫 &lt;strong>完美转发&lt;/strong>&lt;/p>
&lt;p>和 &lt;code>move&lt;/code> 不同的地方，&lt;code>forward&lt;/code> 常用在模板编程中，以确保参数能够按照原始值类别（左值或右值）传递给下一个函数，而不会丢失其属性。在模板编程中，一般都是希望将参数传递给另一个函数时，保留参数的原始值类型。
但是 &lt;code>std::move&lt;/code> 总是将对象无条件转换为右值，而 &lt;code>std::forward&lt;/code> 则根据参数的原始类型有条件地进行转发。&lt;/p>
&lt;ul>
&lt;li>如果传入的是 &lt;strong>左值&lt;/strong>，则以左值的形式转发。&lt;/li>
&lt;li>如果传入的是 &lt;strong>右值&lt;/strong>，则以右值的形式转发。&lt;/li>
&lt;/ul>
&lt;h3 id="forward例子">&lt;a href="#forward%e4%be%8b%e5%ad%90" class="header-anchor">&lt;/a>forward例子
&lt;/h3>&lt;p>通过一个简单的例子看一下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>&lt;span style="color:#ff79c6">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">process&lt;/span>(&lt;span style="color:#8be9fd">int&lt;/span>&lt;span style="color:#ff79c6">&amp;amp;&lt;/span> x) { std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;Lvalue: &amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> x &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>&lt;span style="color:#f1fa8c">\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">process&lt;/span>(&lt;span style="color:#8be9fd">int&lt;/span>&lt;span style="color:#ff79c6">&amp;amp;&amp;amp;&lt;/span> x) { std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;Rvalue: &amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> x &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>&lt;span style="color:#f1fa8c">\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span>&lt;span style="color:#ff79c6">template&lt;/span>&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>&lt;span style="color:#ff79c6">typename&lt;/span> T&lt;span style="color:#ff79c6">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> forwarder(T&lt;span style="color:#ff79c6">&amp;amp;&amp;amp;&lt;/span> arg) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span> process(arg); &lt;span style="color:#6272a4">// 直接传递 arg
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> a &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">42&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span> forwarder(a); &lt;span style="color:#6272a4">// 传入左值
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> forwarder(&lt;span style="color:#bd93f9">100&lt;/span>); &lt;span style="color:#6272a4">// 传入右值
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行结果:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>Lvalue: &lt;span style="color:#bd93f9">42&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span>Lvalue: &lt;span style="color:#bd93f9">100&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>a&lt;/code> 是左值，转发为左值，调用 &lt;code>process(int&amp;amp;)&lt;/code>&lt;/li>
&lt;li>&lt;code>100&lt;/code> 是右值，转发为右值，调用 &lt;code>process(int&amp;amp;&amp;amp;)&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>&lt;code>process&lt;/code> 函数有两个重载，分别是 &lt;strong>左值引用&lt;/strong> 和 &lt;strong>右值引用&lt;/strong>，&lt;code>forwarder&lt;/code> 函数可以根据不同的类型调用不同的 &lt;code>process&lt;/code>，也就实现了 &lt;strong>转发&lt;/strong>&lt;/p>
&lt;h3 id="实现原理">&lt;a href="#%e5%ae%9e%e7%8e%b0%e5%8e%9f%e7%90%86" class="header-anchor">&lt;/a>实现原理
&lt;/h3>&lt;p>&lt;code>std::forward&lt;/code> 的实现依赖于 &lt;a class="link" href="https://lqxhub.github.io/posts/567e834f/#%e5%bc%95%e7%94%a8%e6%8a%98%e5%8f%a0" >引用折叠&lt;/a>和类型推导，下面是 &lt;code>forward&lt;/code> 函数实现&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">template&lt;/span>&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>&lt;span style="color:#ff79c6">typename&lt;/span> T&lt;span style="color:#ff79c6">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span>T&lt;span style="color:#ff79c6">&amp;amp;&amp;amp;&lt;/span> forward(&lt;span style="color:#ff79c6">typename&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>remove_reference&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>T&lt;span style="color:#ff79c6">&amp;gt;::&lt;/span>type&lt;span style="color:#ff79c6">&amp;amp;&lt;/span> arg) &lt;span style="color:#ff79c6">noexcept&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#ff79c6">static_cast&lt;/span>&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>T&lt;span style="color:#ff79c6">&amp;amp;&amp;amp;&amp;gt;&lt;/span>(arg);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6&lt;/span>&lt;span>&lt;span style="color:#ff79c6">template&lt;/span>&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>&lt;span style="color:#ff79c6">typename&lt;/span> T&lt;span style="color:#ff79c6">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7&lt;/span>&lt;span>T&lt;span style="color:#ff79c6">&amp;amp;&amp;amp;&lt;/span> forward(&lt;span style="color:#ff79c6">typename&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>remove_reference&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>T&lt;span style="color:#ff79c6">&amp;gt;::&lt;/span>type&lt;span style="color:#ff79c6">&amp;amp;&amp;amp;&lt;/span> arg) &lt;span style="color:#ff79c6">noexcept&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#ff79c6">static_cast&lt;/span>&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>T&lt;span style="color:#ff79c6">&amp;amp;&amp;amp;&amp;gt;&lt;/span>(arg);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">9&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>传入左值时，&lt;code>T&lt;/code> 推导为 &lt;code>Type&amp;amp;&lt;/code>，&lt;code>T&amp;amp;&amp;amp;&lt;/code> 折叠为左值引用&lt;/li>
&lt;li>传入右值时，&lt;code>T&lt;/code> 推导为 &lt;code>Type&lt;/code>，&lt;code>T&amp;amp;&amp;amp;&lt;/code> 保持为右值引用&lt;/li>
&lt;/ul>
&lt;p>&lt;code>std::forward&lt;/code> 与 &lt;code>std::move&lt;/code> 相比，它更 &lt;strong>智能&lt;/strong>，适用于需要动态适配参数类型的场景。一般用在模板编程中，确保参数在传递过程中保留原始的 &lt;strong>左值&lt;/strong> / &lt;strong>右值属性&lt;/strong>，避免不必要的拷贝。&lt;/p>
&lt;h2 id="rvo">&lt;a href="#rvo" class="header-anchor">&lt;/a>RVO
&lt;/h2>&lt;p>&lt;strong>RVO&lt;/strong>（Return Value Optimization，返回值优化，是C++编译器的一种优化技术，用于减少函数返回大对象时的拷贝开销。在没有 &lt;strong>RVO&lt;/strong> 的情况下，函数返回一个对象时，会调用拷贝构造函数或移动构造函数来构造返回值对象。&lt;strong>RVO&lt;/strong> 的目标是直接在调用者的内存空间中构造返回对象，从而避免额外的拷贝或移动。&lt;/p>
&lt;p>RVO 有两种形式&lt;/p>
&lt;ul>
&lt;li>&lt;strong>NRVO&lt;/strong>（Named Return Value Optimization）：针对命名的局部变量&lt;/li>
&lt;li>&lt;strong>URVO&lt;/strong>（Unnamed Return Value Optimization）：针对临时对象（未命名的对象）&lt;/li>
&lt;/ul>
&lt;h3 id="rvo例子">&lt;a href="#rvo%e4%be%8b%e5%ad%90" class="header-anchor">&lt;/a>RVO例子
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>&lt;span style="color:#ff79c6">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span>&lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">MyClass&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span> MyClass() { std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;Constructor&lt;/span>&lt;span style="color:#f1fa8c">\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span> MyClass(&lt;span style="color:#ff79c6">const&lt;/span> MyClass&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>) { std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;Copy constructor&lt;/span>&lt;span style="color:#f1fa8c">\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span> MyClass(MyClass&lt;span style="color:#ff79c6">&amp;amp;&amp;amp;&lt;/span>) &lt;span style="color:#ff79c6">noexcept&lt;/span> { std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;Move constructor&lt;/span>&lt;span style="color:#f1fa8c">\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span> &lt;span style="color:#ff79c6">~&lt;/span>MyClass() { std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;Destructor&lt;/span>&lt;span style="color:#f1fa8c">\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span>MyClass &lt;span style="color:#50fa7b">create&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span> MyClass obj;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> obj; &lt;span style="color:#6272a4">// 返回局部对象
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span> MyClass a &lt;span style="color:#ff79c6">=&lt;/span> create();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>现在的编译器默认都会开启 &lt;strong>RVO&lt;/strong> 优化，所以需要手动禁用，在clang中，可以在命令行中添加 &lt;code>-fno-elide-constructors&lt;/code> 来禁用。&lt;/p>
&lt;p>使用 &lt;code>clang++ -fno-elide-constructors -o main main.cpp&lt;/code> 命令来编译，然后执行 &lt;code>main&lt;/code>，输出如下&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>Constructor
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span>Move constructor
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3&lt;/span>&lt;span>Destructor
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4&lt;/span>&lt;span>Destructor
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到在 &lt;code>return obj&lt;/code> 时，因为没有使用 &lt;strong>RVO&lt;/strong> 优化，所以复制了一次对象，但是因为有移动构造函数，所以使用了 &lt;code>move&lt;/code> 优化。&lt;/p>
&lt;p>下面开启 &lt;strong>RVO&lt;/strong> 优化看一下&lt;/p>
&lt;p>使用 &lt;code>clang++ -o main main.cpp&lt;/code> 命令编译，然后执行 &lt;code>main&lt;/code> 输出如下&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>Constructor
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span>Destructor
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到只调用了构造函数。&lt;/p>
&lt;h3 id="工作原理">&lt;a href="#%e5%b7%a5%e4%bd%9c%e5%8e%9f%e7%90%86" class="header-anchor">&lt;/a>工作原理
&lt;/h3>&lt;p>&lt;a class="link" href="https://godbolt.org/" target="_blank" rel="noopener"
>在线汇编&lt;/a> 使用这个工具，可以看到具体的汇编代码&lt;/p>
&lt;p>下面是是让GPT加了注释的汇编代码&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-asm" data-lang="asm">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#50fa7b">create&lt;/span>(): &lt;span style="color:#6272a4">; create() 函数定义开始
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#50fa7b">push&lt;/span> rbp &lt;span style="color:#6272a4">; 保存当前栈帧基址指针
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#50fa7b">mov&lt;/span> rbp, rsp &lt;span style="color:#6272a4">; 建立新的栈帧，将栈指针值赋给基址指针
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#50fa7b">sub&lt;/span> rsp, &lt;span style="color:#bd93f9">16&lt;/span> &lt;span style="color:#6272a4">; 分配16字节的栈空间用于局部变量
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#50fa7b">mov&lt;/span> QWORD PTR [rbp-8], rdi &lt;span style="color:#6272a4">; 保存第一个参数(rdi)到栈上[rbp-8]位置，这是对象指针
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#50fa7b">mov&lt;/span> rax, QWORD PTR [rbp-8] &lt;span style="color:#6272a4">; 将对象指针加载到rax寄存器
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#50fa7b">mov&lt;/span> rdi, rax &lt;span style="color:#6272a4">; 将对象指针作为第一个参数(rdi)传递给构造函数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#50fa7b">call&lt;/span> MyClass::MyClass() [complete object constructor] &lt;span style="color:#6272a4">; 调用MyClass的构造函数初始化对象
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#50fa7b">mov&lt;/span> rax, QWORD PTR [rbp-8] &lt;span style="color:#6272a4">; 将对象指针重新加载到rax作为函数返回值
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#50fa7b">leave&lt;/span> &lt;span style="color:#6272a4">; 恢复栈帧（相当于mov rsp, rbp; pop rbp）
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#50fa7b">ret&lt;/span> &lt;span style="color:#6272a4">; 从函数返回，返回值在rax中
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">main:&lt;/span> &lt;span style="color:#6272a4">; main函数定义开始
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#50fa7b">push&lt;/span> rbp &lt;span style="color:#6272a4">; 保存当前栈帧基址指针
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#50fa7b">mov&lt;/span> rbp, rsp &lt;span style="color:#6272a4">; 建立新的栈帧
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#50fa7b">push&lt;/span> rbx &lt;span style="color:#6272a4">; 保存rbx寄存器的值(调用者保存的寄存器)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#50fa7b">sub&lt;/span> rsp, &lt;span style="color:#bd93f9">24&lt;/span> &lt;span style="color:#6272a4">; 分配24字节的栈空间
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#50fa7b">lea&lt;/span> rax, [rbp-17] &lt;span style="color:#6272a4">; 将栈上地址[rbp-17]加载到rax，这是为MyClass对象分配的空间
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#50fa7b">mov&lt;/span> rdi, rax &lt;span style="color:#6272a4">; 将对象地址作为参数传递给create函数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#50fa7b">call&lt;/span> create() &lt;span style="color:#6272a4">; 调用create函数，初始化对象
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#50fa7b">mov&lt;/span> ebx, &lt;span style="color:#bd93f9">0&lt;/span> &lt;span style="color:#6272a4">; 将返回值0存储到ebx寄存器
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#50fa7b">lea&lt;/span> rax, [rbp-17] &lt;span style="color:#6272a4">; 重新加载对象地址到rax
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#50fa7b">mov&lt;/span> rdi, rax &lt;span style="color:#6272a4">; 将对象地址作为参数传递给析构函数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#50fa7b">call&lt;/span> MyClass::~MyClass() [complete object destructor] &lt;span style="color:#6272a4">; 调用MyClass的析构函数清理对象
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#50fa7b">mov&lt;/span> eax, ebx &lt;span style="color:#6272a4">; 将返回值(0)从ebx移动到eax作为main函数的返回值
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#50fa7b">mov&lt;/span> rbx, QWORD PTR [rbp-8] &lt;span style="color:#6272a4">; 恢复之前保存的rbx值
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#50fa7b">leave&lt;/span> &lt;span style="color:#6272a4">; 恢复栈帧
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#50fa7b">ret&lt;/span> &lt;span style="color:#6272a4">; 从main函数返回，返回值在eax中
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到开启 &lt;strong>ROV&lt;/strong> 优化后，确实是先在 &lt;code>main&lt;/code> 函数的栈空间 先初始化 &lt;code>MyClass&lt;/code> 的对象，所以可以避免在 return 时拷贝。&lt;/p>
&lt;p>&lt;strong>RVO&lt;/strong> 的核心思想是：编译器在生成代码时，识别出函数返回的对象可以直接在调用者的目标位置构造，而不是先在函数栈上构造然后拷贝或移动到调用者。&lt;/p>
&lt;p>在 C++17 之前，&lt;strong>RVO&lt;/strong> 是一种编译器可选的优化，程序员不能完全依赖它。从 C++17 开始，标准对某些情况下的返回值优化做了强制要求，称为 Mandatory Copy Elision（强制拷贝消除）。这意味着在特定场景下，即使禁用优化，编译器也必须消除拷贝或移动。&lt;/p>
&lt;h3 id="rvo-和-stdmove-的关系">&lt;a href="#rvo-%e5%92%8c-stdmove-%e7%9a%84%e5%85%b3%e7%b3%bb" class="header-anchor">&lt;/a>RVO 和 std::move 的关系
&lt;/h3>&lt;p>一般来说，使用了 &lt;strong>move&lt;/strong> 后就不会再使用 &lt;strong>RVO&lt;/strong> 了&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>MyClass &lt;span style="color:#50fa7b">create&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span> MyClass obj;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>move(obj); &lt;span style="color:#6272a4">// 显式移动
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>改一下上面的例子，开启 ROV优化看一下&lt;/p>
&lt;p>&lt;code>clang++ -O3 -o main main.cpp&lt;/code> 编译 执行 &lt;code>main&lt;/code>&lt;/p>
&lt;p>输出：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>Constructor
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span>Move constructor
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3&lt;/span>&lt;span>Destructor
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4&lt;/span>&lt;span>Destructor
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>所以，在编写现代C++代码时，在 &lt;strong>return&lt;/strong> 局部变量时没有必要使用 &lt;code>std::move&lt;/code>,使用了大概率会影响编译器优化，反而会适得其反，性能更差了。&lt;/p>
&lt;p>所以相信编译器，很多情况下，编译器会比人更 ‘聪明’。&lt;/p>
&lt;h2 id="总结">&lt;a href="#%e6%80%bb%e7%bb%93" class="header-anchor">&lt;/a>总结
&lt;/h2>&lt;ol>
&lt;li>&lt;code>std::move&lt;/code> 不会改变对象的内容(不会移动)，只是欺骗了编译器&lt;/li>
&lt;li>&lt;code>std::move&lt;/code> 只是请求移动，能否真正移动取决于目标类型是否实现了移动构造函数或移动赋值运算符。如果没有，编译器会回退到拷贝&lt;/li>
&lt;li>&lt;strong>左值&lt;/strong>：调用拷贝构造函数，&lt;strong>右值&lt;/strong>: 如果有移动构造函数，优先调用移动构造函数；否则回退到拷贝构造函数&lt;/li>
&lt;li>&lt;code>std::forward&lt;/code> 有条件地转发参数，保留其原始值类别（&lt;strong>左值&lt;/strong>或&lt;strong>右值&lt;/strong>）&lt;/li>
&lt;li>函数返回一个对象时，除非需要显示调用移动或者拷贝构造，否则不要使用 &lt;code>std::move&lt;/code>，而是使用编译器的 &lt;strong>RVO&lt;/strong> 优化&lt;/li>
&lt;/ol></description></item><item><title>C++变量生命周期，结左值引用和右值引用，引用折叠，这次就来浅谈一下C++中变量的生命周期 - QX's blog</title><link>https://lqxhub.github.io/posts/567e834f/</link><pubDate>Sun, 09 Mar 2025 18:01:29 +0800</pubDate><guid>https://lqxhub.github.io/posts/567e834f/</guid><description>&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/0677f36b25f64ef20bd9b0ff4317dee12d1c8c4e.jpg" alt="Featured image of post C++变量生命周期，结左值引用和右值引用，引用折叠，这次就来浅谈一下C++中变量的生命周期 - QX's blog" />&lt;p>在C++11及以后的版本中，可以将变量简单的分为左值，右值。其中右值又可以分为纯右值和将亡值。
不同类型的变量的生命周期与作用域也是有差别的，这次就来浅谈一下C++中变量的生命周期。&lt;/p>
&lt;p>事情的起因是最近在修一个C++的bug时，发现是因为变量的生命周期问题导致的，所以就来总结一下。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/arana-db/kiwi-cpp/pull/204" target="_blank" rel="noopener"
>提交的PR&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/arana-db/kiwi-cpp/pull/204/files#diff-e56b7c4d89acbd94e631feed9aaf7a2621967b3cb920a96e1c87e2a57779cc3bL65" target="_blank" rel="noopener"
>代码位置&lt;/a>&lt;/p>
&lt;h2 id="bug分析">&lt;a href="#bug%e5%88%86%e6%9e%90" class="header-anchor">&lt;/a>bug分析
&lt;/h2>&lt;p>有bug的代码如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>HashesMetaValue &lt;span style="color:#50fa7b">tmf_meta_value2&lt;/span>(DataType&lt;span style="color:#ff79c6">::&lt;/span>kHashes, std&lt;span style="color:#ff79c6">::&lt;/span>string(str, &lt;span style="color:#ff79c6">sizeof&lt;/span>(&lt;span style="color:#8be9fd">int32_t&lt;/span>)));
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">using&lt;/span> HashesMetaValue &lt;span style="color:#ff79c6">=&lt;/span> BaseMetaValue;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3&lt;/span>&lt;span>&lt;span style="color:#ff79c6">class&lt;/span> &lt;span style="color:#50fa7b">BaseMetaValue&lt;/span> &lt;span style="color:#ff79c6">:&lt;/span> &lt;span style="color:#ff79c6">public&lt;/span> InternalValue {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4&lt;/span>&lt;span> &lt;span style="color:#ff79c6">public&lt;/span>&lt;span style="color:#ff79c6">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5&lt;/span>&lt;span> &lt;span style="color:#ff79c6">explicit&lt;/span> BaseMetaValue(DataType type, &lt;span style="color:#ff79c6">const&lt;/span> Slice&lt;span style="color:#ff79c6">&amp;amp;&lt;/span> user_value) &lt;span style="color:#ff79c6">:&lt;/span> InternalValue(type, user_value) {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6&lt;/span>&lt;span> ...................
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7&lt;/span>&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到，&lt;code>BaseMetaValue&lt;/code>的构造函数接受的是&lt;code>const Slice&amp;amp;&lt;/code>类型的参数，
而&lt;code>std::string(str, sizeof(int32_t))&lt;/code>是一个临时变量，是一个右值(将亡值)，
所以这个临时变量的生命周期只在这一行代码中，当这一行代码执行完后，这个临时变量就会被销毁，
所以&lt;code>tmf_meta_value2&lt;/code>的&lt;code>user_value&lt;/code>就是一个悬空指针，所以在后面的代码中就会出现问题。&lt;/p>
&lt;p>&lt;code>Slice&lt;/code> 是一个类似于&lt;code>std::string_view&lt;/code>的类，&lt;code>Slice&lt;/code>不拥有数据，只是一个指向数据的指针。所以必须由调用者保证数据的生命周期。&lt;/p>
&lt;p>解决方法也很简单，将&lt;code>BaseMetaValue&lt;/code>的构造函数改为接受&lt;code>std::string&lt;/code>类型的参数即可。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">auto&lt;/span> key &lt;span style="color:#ff79c6">=&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>string(str, &lt;span style="color:#ff79c6">sizeof&lt;/span>(&lt;span style="color:#8be9fd">int32_t&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span>HashesMetaValue &lt;span style="color:#50fa7b">tmf_meta_value1&lt;/span>(DataType&lt;span style="color:#ff79c6">::&lt;/span>kHashes, key);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样&lt;code>key&lt;/code>就是一个左值，生命周期会持续到&lt;code>tmf_meta_value1&lt;/code>的生命周期结束。所以就不会出现悬空指针的问题了。&lt;/p>
&lt;p>C++中没有严格限制变量的生命周期，我没有系统的学习过rust，但是了解过rust的一些概念，rust中有严格的生命周期检查，这样就可以避免很多悬空指针的问题，
上述的bug在rust中是不会出现的。因为rust中有严格的变量所有权的，生命周期检查。 &lt;strong>所有权&lt;/strong> 这个概念在rust中是非常重要，我觉得这个概念在C++中也是很重要的，
想要写出高质量的代码，就需要了解这所有权这个概念。&lt;/p>
&lt;h2 id="左值右值">&lt;a href="#%e5%b7%a6%e5%80%bc%e5%8f%b3%e5%80%bc" class="header-anchor">&lt;/a>左值、右值
&lt;/h2>&lt;h3 id="左值">&lt;a href="#%e5%b7%a6%e5%80%bc" class="header-anchor">&lt;/a>左值
&lt;/h3>&lt;p>最简单的一个例子就是变量，变量是一个左值，它有一个内存地址，可以取地址，可以修改。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> a &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">10&lt;/span>; &lt;span style="color:#6272a4">// a 是左值
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>&lt;span style="color:#8be9fd">int&lt;/span>&lt;span style="color:#ff79c6">*&lt;/span> p &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>a; &lt;span style="color:#6272a4">// 可以取 a 的地址
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>a &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">20&lt;/span>; &lt;span style="color:#6272a4">// a 可以被赋值
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="右值">&lt;a href="#%e5%8f%b3%e5%80%bc" class="header-anchor">&lt;/a>右值
&lt;/h3>&lt;p>右值是指不能取地址的临时对象或值，通常是短暂存在的（ephemeral），无法出现在赋值语句的左侧。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> b &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">5&lt;/span> &lt;span style="color:#ff79c6">+&lt;/span> &lt;span style="color:#bd93f9">3&lt;/span>; &lt;span style="color:#6272a4">// 5 + 3 是右值（纯右值）
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中右值又可以分为纯右值和将亡值。&lt;/p>
&lt;h4 id="纯右值">&lt;a href="#%e7%ba%af%e5%8f%b3%e5%80%bc" class="header-anchor">&lt;/a>纯右值
&lt;/h4>&lt;p>特性：没有身份，无法取地址，无法被赋值&lt;/p>
&lt;p>常见的 &lt;strong>字面量&lt;/strong>、&lt;strong>临时对象&lt;/strong>、&lt;strong>函数返回值&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#bd93f9">42&lt;/span>; &lt;span style="color:#6272a4">// 字面量是纯右值
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>&lt;span style="color:#bd93f9">5&lt;/span> &lt;span style="color:#ff79c6">+&lt;/span> &lt;span style="color:#bd93f9">3&lt;/span>; &lt;span style="color:#6272a4">// 计算结果是纯右值
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>std&lt;span style="color:#ff79c6">::&lt;/span>string(&lt;span style="color:#f1fa8c">&amp;#34;hello&amp;#34;&lt;/span>); &lt;span style="color:#6272a4">// 构造函数返回的临时对象是纯右值
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="将亡值">&lt;a href="#%e5%b0%86%e4%ba%a1%e5%80%bc" class="header-anchor">&lt;/a>将亡值
&lt;/h4>&lt;p>将亡值是“即将消亡的值”，通常是通过右值引用绑定到的临时对象，或者被显式移动（move）的对象。&lt;/p>
&lt;p>特性：有身份（可以取地址），但生命周期即将结束&lt;/p>
&lt;p>通常出现在使用 &lt;code>std::move&lt;/code> 或函数返回右值引用的场景&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;utility&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span>&lt;span style="color:#ff79c6">&lt;/span>&lt;span style="color:#8be9fd">int&lt;/span>&lt;span style="color:#ff79c6">&amp;amp;&amp;amp;&lt;/span> getRvalue() { &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">42&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> a &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">10&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span>&lt;span style="color:#ff79c6">&amp;amp;&amp;amp;&lt;/span> r1 &lt;span style="color:#ff79c6">=&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>move(a); &lt;span style="color:#6272a4">// std::move(a) 是将亡值
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#8be9fd">int&lt;/span>&lt;span style="color:#ff79c6">&amp;amp;&amp;amp;&lt;/span> r2 &lt;span style="color:#ff79c6">=&lt;/span> getRvalue(); &lt;span style="color:#6272a4">// getRvalue() 返回的临时对象是将亡值
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="变量的生命周期">&lt;a href="#%e5%8f%98%e9%87%8f%e7%9a%84%e7%94%9f%e5%91%bd%e5%91%a8%e6%9c%9f" class="header-anchor">&lt;/a>变量的生命周期
&lt;/h2>&lt;h3 id="左值-1">&lt;a href="#%e5%b7%a6%e5%80%bc-1" class="header-anchor">&lt;/a>左值
&lt;/h3>&lt;p>左值的生命周期由存储期决定，通常是持久的，可以控制。比如局部变量，离开作用域后会被销毁。
动态分配的内存也是左值，需要手动释放。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">example&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> a &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">10&lt;/span>; &lt;span style="color:#6272a4">// 左值 a，自动存储期，离开作用域销毁
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#ff79c6">static&lt;/span> &lt;span style="color:#8be9fd">int&lt;/span> b &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">20&lt;/span>; &lt;span style="color:#6272a4">// 左值 b，静态存储期，程序结束销毁
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#8be9fd">int&lt;/span>&lt;span style="color:#ff79c6">*&lt;/span> p &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">new&lt;/span> &lt;span style="color:#8be9fd">int&lt;/span>(&lt;span style="color:#bd93f9">30&lt;/span>); &lt;span style="color:#6272a4">// 左值 *p，动态存储期，直到 delete
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#ff79c6">delete&lt;/span> p;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>a&lt;/code> 的生命周期从定义到函数结束。&lt;/li>
&lt;li>&lt;code>b&lt;/code> 的生命周期贯穿整个程序。&lt;/li>
&lt;li>&lt;code>p&lt;/code> 的生命周期从 &lt;code>new&lt;/code> 到 &lt;code>delete&lt;/code>。&lt;/li>
&lt;/ul>
&lt;h3 id="右值-1">&lt;a href="#%e5%8f%b3%e5%80%bc-1" class="header-anchor">&lt;/a>右值
&lt;/h3>&lt;ul>
&lt;li>纯右值：生命周期短暂，表达式结束后销毁，一旦表达式求值完成，纯右值要么被销毁，要么被用于初始化其他对象&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span> &lt;span style="color:#bd93f9">5&lt;/span> &lt;span style="color:#ff79c6">+&lt;/span> &lt;span style="color:#bd93f9">3&lt;/span>; &lt;span style="color:#6272a4">// 纯右值，表达式结束后销毁
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>string s &lt;span style="color:#ff79c6">=&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>string(&lt;span style="color:#f1fa8c">&amp;#34;hello&amp;#34;&lt;/span>); &lt;span style="color:#6272a4">// 临时对象是纯右值，构造 s 后销毁
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#ff79c6">const&lt;/span> &lt;span style="color:#8be9fd">int&lt;/span>&lt;span style="color:#ff79c6">&amp;amp;&lt;/span> ref &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">42&lt;/span>; &lt;span style="color:#6272a4">// 纯右值 42 的生命周期延长到 ref 的作用域结束
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>将亡值：生命周期取决于底层对象，通常是短暂的，或者可以被转移，可以通过右值引用绑定延长生命周期&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>std&lt;span style="color:#ff79c6">::&lt;/span>string&lt;span style="color:#ff79c6">&amp;amp;&amp;amp;&lt;/span> rvalue &lt;span style="color:#ff79c6">=&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>move(str); &lt;span style="color:#6272a4">// str 是将亡值，通过 std::move 转为右值引用，延长生命周期
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="声明周期的延长">&lt;a href="#%e5%a3%b0%e6%98%8e%e5%91%a8%e6%9c%9f%e7%9a%84%e5%bb%b6%e9%95%bf" class="header-anchor">&lt;/a>声明周期的延长
&lt;/h3>&lt;ul>
&lt;li>绑定到常量左值引用 &lt;code>const &amp;amp;&lt;/code>
当纯右值绑定到 &lt;code>const T&amp;amp;&lt;/code> 时，临时对象的生命周期延长到引用的作用域结束。
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">const&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>string&lt;span style="color:#ff79c6">&amp;amp;&lt;/span> str &lt;span style="color:#ff79c6">=&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>string(&lt;span style="color:#f1fa8c">&amp;#34;temp&amp;#34;&lt;/span>); &lt;span style="color:#6272a4">// str 有效直到作用域结束
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>绑定到右值引用&lt;code>&amp;amp;&amp;amp;&lt;/code>
当右值（纯右值或将亡值）绑定到 &lt;code>T&amp;amp;&amp;amp;&lt;/code> 时，临时对象的生命周期延长到右值引用的作用域结束。
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>std&lt;span style="color:#ff79c6">::&lt;/span>string&lt;span style="color:#ff79c6">&amp;amp;&amp;amp;&lt;/span> str &lt;span style="color:#ff79c6">=&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>string(&lt;span style="color:#f1fa8c">&amp;#34;temp&amp;#34;&lt;/span>); &lt;span style="color:#6272a4">// str 有效直到作用域结束
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>值类别&lt;/th>
&lt;th>生命周期特点&lt;/th>
&lt;th>是否可延长生命周期&lt;/th>
&lt;th>示例场景&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>左值 (lvalue)&lt;/td>
&lt;td>由存储期决定，持久且可控&lt;/td>
&lt;td>不需要延长，本身持久&lt;/td>
&lt;td>局部变量、全局变量&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>纯右值 (prvalue)&lt;/td>
&lt;td>临时，表达式结束后销毁&lt;/td>
&lt;td>可通过 const &amp;amp; 延长&lt;/td>
&lt;td>字面量、临时对象&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>将亡值 (xvalue)&lt;/td>
&lt;td>取决于底层对象，通常短暂或可转移&lt;/td>
&lt;td>可通过 &amp;amp;&amp;amp; 绑定延长&lt;/td>
&lt;td>std::move、函数返回右值引用&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="左值引用右值引用">&lt;a href="#%e5%b7%a6%e5%80%bc%e5%bc%95%e7%94%a8%e5%8f%b3%e5%80%bc%e5%bc%95%e7%94%a8" class="header-anchor">&lt;/a>左值引用、右值引用
&lt;/h2>&lt;p>单纯的左值和右值其实还是好理解的，但是结合C++中的引用，就会有一些特殊的情况，比如右值引用绑定到左值，
右值引用绑定到右值等等，这些情况就需要我们去了解C++中的引用的特性。&lt;/p>
&lt;h3 id="左值引用">&lt;a href="#%e5%b7%a6%e5%80%bc%e5%bc%95%e7%94%a8" class="header-anchor">&lt;/a>左值引用
&lt;/h3>&lt;p>先来看一下最简单的左值引用，我的理解，左值引用可以理解为一个别名，它是一个左值，可以取地址，可以修改，可以看做是一种简化的指针。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> a &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">42&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span>&lt;span style="color:#ff79c6">&amp;amp;&lt;/span> ref &lt;span style="color:#ff79c6">=&lt;/span> a; &lt;span style="color:#6272a4">// 左值引用，绑定到左值
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>ref &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">100&lt;/span>; &lt;span style="color:#6272a4">// 修改ref实际上就是修改a
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>左值引用中，还有一个特殊的情况，就是 const 左值引用，它可以绑定到右值，但是不能修改。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">const&lt;/span> &lt;span style="color:#8be9fd">int&lt;/span>&lt;span style="color:#ff79c6">&amp;amp;&lt;/span> ref &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">42&lt;/span>; &lt;span style="color:#6272a4">// const 左值引用，绑定到右值
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>const&lt;/strong> 类型的左值引用，常用在函数的参数中，可以接受左值和右值。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">func&lt;/span>(&lt;span style="color:#ff79c6">const&lt;/span> &lt;span style="color:#8be9fd">int&lt;/span>&lt;span style="color:#ff79c6">&amp;amp;&lt;/span> ref) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span> &lt;span style="color:#6272a4">// ref 可以绑定到左值或右值
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> a &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">42&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7&lt;/span>&lt;span> func(a); &lt;span style="color:#6272a4">// a 是左值
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> func(&lt;span style="color:#bd93f9">42&lt;/span>); &lt;span style="color:#6272a4">// 42 是右值
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">9&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>为什么 &lt;strong>const&lt;/strong> 左值引用可以绑定到右值呢？因为右值是临时的，不会被修改，const修饰的变量是不可以修改的，
所以可以绑定到const左值引用。&lt;/p>
&lt;h3 id="右值引用">&lt;a href="#%e5%8f%b3%e5%80%bc%e5%bc%95%e7%94%a8" class="header-anchor">&lt;/a>右值引用
&lt;/h3>&lt;p>右值引用是C++11引入的新特性，它是一个新的引用类型，用于绑定到右值。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span>&lt;span style="color:#ff79c6">&amp;amp;&amp;amp;&lt;/span> rref &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">100&lt;/span>; &lt;span style="color:#6272a4">// 右值引用，绑定到右值
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>&lt;span style="color:#8be9fd">int&lt;/span> x &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">101&lt;/span>；
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3&lt;/span>&lt;span>rref &lt;span style="color:#ff79c6">=&lt;/span> x; &lt;span style="color:#6272a4">// 错误，右值引用不能绑定到左值
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>右值引用有容易迷惑的地方，比如一个函数的参数是右值引用，但是这个右值在函数调用时是左值。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">func&lt;/span>(&lt;span style="color:#8be9fd">int&lt;/span>&lt;span style="color:#ff79c6">&amp;amp;&amp;amp;&lt;/span> ref) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span> &lt;span style="color:#6272a4">// ref 是右值引用, 但是在函数调用时是左值
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> ref &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">100&lt;/span>; &lt;span style="color:#6272a4">// 可以修改
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>两种引用在函数调用时的区别：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">func1&lt;/span>(&lt;span style="color:#8be9fd">int&lt;/span>&lt;span style="color:#ff79c6">&amp;amp;&lt;/span> ref) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span> &lt;span style="color:#6272a4">// ref 是左值引用
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">func2&lt;/span>(&lt;span style="color:#8be9fd">int&lt;/span>&lt;span style="color:#ff79c6">&amp;amp;&amp;amp;&lt;/span> ref) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span> &lt;span style="color:#6272a4">// ref 是右值引用
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">func3&lt;/span>(&lt;span style="color:#ff79c6">const&lt;/span> &lt;span style="color:#8be9fd">int&lt;/span>&lt;span style="color:#ff79c6">&amp;amp;&lt;/span> ref) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span> &lt;span style="color:#6272a4">// ref 是 const 左值引用
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> a &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">100&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span> func1(a); &lt;span style="color:#6272a4">// 正确 a 是左值
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> func1(&lt;span style="color:#bd93f9">101&lt;/span>); &lt;span style="color:#6272a4">// 错误 101 是右值
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> func2(&lt;span style="color:#bd93f9">102&lt;/span>); &lt;span style="color:#6272a4">// 正确 102 是右值
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> func2(a); &lt;span style="color:#6272a4">// 错误 a 是左值
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> func3(a); &lt;span style="color:#6272a4">// 正确 a 是左值
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> func3(&lt;span style="color:#bd93f9">103&lt;/span>); &lt;span style="color:#6272a4">// 正确 103 是右值
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="引用折叠">&lt;a href="#%e5%bc%95%e7%94%a8%e6%8a%98%e5%8f%a0" class="header-anchor">&lt;/a>引用折叠
&lt;/h3>&lt;p>引用折叠是C++11引入的新特性，也可以叫万能引用，用于简化引用的使用，主要用于模板的参数推导。
主要用在模板的参数推导中，当一个模板参数是引用时，引用折叠规则会决定最终的引用类型。&lt;/p>
&lt;p>C++11引入右值引用 &lt;code>T&amp;amp;&amp;amp;&lt;/code> 后，允许绑定到右值，同时在模板中可能出现复杂的类型推导情况，例如：&lt;/p>
&lt;ul>
&lt;li>&lt;code>T&amp;amp; &amp;amp;&lt;/code>&lt;/li>
&lt;li>&lt;code>T&amp;amp; &amp;amp;&amp;amp;&lt;/code>&lt;/li>
&lt;li>&lt;code>T&amp;amp;&amp;amp; &amp;amp;&lt;/code>&lt;/li>
&lt;li>&lt;code>T&amp;amp;&amp;amp; &amp;amp;&amp;amp;&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>为了简化模板参数推导，引入了引用折叠规则：&lt;/p>
&lt;p>引用折叠规则：&lt;/p>
&lt;ul>
&lt;li>&lt;code>T&amp;amp; &amp;amp; -&amp;gt; T&amp;amp;&lt;/code>&lt;/li>
&lt;li>&lt;code>T&amp;amp; &amp;amp;&amp;amp; -&amp;gt; T&amp;amp;&lt;/code>&lt;/li>
&lt;li>&lt;code>T&amp;amp;&amp;amp; &amp;amp; -&amp;gt; T&amp;amp;&lt;/code>&lt;/li>
&lt;li>&lt;code>T&amp;amp;&amp;amp; &amp;amp;&amp;amp; -&amp;gt; T&amp;amp;&amp;amp;&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>简单来说,左值引用 &lt;code>&amp;amp;&lt;/code> 具有优先级，只要组合中出现左值引用，最终结果就是左值引用。
右值引用 &lt;code>&amp;amp;&amp;amp;&lt;/code> 只有在没有左值引用的情况下才会保留。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">template&lt;/span>&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>&lt;span style="color:#ff79c6">typename&lt;/span> T&lt;span style="color:#ff79c6">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> func(T&lt;span style="color:#ff79c6">&amp;amp;&amp;amp;&lt;/span> param) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span> &lt;span style="color:#6272a4">// param 的类型取决于传入的值类别
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> x &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">100&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span> func(x); &lt;span style="color:#6272a4">// T 推导为 int&amp;amp;，T&amp;amp;&amp;amp; 折叠为 int&amp;amp;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> func(&lt;span style="color:#bd93f9">101&lt;/span>); &lt;span style="color:#6272a4">// T 推导为 int，T&amp;amp;&amp;amp; 保持为 int&amp;amp;&amp;amp;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>当传入左值&lt;code>x&lt;/code>时，&lt;code>T&lt;/code>推导为&lt;code>int&amp;amp;&lt;/code>，&lt;code>T&amp;amp;&amp;amp;&lt;/code>变成&lt;code>int&amp;amp; &amp;amp;&amp;amp;&lt;/code>，折叠为&lt;code>int&amp;amp;&lt;/code>。&lt;/li>
&lt;li>当传入右值&lt;code>101&lt;/code>时，&lt;code>T&lt;/code>推导为&lt;code>int&lt;/code>，&lt;code>T&amp;amp;&amp;amp;&lt;/code>保持为&lt;code>int&amp;amp;&amp;amp;&lt;/code>。&lt;/li>
&lt;/ul>
&lt;p>引用折叠生效的一个前提是模板参数要发生类型推导，如果模板参数是明确的类型，引用折叠规则不会生效。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">template&lt;/span>&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>&lt;span style="color:#ff79c6">typename&lt;/span> T&lt;span style="color:#ff79c6">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> func(std&lt;span style="color:#ff79c6">::&lt;/span>vector&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>T&lt;span style="color:#ff79c6">&amp;gt;&amp;amp;&amp;amp;&lt;/span> param); &lt;span style="color:#6272a4">// 普通右值引用，只能绑定右值
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">template&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&lt;/span>&lt;span style="color:#ff79c6">typename&lt;/span> T&lt;span style="color:#ff79c6">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>&lt;span style="color:#ff79c6">class&lt;/span> &lt;span style="color:#50fa7b">A&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span>&lt;span style="color:#ff79c6">public&lt;/span>&lt;span style="color:#ff79c6">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span> &lt;span style="color:#8be9fd">void&lt;/span> push(T&lt;span style="color:#ff79c6">&amp;amp;&amp;amp;&lt;/span> t)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span> data_.push_back(std&lt;span style="color:#ff79c6">::&lt;/span>forward&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>T&lt;span style="color:#ff79c6">&amp;gt;&lt;/span>(t));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span>&lt;span style="color:#ff79c6">private&lt;/span>&lt;span style="color:#ff79c6">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>vector&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>T&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> data_;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span> A&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>&lt;span style="color:#8be9fd">int&lt;/span>&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> a;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span> &lt;span style="color:#6272a4">// int x = 100;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#6272a4">// a.push(x); // 编译错误：左值不能绑定到右值引用
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> a.push(&lt;span style="color:#bd93f9">101&lt;/span>); &lt;span style="color:#6272a4">// 正确：右值
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里的 &lt;code>T&amp;amp;&amp;amp;&lt;/code> 是一个右值引用，但是在模板参数推导时，会根据传入的参数类型来决定最终的引用类型。
因为在初始化 &lt;code>A&lt;/code> 类时，&lt;code>T&lt;/code> 的类型已经确定了，所以 &lt;code>T&amp;amp;&amp;amp;&lt;/code> 不会发生引用折叠。&lt;/p>
&lt;p>改进&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">template&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&lt;/span>&lt;span style="color:#ff79c6">typename&lt;/span> T&lt;span style="color:#ff79c6">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>&lt;span style="color:#ff79c6">class&lt;/span> &lt;span style="color:#50fa7b">A&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span>&lt;span style="color:#ff79c6">public&lt;/span>&lt;span style="color:#ff79c6">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span> &lt;span style="color:#ff79c6">template&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&lt;/span>&lt;span style="color:#ff79c6">typename&lt;/span> U&lt;span style="color:#ff79c6">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span> &lt;span style="color:#8be9fd">void&lt;/span> push(U&lt;span style="color:#ff79c6">&amp;amp;&amp;amp;&lt;/span> u)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span> data_.push_back(std&lt;span style="color:#ff79c6">::&lt;/span>forward&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>U&lt;span style="color:#ff79c6">&amp;gt;&lt;/span>(u));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span>&lt;span style="color:#ff79c6">private&lt;/span>&lt;span style="color:#ff79c6">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>vector&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>T&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> data_;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span> A&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>&lt;span style="color:#8be9fd">int&lt;/span>&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> a;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> x &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">100&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span> a.push(x);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span> a.push(&lt;span style="color:#bd93f9">101&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里的 &lt;code>U&amp;amp;&amp;amp;&lt;/code> 是一个万能引用，它会根据传入的参数类型来决定最终的引用类型，所以可以正确的推导出左值和右值。&lt;/p>
&lt;h2 id="总结">&lt;a href="#%e6%80%bb%e7%bb%93" class="header-anchor">&lt;/a>总结
&lt;/h2>&lt;p>C++中的变量可以分为左值和右值，右值又可以分为纯右值和将亡值。不同类型的变量的生命周期与作用域也是有差别的。&lt;/p>
&lt;p>简单说有明确变量名，可以取地址，可以修改的是左值，没有明确变量名，不能取地址，不能修改的是右值。&lt;/p>
&lt;p>左值和右值配合引用，可以更好的控制变量的生命周期，同时也会带来一些特殊的情况，比如引用折叠。&lt;/p>
&lt;ul>
&lt;li>左值引用：左值引用是一个别名，它是一个左值，可以取地址，可以修改。作为函数参数时，只能绑定左值。&lt;/li>
&lt;li>const 左值引用：可以绑定到右值，但是不能修改。&lt;/li>
&lt;li>右值引用：右值引用是一个新的引用类型，用于绑定到右值。作为函数参数时，只能绑定右值。&lt;/li>
&lt;li>引用折叠：引用折叠是C++11引入的新特性，用于简化引用的使用，主要用于模板的参数推导。只有在发生类型推导时才会生效。&lt;/li>
&lt;/ul>
&lt;p>左值引用和右值引用，应该要配合 &lt;code>std::move&lt;/code> 和 &lt;code>std::forward&lt;/code> 使用，这样可以更好的控制变量的生命周期。
这里先挖一个坑，后面有空再来聊这部分内容。&lt;/p></description></item><item><title>Linux下使用iouring实现一个tcp服务</title><link>https://lqxhub.github.io/posts/f0e9829c/</link><pubDate>Sun, 20 Oct 2024 17:31:37 +0800</pubDate><guid>https://lqxhub.github.io/posts/f0e9829c/</guid><description>&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/6a84474a44a97bccecbbc9c5a3b9f7aea2571c97.jpg" alt="Featured image of post Linux下使用iouring实现一个tcp服务" />&lt;p>今年一直没怎么写东西，看了一下上一篇文章，都过去半年了。前段时间一直想写一点redis的东西，但是一直没有时间去研读源码，所以就一直没有写。
最近有时间，看了一点 &lt;strong>iouring&lt;/strong> 的东西，就写了一篇文章，介绍了一下 &lt;strong>iouring&lt;/strong> 的基本使用，实现了一个简单的TCP server&lt;/p>
&lt;p>很早就听说过 &lt;strong>iouring&lt;/strong> ，但是一直没有时间学习。最近有时间就找了一些资料，学习了一下，写了一个简单的例子，实现了一个简单的tcp服务。&lt;/p>
&lt;p>这篇文章主要介绍了如何使用 &lt;strong>iouring&lt;/strong> 实现一个简单的 &lt;strong>tcp&lt;/strong> 服务，只是介绍了iouring的基本使用，没有涉及底层实现。
后面有时间再去学一下 &lt;strong>liburing&lt;/strong> 的源码，看看底层是如何实现的。&lt;/p>
&lt;p>先解释一下两个名词：&lt;strong>iouring&lt;/strong> 和 &lt;strong>liburing&lt;/strong>。
&lt;strong>iouring&lt;/strong> 是 &lt;strong>Linux&lt;/strong> 内核在 &lt;strong>5.1&lt;/strong> 版本引入的一个新的异步I/O接口。
&lt;strong>liburing&lt;/strong> 是 &lt;strong>iouring&lt;/strong> 的一个用户态库，封装了 &lt;strong>iouring&lt;/strong> 的接口，使得用户可以更方便的使用 &lt;strong>iouring&lt;/strong>。&lt;/p>
&lt;p>简单说就是 &lt;strong>io_uring&lt;/strong> 是linux内核的功能，对外提供了一套异步I/O的接口。因为直接使用 linux内核的 &lt;strong>io_uring&lt;/strong> 接口太麻烦了，
所以在就写了 &lt;strong>liburing&lt;/strong> 这个库，对内核的 &lt;strong>io_uring&lt;/strong> 封装，提供了一套更加友好的接口，使得用户可以更方便的使用 &lt;strong>io_uring&lt;/strong>。&lt;/p>
&lt;h2 id="什么是iouring">&lt;a href="#%e4%bb%80%e4%b9%88%e6%98%afiouring" class="header-anchor">&lt;/a>什么是iouring
&lt;/h2>&lt;p>io_uring是Linux内核在 &lt;strong>5.1&lt;/strong> 版本引入的一个新的异步I/O接口。
io_uring的目标是提供一个高效的、统一的异步I/O接口，以替代现有的异步I/O接口（如aio、epoll、eventfd等）。
io_uring的设计目标是提供一个简单的、高效的、统一的异步I/O接口，以便应用程序可以更容易地利用异步I/O的优势。&lt;/p>
&lt;p>虽然linux内核提供了很多异步I/O的接口，比如aio。
在linux上可以使用&lt;/p>
&lt;p>&lt;code>fcntl(sockfd, F_SETFL, fcntl(sockfd, F_GETFL, 0) | O_NONBLOCK);&lt;/code>&lt;/p>
&lt;p>来设置 &lt;strong>socket&lt;/strong> 为非阻塞模式，后续在读写 &lt;strong>socket&lt;/strong> 的 &lt;strong>fd&lt;/strong> 时，使用 &lt;code>read&lt;/code> 和 &lt;code>write&lt;/code> 函数 就是非阻塞的了。&lt;/p>
&lt;p>在调用 &lt;code>read&lt;/code> 和 &lt;code>write&lt;/code> 函数时，如果 &lt;strong>fd&lt;/strong> 没有数据，或者 &lt;strong>fd&lt;/strong> 的缓冲区满了，那么 &lt;code>read&lt;/code> 和 &lt;code>write&lt;/code> 函数会立即返回，
不会阻塞&lt;/p>
&lt;p>但是这种方式有一个问题，就是 &lt;strong>read&lt;/strong> 和 &lt;strong>write&lt;/strong> 函数的调用是阻塞的，虽然 &lt;strong>read&lt;/strong> 和 &lt;strong>write&lt;/strong> 函数会立即返回，但是 &lt;strong>read&lt;/strong> 和 &lt;strong>write&lt;/strong> 函数的调用是阻塞的，会占用 &lt;strong>CPU&lt;/strong> 的资源。&lt;/p>
&lt;p>因为之前的异步I/O接口不够好用，所以 &lt;strong>io_uring&lt;/strong> 就诞生了。&lt;/p>
&lt;p>&lt;strong>io_uring&lt;/strong> 的设计目标是提供一个简单的、高效的、统一的异步I/O接口，以便应用程序可以更容易地利用异步I/O的优势。
现在的 &lt;strong>io_uring&lt;/strong> 支持 &lt;strong>文件 I/O&lt;/strong>、&lt;strong>网络 I/O&lt;/strong>、&lt;strong>定时器&lt;/strong>、&lt;strong>信号&lt;/strong> 等。真正的统一了 &lt;strong>I/O&lt;/strong> 异步操作。&lt;/p>
&lt;p>说到异步I/O，就不得不提一下 &lt;strong>epoll&lt;/strong>。 &lt;strong>epoll&lt;/strong> 是 &lt;strong>Linux&lt;/strong> 内核提供的一种 &lt;strong>I/O&lt;/strong> 多路复用机制，可以同时监控多个 &lt;strong>fd&lt;/strong> 的 &lt;strong>I/O&lt;/strong> 事件。
&lt;strong>epoll&lt;/strong> 只是这个 多路复用机制，只是用来监控 &lt;strong>fd&lt;/strong> 的 &lt;strong>I/O&lt;/strong> 事件，当 &lt;strong>fd&lt;/strong> 有 &lt;strong>I/O&lt;/strong> 事件时（fd 可以被读写时）， &lt;strong>epoll&lt;/strong> 会通知应用程序。
真正的 &lt;strong>I/O&lt;/strong> 操作还是由 &lt;strong>read&lt;/strong> 和 &lt;strong>write&lt;/strong> 函数来完成的。
所以说 &lt;strong>epoll&lt;/strong> 并不是异步 &lt;strong>I/O&lt;/strong>，只是 &lt;strong>I/O&lt;/strong> 多路复用机制。&lt;/p>
&lt;h2 id="io_uring的基础概念">&lt;a href="#io_uring%e7%9a%84%e5%9f%ba%e7%a1%80%e6%a6%82%e5%bf%b5" class="header-anchor">&lt;/a>io_uring的基础概念
&lt;/h2>&lt;p>&lt;strong>io_uring&lt;/strong> 有两个重要的概念：&lt;strong>Submission Queue&lt;/strong> 和 &lt;strong>Completion Queue&lt;/strong>。 简称 &lt;strong>sq&lt;/strong> 和 &lt;strong>cq&lt;/strong>。&lt;/p>
&lt;p>&lt;strong>Submission Queue&lt;/strong> 是 &lt;strong>io_uring&lt;/strong> 的提交队列，用来提交 &lt;strong>I/O&lt;/strong> 请求。&lt;/p>
&lt;p>&lt;strong>Completion Queue&lt;/strong> 是 &lt;strong>io_uring&lt;/strong> 的完成队列，用来存放 &lt;strong>I/O&lt;/strong> 请求的完成状态。&lt;/p>
&lt;p>和 &lt;strong>sq&lt;/strong> 和 &lt;strong>cq&lt;/strong> 相对应的是 &lt;strong>sqe&lt;/strong> 和 &lt;strong>cqe&lt;/strong>。&lt;/p>
&lt;p>&lt;strong>sqe&lt;/strong> 是 &lt;strong>Submission Queue&lt;/strong> 的元素，用来描述一个 &lt;strong>I/O&lt;/strong> 请求。&lt;/p>
&lt;p>&lt;strong>cqe&lt;/strong> 是 &lt;strong>Completion Queue&lt;/strong> 的元素，用来描述一个 &lt;strong>I/O&lt;/strong> 请求的完成状态。&lt;/p>
&lt;p>放一张iouring的工作流程图：&lt;/p>
&lt;p>
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/359587e330204f8a868cf77c92197a417877ae15.png">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/359587e330204f8a868cf77c92197a417877ae15.png" alt="" />
&lt;/a>
&lt;/div>
&lt;/p>
&lt;p>io_uring中非常重要的两个数据结构 &lt;strong>sq&lt;/strong> 和 &lt;strong>cq&lt;/strong>。是用户空间和内核空间之间的通信桥梁。&lt;/p>
&lt;p>&lt;strong>io_uring&lt;/strong> 的工作流程如下：&lt;/p>
&lt;ol>
&lt;li>应用程序向 &lt;strong>Submission Queue&lt;/strong> 中提交 &lt;strong>I/O&lt;/strong> 请求。&lt;/li>
&lt;li>&lt;strong>io_uring&lt;/strong> 内核模块从 &lt;strong>Submission Queue&lt;/strong> 中取出 &lt;strong>I/O&lt;/strong> 请求，执行 &lt;strong>I/O&lt;/strong> 操作。&lt;/li>
&lt;li>&lt;strong>io_uring&lt;/strong> 内核模块将 &lt;strong>I/O&lt;/strong> 请求的完成状态写入 &lt;strong>Completion Queue&lt;/strong>。&lt;/li>
&lt;li>应用程序从 &lt;strong>Completion Queue&lt;/strong> 中读取 &lt;strong>I/O&lt;/strong> 请求的完成状态。&lt;/li>
&lt;li>应用程序处理 &lt;strong>I/O&lt;/strong> 请求的完成状态。&lt;/li>
&lt;/ol>
&lt;p>因为这次只是简单的介绍 &lt;strong>iouring&lt;/strong> 的基本使用，所以就不深入讲 &lt;strong>iouring&lt;/strong> 的原理了。&lt;/p>
&lt;h2 id="liburing的使用">&lt;a href="#liburing%e7%9a%84%e4%bd%bf%e7%94%a8" class="header-anchor">&lt;/a>liburing的使用
&lt;/h2>&lt;p>&lt;strong>liburing&lt;/strong> 是 &lt;strong>iouring&lt;/strong> 的一个用户态库，封装了 &lt;strong>iouring&lt;/strong> 的接口，使得用户可以更方便的使用 &lt;strong>iouring&lt;/strong>。&lt;/p>
&lt;p>liburing中封装了很多操作函数，这次也不会全部介绍，只介绍一些常用的函数。&lt;/p>
&lt;h3 id="liburing常用的函数">&lt;a href="#liburing%e5%b8%b8%e7%94%a8%e7%9a%84%e5%87%bd%e6%95%b0" class="header-anchor">&lt;/a>liburing常用的函数
&lt;/h3>&lt;h4 id="io_uring_queue_init">&lt;a href="#io_uring_queue_init" class="header-anchor">&lt;/a>io_uring_queue_init
&lt;/h4>&lt;p>初始化 &lt;strong>io_uring&lt;/strong> 对象。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">io_uring_queue_init&lt;/span>(&lt;span style="color:#8be9fd">unsigned&lt;/span> entries, &lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">io_uring&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>ring,&lt;span style="color:#8be9fd">unsigned&lt;/span> flags);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>有三个参数：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>entries&lt;/strong>： &lt;strong>Submission Queue&lt;/strong> 和 &lt;strong>Completion Queue&lt;/strong> 的大小。&lt;/li>
&lt;li>&lt;strong>ring&lt;/strong>： &lt;strong>io_uring&lt;/strong> 对象。&lt;/li>
&lt;li>&lt;strong>flags&lt;/strong>： 保留参数，传 &lt;strong>0&lt;/strong> 即可。&lt;/li>
&lt;/ol>
&lt;h4 id="io_uring_queue_exit">&lt;a href="#io_uring_queue_exit" class="header-anchor">&lt;/a>io_uring_queue_exit
&lt;/h4>&lt;p>销毁 &lt;strong>io_uring&lt;/strong> 对象。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">io_uring_queue_exit&lt;/span>(&lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">io_uring&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>ring);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>传入 &lt;strong>io_uring&lt;/strong> 对象即可。&lt;/p>
&lt;h4 id="io_uring_get_sqe">&lt;a href="#io_uring_get_sqe" class="header-anchor">&lt;/a>io_uring_get_sqe
&lt;/h4>&lt;p>获取 &lt;strong>Submission Queue&lt;/strong> 的元素。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">io_uring_sqe&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>&lt;span style="color:#50fa7b">io_uring_get_sqe&lt;/span>(&lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">io_uring&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>ring);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>传入 &lt;strong>io_uring&lt;/strong> 对象，返回一个 &lt;strong>sqe&lt;/strong> 对象，用来描述一个 &lt;strong>I/O&lt;/strong> 请求。&lt;/p>
&lt;h4 id="io_uring_submit">&lt;a href="#io_uring_submit" class="header-anchor">&lt;/a>io_uring_submit
&lt;/h4>&lt;p>提交 &lt;strong>I/O&lt;/strong> 请求。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">io_uring_submit&lt;/span>(&lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">io_uring&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>ring);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>传入 &lt;strong>io_uring&lt;/strong> 对象，提交 &lt;strong>I/O&lt;/strong> 请求。&lt;/p>
&lt;h4 id="io_uring_wait_cqe">&lt;a href="#io_uring_wait_cqe" class="header-anchor">&lt;/a>io_uring_wait_cqe
&lt;/h4>&lt;p>等待 &lt;strong>I/O&lt;/strong> 请求的完成状态。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">io_uring_wait_cqe&lt;/span>(&lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">io_uring&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>ring, &lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">io_uring_cqe&lt;/span> &lt;span style="color:#ff79c6">**&lt;/span>cqe_ptr);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>传入 &lt;strong>io_uring&lt;/strong> 对象，返回 &lt;strong>cqe&lt;/strong> 对象，用来描述一个 &lt;strong>I/O&lt;/strong> 请求的完成状态。&lt;/p>
&lt;h4 id="io_uring_submit_and_wait">&lt;a href="#io_uring_submit_and_wait" class="header-anchor">&lt;/a>io_uring_submit_and_wait
&lt;/h4>&lt;p>提交 &lt;strong>I/O&lt;/strong> 请求，并等待 &lt;strong>I/O&lt;/strong> 请求的完成状态。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">io_uring_submit_and_wait&lt;/span>(&lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">io_uring&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>ring, &lt;span style="color:#8be9fd">unsigned&lt;/span> wait_nr);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>传入 &lt;strong>io_uring&lt;/strong> 对象，提交 &lt;strong>I/O&lt;/strong> 请求，并等待 &lt;strong>I/O&lt;/strong> 请求的完成状态。&lt;/p>
&lt;p>可以看做是 &lt;strong>io_uring_submit&lt;/strong> 和 &lt;strong>io_uring_wait_cqe&lt;/strong> 的组合。&lt;/p>
&lt;h4 id="io_uring_prep_accept">&lt;a href="#io_uring_prep_accept" class="header-anchor">&lt;/a>io_uring_prep_accept
&lt;/h4>&lt;p>向 &lt;strong>Submission Queue&lt;/strong> 中添加一个 &lt;strong>accept&lt;/strong> 请求。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">io_uring_prep_accept&lt;/span>(&lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">io_uring_sqe&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>sqe, &lt;span style="color:#8be9fd">int&lt;/span> fd, &lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">sockaddr&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>addr, socklen_t &lt;span style="color:#ff79c6">*&lt;/span>addrlen, &lt;span style="color:#8be9fd">int&lt;/span> flags);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>有五个参数：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>sqe&lt;/strong>： &lt;strong>Submission Queue&lt;/strong> 的元素。&lt;/li>
&lt;li>&lt;strong>fd&lt;/strong>： &lt;strong>socket&lt;/strong> 的 &lt;strong>fd&lt;/strong>。&lt;/li>
&lt;li>&lt;strong>addr&lt;/strong>： &lt;strong>sockaddr&lt;/strong> 结构体。&lt;/li>
&lt;li>&lt;strong>addrlen&lt;/strong>： &lt;strong>sockaddr&lt;/strong> 结构体的长度。&lt;/li>
&lt;li>&lt;strong>flags&lt;/strong>： 保留参数，传 &lt;strong>0&lt;/strong> 即可。&lt;/li>
&lt;/ol>
&lt;h4 id="io_uring_prep_recv">&lt;a href="#io_uring_prep_recv" class="header-anchor">&lt;/a>io_uring_prep_recv
&lt;/h4>&lt;p>向 &lt;strong>Submission Queue&lt;/strong> 中添加一个 &lt;strong>recv&lt;/strong> 请求，也就是从fd中异步读取数据。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">io_uring_prep_recv&lt;/span>(&lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">io_uring_sqe&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>sqe, &lt;span style="color:#8be9fd">int&lt;/span> fd, &lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>buf, &lt;span style="color:#8be9fd">unsigned&lt;/span> nbytes, &lt;span style="color:#8be9fd">unsigned&lt;/span> flags);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>有五个参数：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>sqe&lt;/strong>： &lt;strong>Submission Queue&lt;/strong> 的元素。&lt;/li>
&lt;li>&lt;strong>fd&lt;/strong>： &lt;strong>socket&lt;/strong> 的 &lt;strong>fd&lt;/strong>。&lt;/li>
&lt;li>&lt;strong>buf&lt;/strong>： 接收数据的缓冲区,一般是 &lt;code>char&lt;/code> 数组的地址。&lt;/li>
&lt;li>&lt;strong>nbytes&lt;/strong>： 缓冲区的大小。&lt;/li>
&lt;li>&lt;strong>flags&lt;/strong>： 保留参数，传 &lt;strong>0&lt;/strong> 即可。&lt;/li>
&lt;/ol>
&lt;h4 id="io_uring_prep_send">&lt;a href="#io_uring_prep_send" class="header-anchor">&lt;/a>io_uring_prep_send
&lt;/h4>&lt;p>向 &lt;strong>Submission Queue&lt;/strong> 中添加一个 &lt;strong>send&lt;/strong> 请求，也就是向fd中异步写入数据。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">io_uring_prep_send&lt;/span>(&lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">io_uring_sqe&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>sqe, &lt;span style="color:#8be9fd">int&lt;/span> fd, &lt;span style="color:#ff79c6">const&lt;/span> &lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>buf, &lt;span style="color:#8be9fd">unsigned&lt;/span> nbytes, &lt;span style="color:#8be9fd">unsigned&lt;/span> flags);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>有五个参数：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>sqe&lt;/strong>： &lt;strong>Submission Queue&lt;/strong> 的元素。&lt;/li>
&lt;li>&lt;strong>fd&lt;/strong>： &lt;strong>socket&lt;/strong> 的 &lt;strong>fd&lt;/strong>。&lt;/li>
&lt;li>&lt;strong>buf&lt;/strong>： 发送数据的缓冲区，一般是 &lt;code>char&lt;/code> 指针的地址。&lt;/li>
&lt;li>&lt;strong>nbytes&lt;/strong>： 缓冲区的大小。&lt;/li>
&lt;li>&lt;strong>flags&lt;/strong>： 保留参数，传 &lt;strong>0&lt;/strong> 即可。&lt;/li>
&lt;/ol>
&lt;h4 id="io_uring_sqe_set_data">&lt;a href="#io_uring_sqe_set_data" class="header-anchor">&lt;/a>io_uring_sqe_set_data
&lt;/h4>&lt;p>设置 &lt;strong>sqe&lt;/strong> 的数据，把用户态的数据和内核绑定。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">io_uring_sqe_set_data&lt;/span>(&lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">io_uring_sqe&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>sqe, &lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>data);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>传入 &lt;strong>sqe&lt;/strong> 对象和用户态的数据，把用户态的数据和内核绑定。&lt;/p>
&lt;h4 id="io_uring_cqe_seen">&lt;a href="#io_uring_cqe_seen" class="header-anchor">&lt;/a>io_uring_cqe_seen
&lt;/h4>&lt;p>标记 &lt;strong>cqe&lt;/strong> 为已处理。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">io_uring_cqe_seen&lt;/span>(&lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">io_uring&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>ring, &lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">io_uring_cqe&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>cqe);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>传入 &lt;strong>io_uring&lt;/strong> 对象和 &lt;strong>cqe&lt;/strong> 对象，标记 &lt;strong>cqe&lt;/strong> 为已处理。&lt;/p>
&lt;h3 id="实现一个简单的tcp服务">&lt;a href="#%e5%ae%9e%e7%8e%b0%e4%b8%80%e4%b8%aa%e7%ae%80%e5%8d%95%e7%9a%84tcp%e6%9c%8d%e5%8a%a1" class="header-anchor">&lt;/a>实现一个简单的tcp服务
&lt;/h3>&lt;p>&lt;strong>io_uring&lt;/strong> 只能在 &lt;strong>linux&lt;/strong> 内核 &lt;strong>5.1&lt;/strong> 以上版本使用，所以在使用io_uring之前，需要先检查一下内核版本。
一般最新的 &lt;strong>ubuntu&lt;/strong> 和 &lt;strong>Debian&lt;/strong> 都是支持 &lt;strong>io_uring&lt;/strong> 的。&lt;/p>
&lt;p>使用 &lt;strong>liburing&lt;/strong> 需要安装 &lt;strong>liburing&lt;/strong> 库。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>sudo apt-get install liburing-dev
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>下面是一个简单的 &lt;strong>tcp&lt;/strong> 服务，功能是接收客户端的连接，然后向客户端发送一条消息。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>&lt;span style="color:#ff79c6">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;liburing.h&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;netinet/in.h&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;map&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span>&lt;span style="color:#ff79c6">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span>&lt;span style="color:#ff79c6">const&lt;/span> &lt;span style="color:#8be9fd">int&lt;/span> QUEUE_DEPTH &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">128&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span>&lt;span style="color:#ff79c6">const&lt;/span> &lt;span style="color:#8be9fd">int&lt;/span> BUFFER_SIZE &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">4096&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 10&lt;/span>&lt;span>&lt;span style="color:#ff79c6">enum&lt;/span> &lt;span style="color:#50fa7b">ConnectionType&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 11&lt;/span>&lt;span> ACCEPT,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 12&lt;/span>&lt;span> READ,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 13&lt;/span>&lt;span> WRITE,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 14&lt;/span>&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 15&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 16&lt;/span>&lt;span>&lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">Connection&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 17&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> fd;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 18&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> type{};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 19&lt;/span>&lt;span> &lt;span style="color:#8be9fd">char&lt;/span> readBuf[BUFFER_SIZE]{};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 20&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>string writeBuf;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 21&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 22&lt;/span>&lt;span> &lt;span style="color:#ff79c6">explicit&lt;/span> &lt;span style="color:#50fa7b">Connection&lt;/span>(&lt;span style="color:#8be9fd">int&lt;/span> _fd) { fd &lt;span style="color:#ff79c6">=&lt;/span> _fd; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 23&lt;/span>&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 24&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 25&lt;/span>&lt;span>std&lt;span style="color:#ff79c6">::&lt;/span>map&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>&lt;span style="color:#8be9fd">int&lt;/span>, Connection &lt;span style="color:#ff79c6">*&amp;gt;&lt;/span> connections;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 26&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 27&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">createListener&lt;/span>(sockaddr_in &lt;span style="color:#ff79c6">*&lt;/span>addr) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 28&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> listener &lt;span style="color:#ff79c6">=&lt;/span> socket(AF_INET, SOCK_STREAM, &lt;span style="color:#bd93f9">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 29&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (listener &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 30&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cerr &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;socket failed errno:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> errno &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 31&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 32&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 33&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 34&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> opt &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 35&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (setsockopt(listener, SOL_SOCKET, SO_REUSEADDR, &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>opt, &lt;span style="color:#ff79c6">sizeof&lt;/span>(opt)) &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 36&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cerr &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;setsockopt failed errno:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> errno &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 37&lt;/span>&lt;span> close(listener);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 38&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 39&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 40&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 41&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (bind(listener, &lt;span style="color:#ff79c6">reinterpret_cast&lt;/span>&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>sockaddr &lt;span style="color:#ff79c6">*&amp;gt;&lt;/span>(addr), &lt;span style="color:#ff79c6">sizeof&lt;/span>(&lt;span style="color:#ff79c6">*&lt;/span>addr)) &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 42&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cerr &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;bind failed errno:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> errno &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 43&lt;/span>&lt;span> close(listener);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 44&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 45&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 46&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 47&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (listen(listener, &lt;span style="color:#bd93f9">10&lt;/span>) &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 48&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cerr &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;listen failed errno:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> errno &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 49&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 50&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 51&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 52&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> listener;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 53&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 54&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 55&lt;/span>&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">acceptConnection&lt;/span>(io_uring &lt;span style="color:#ff79c6">*&lt;/span>ring, Connection &lt;span style="color:#ff79c6">*&lt;/span>conn, sockaddr &lt;span style="color:#ff79c6">*&lt;/span>addr, socklen_t &lt;span style="color:#ff79c6">*&lt;/span>clientLen) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 56&lt;/span>&lt;span> conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>type &lt;span style="color:#ff79c6">=&lt;/span> ACCEPT;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 57&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> sqe &lt;span style="color:#ff79c6">=&lt;/span> io_uring_get_sqe(ring);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 58&lt;/span>&lt;span> io_uring_prep_accept(sqe, conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>fd, addr, clientLen, &lt;span style="color:#bd93f9">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 59&lt;/span>&lt;span> io_uring_sqe_set_data(sqe, conn);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 60&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 61&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 62&lt;/span>&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">addSocketRead&lt;/span>(io_uring &lt;span style="color:#ff79c6">*&lt;/span>ring, Connection &lt;span style="color:#ff79c6">*&lt;/span>conn) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 63&lt;/span>&lt;span> conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>type &lt;span style="color:#ff79c6">=&lt;/span> READ;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 64&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> sqe &lt;span style="color:#ff79c6">=&lt;/span> io_uring_get_sqe(ring);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 65&lt;/span>&lt;span> io_uring_prep_recv(sqe, conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>fd, &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>readBuf, BUFFER_SIZE, &lt;span style="color:#bd93f9">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 66&lt;/span>&lt;span> io_uring_sqe_set_data(sqe, conn);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 67&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 68&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 69&lt;/span>&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">addSocketWrite&lt;/span>(io_uring &lt;span style="color:#ff79c6">*&lt;/span>ring, Connection &lt;span style="color:#ff79c6">*&lt;/span>conn) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 70&lt;/span>&lt;span> conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>type &lt;span style="color:#ff79c6">=&lt;/span> WRITE;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 71&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> sqe &lt;span style="color:#ff79c6">=&lt;/span> io_uring_get_sqe(ring);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 72&lt;/span>&lt;span> io_uring_prep_send(sqe, conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>fd, conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>writeBuf.data(), conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>writeBuf.size(), &lt;span style="color:#bd93f9">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 73&lt;/span>&lt;span> io_uring_sqe_set_data(sqe, conn);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 74&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 75&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 76&lt;/span>&lt;span>Connection &lt;span style="color:#ff79c6">*&lt;/span>&lt;span style="color:#50fa7b">newConn&lt;/span>(io_uring &lt;span style="color:#ff79c6">*&lt;/span>ring, &lt;span style="color:#8be9fd">int&lt;/span> fd) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 77&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> conn &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">new&lt;/span> Connection(fd);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 78&lt;/span>&lt;span> connections[fd] &lt;span style="color:#ff79c6">=&lt;/span> conn;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 79&lt;/span>&lt;span> addSocketRead(ring, conn);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 80&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> conn;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 81&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 82&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 83&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">uringRun&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 84&lt;/span>&lt;span> sockaddr_in addr{};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 85&lt;/span>&lt;span> addr.sin_family &lt;span style="color:#ff79c6">=&lt;/span> AF_INET;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 86&lt;/span>&lt;span> addr.sin_port &lt;span style="color:#ff79c6">=&lt;/span> htons(&lt;span style="color:#bd93f9">8088&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 87&lt;/span>&lt;span> addr.sin_addr.s_addr &lt;span style="color:#ff79c6">=&lt;/span> INADDR_ANY;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 88&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 89&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> listenFd &lt;span style="color:#ff79c6">=&lt;/span> createListener(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>addr);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 90&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (listenFd &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 91&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 92&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 93&lt;/span>&lt;span> socklen_t clientLen &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">sizeof&lt;/span>(addr);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 94&lt;/span>&lt;span> io_uring ring{};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 95&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (io_uring_queue_init(QUEUE_DEPTH, &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>ring, &lt;span style="color:#bd93f9">0&lt;/span>) &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 96&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cerr &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;io_uring_queue_init failed errno:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> errno &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 97&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 98&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 99&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> lConn &lt;span style="color:#ff79c6">=&lt;/span> newConn(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>ring, listenFd);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">100&lt;/span>&lt;span> acceptConnection(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>ring, lConn, &lt;span style="color:#ff79c6">reinterpret_cast&lt;/span>&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>sockaddr &lt;span style="color:#ff79c6">*&amp;gt;&lt;/span> (&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>addr), &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>clientLen);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">101&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (io_uring_submit(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>ring) &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">102&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cerr &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;io_uring_submit failed errno:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> errno &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">103&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">104&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">105&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">106&lt;/span>&lt;span> io_uring_cqe &lt;span style="color:#ff79c6">*&lt;/span>cqes[QUEUE_DEPTH];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">107&lt;/span>&lt;span> &lt;span style="color:#ff79c6">while&lt;/span> (&lt;span style="color:#8be9fd;font-style:italic">true&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">108&lt;/span>&lt;span> &lt;span style="color:#6272a4">//等待事件完成
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">109&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#8be9fd">int&lt;/span> ret &lt;span style="color:#ff79c6">=&lt;/span> io_uring_submit_and_wait(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>ring, &lt;span style="color:#bd93f9">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">110&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (ret &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">111&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cerr &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;io_uring_wait_cqe failed errno:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> errno &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">112&lt;/span>&lt;span> &lt;span style="color:#ff79c6">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">113&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">114&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">115&lt;/span>&lt;span> &lt;span style="color:#6272a4">//获取完成的事件
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">116&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#ff79c6">auto&lt;/span> num &lt;span style="color:#ff79c6">=&lt;/span> io_uring_peek_batch_cqe(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>ring, cqes, QUEUE_DEPTH);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">117&lt;/span>&lt;span> &lt;span style="color:#ff79c6">for&lt;/span> (&lt;span style="color:#8be9fd">int&lt;/span> i &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>; i &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> num; &lt;span style="color:#ff79c6">++&lt;/span>i) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">118&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> conn &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">reinterpret_cast&lt;/span>&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>Connection &lt;span style="color:#ff79c6">*&amp;gt;&lt;/span> (cqes[i]&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>user_data);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">119&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>type &lt;span style="color:#ff79c6">==&lt;/span> ACCEPT) {&lt;span style="color:#6272a4">//新连接
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">120&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#8be9fd">int&lt;/span> clientFd &lt;span style="color:#ff79c6">=&lt;/span> cqes[i]&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>res;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">121&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> newCLi &lt;span style="color:#ff79c6">=&lt;/span> newConn(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>ring, clientFd);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">122&lt;/span>&lt;span> addSocketRead(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>ring, newCLi);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">123&lt;/span>&lt;span> acceptConnection(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>ring, lConn, &lt;span style="color:#ff79c6">reinterpret_cast&lt;/span>&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>sockaddr &lt;span style="color:#ff79c6">*&amp;gt;&lt;/span> (&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>addr), &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>clientLen);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">124&lt;/span>&lt;span> } &lt;span style="color:#ff79c6">else&lt;/span> &lt;span style="color:#ff79c6">if&lt;/span> (conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>type &lt;span style="color:#ff79c6">==&lt;/span> READ) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">125&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> readSize &lt;span style="color:#ff79c6">=&lt;/span> cqes[i]&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>res;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">126&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (readSize &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {&lt;span style="color:#6272a4">//读取失败(比如客户端断开连接)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">127&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> shutdown(conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>fd, SHUT_RDWR);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">128&lt;/span>&lt;span> connections.erase(conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>fd);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">129&lt;/span>&lt;span> &lt;span style="color:#ff79c6">delete&lt;/span> conn;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">130&lt;/span>&lt;span> } &lt;span style="color:#ff79c6">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">131&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;read:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>readBuf &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">132&lt;/span>&lt;span> conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>writeBuf &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;hello client&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">133&lt;/span>&lt;span> addSocketWrite(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>ring, conn);&lt;span style="color:#6272a4">//向客户端写数据
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">134&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">135&lt;/span>&lt;span> } &lt;span style="color:#ff79c6">else&lt;/span> &lt;span style="color:#ff79c6">if&lt;/span> (conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>type &lt;span style="color:#ff79c6">==&lt;/span> WRITE) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">136&lt;/span>&lt;span> addSocketRead(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>ring, conn);&lt;span style="color:#6272a4">// 把这个连接加入读事件
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">137&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">138&lt;/span>&lt;span> io_uring_cqe_seen(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>ring, cqes[i]);&lt;span style="color:#6272a4">// mark the cqe as processed
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">139&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">140&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">141&lt;/span>&lt;span> io_uring_queue_exit(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>ring);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">142&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">143&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">144&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">145&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">146&lt;/span>&lt;span> uringRun();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">147&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">148&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>编译这段代码的时候，需要链接 &lt;strong>liburing&lt;/strong> 库。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>g++ -o server server.cpp -luring
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>createListener&lt;/code> 函数用来创建一个 &lt;strong>socket&lt;/strong> 监听 &lt;strong>8088&lt;/strong> 端口。这个函数没什么特别的，就是创建一个 &lt;strong>socket&lt;/strong>，然后绑定 &lt;strong>8088&lt;/strong> 端口，然后监听。&lt;/p>
&lt;p>&lt;code>acceptConnection&lt;/code> 函数用来接收客户端的连接。这个函数调用 &lt;strong>io_uring_prep_accept&lt;/strong> 函数，向 &lt;strong>Submission Queue&lt;/strong> 中添加一个 &lt;strong>accept&lt;/strong> 请求。&lt;/p>
&lt;p>&lt;code>addSocketRead&lt;/code> 函数用来向 &lt;strong>Submission Queue&lt;/strong> 中添加一个 &lt;strong>recv&lt;/strong> 请求，也就是从 &lt;strong>fd&lt;/strong> 中异步读取数据。&lt;/p>
&lt;p>&lt;code>addSocketWrite&lt;/code> 函数用来向 &lt;strong>Submission Queue&lt;/strong> 中添加一个 &lt;strong>send&lt;/strong> 请求，也就是向 &lt;strong>fd&lt;/strong> 中异步写入数据。&lt;/p>
&lt;p>&lt;code>newConn&lt;/code> 函数用来创建一个新的连接。这个函数会调用 &lt;code>addSocketRead&lt;/code> 函数，向 &lt;strong>Submission Queue&lt;/strong> 中添加一个 &lt;strong>recv&lt;/strong> 请求。&lt;/p>
&lt;p>&lt;code>uringRun&lt;/code> 函数是主函数。这个函数会创建一个 &lt;strong>io_uring&lt;/strong> 对象，然后调用 &lt;code>createListener&lt;/code> 函数创建一个监听 &lt;strong>socket&lt;/strong>，然后调用 &lt;code>newConn&lt;/code> 函数创建一个新的连接。&lt;/p>
&lt;p>有一个知识点需要注意一下，在 io_uring中，每次获取的 &lt;strong>cqe&lt;/strong> 在使用完之后，需要调用 &lt;code>io_uring_cqe_seen&lt;/code> 函数，标记 &lt;strong>cqe&lt;/strong> 为已处理。
同时处理的时候，也会把 这个 &lt;strong>cqe&lt;/strong> 从 &lt;strong>Completion Queue&lt;/strong> 中移除，对应的 &lt;code>fd&lt;/code> 也会从 &lt;strong>io_uring&lt;/strong> 中移除。
所以，为了保证后续能继续接收到 &lt;strong>fd&lt;/strong> 的 &lt;strong>I/O&lt;/strong> 事件，需要在处理完 &lt;strong>cqe&lt;/strong> 之后，再次调用 &lt;code>addSocketRead&lt;/code> 函数，向 &lt;strong>Submission Queue&lt;/strong> 中添加一个 &lt;strong>recv&lt;/strong> 请求。&lt;/p>
&lt;p>这些函数的内容都比较简单，就不再详细介绍了。主要看一下 &lt;strong>while&lt;/strong> 循环的内容。&lt;/p>
&lt;p>&lt;code>int ret = io_uring_submit_and_wait(&amp;amp;ring, 1);&lt;/code> 这个函数会提交 &lt;strong>I/O&lt;/strong> 请求，并等待 &lt;strong>I/O&lt;/strong> 请求的完成状态。这个函数会阻塞，直到有 1个 &lt;strong>I/O&lt;/strong> 请求完成。&lt;/p>
&lt;p>这里可以使用 &lt;code>io_uring_submit&lt;/code> 这个函数只提交 &lt;strong>I/O&lt;/strong> 请求，不等待 &lt;strong>I/O&lt;/strong> 请求的完成状态。但是这样的话，while循环会一直循环，不会阻塞，对应的表现就是 &lt;strong>CPU&lt;/strong> 占用率会很高。
这种情况适用于 &lt;strong>I/O&lt;/strong> 请求比较多的情况，比如 &lt;strong>nginx&lt;/strong> 这种 &lt;strong>web&lt;/strong> 服务器。&lt;/p>
&lt;p>一般情况下，使用 &lt;code>io_uring_submit_and_wait&lt;/code> 这个函数就可以了。&lt;/p>
&lt;p>如果 返回的 &lt;strong>ret&lt;/strong> 小于 &lt;strong>0&lt;/strong>，说明出错了，这里简单的打印一下错误信息，然后退出。&lt;/p>
&lt;p>&lt;code>auto num = io_uring_peek_batch_cqe(&amp;amp;ring, cqes, QUEUE_DEPTH);&lt;/code> 这个函数会获取 &lt;strong>Completion Queue&lt;/strong> 中的 &lt;strong>cqe&lt;/strong>，一次最多获取 &lt;strong>QUEUE_DEPTH&lt;/strong> 个 &lt;strong>cqe&lt;/strong>。&lt;/p>
&lt;p>这个函数有点类似于 &lt;strong>epoll&lt;/strong> 的 &lt;strong>epoll_wait&lt;/strong> 函数，会一次性获取多个 &lt;strong>cqe&lt;/strong>。&lt;/p>
&lt;p>然后遍历 &lt;strong>cqe&lt;/strong>，根据 &lt;strong>cqe&lt;/strong> 的 &lt;strong>type&lt;/strong> 来处理 &lt;strong>I/O&lt;/strong> 事件。在之前的submit的时候，指定了有 &lt;strong>ACCEPT&lt;/strong>、&lt;strong>READ&lt;/strong>、&lt;strong>WRITE&lt;/strong> 三种 &lt;strong>I/O&lt;/strong> 事件。&lt;/p>
&lt;p>因为之前的 &lt;strong>cqe&lt;/strong> 中的 &lt;strong>user_data&lt;/strong> 是 &lt;strong>Connection&lt;/strong> 对象的指针，所以可以根据 &lt;strong>cqe&lt;/strong> 的 &lt;strong>user_data&lt;/strong> 来获取 &lt;strong>Connection&lt;/strong> 对象，然后根据 &lt;strong>Connection&lt;/strong> 对象的 &lt;strong>type&lt;/strong> 来处理 &lt;strong>I/O&lt;/strong> 事件。
所以可以 &lt;code>reinterpret_cast&amp;lt;Connection *&amp;gt; (cqes[i]-&amp;gt;user_data);&lt;/code>强转来获取 &lt;strong>Connection&lt;/strong> 对象。&lt;/p>
&lt;p>如果 &lt;strong>type&lt;/strong> 是 &lt;strong>ACCEPT&lt;/strong>，说明是新的连接，就调用 &lt;code>newConn&lt;/code> 函数创建一个新的连接，然后调用 &lt;code>acceptConnection&lt;/code> 函数接收新的连接。
在接收新的连接之后，需要再次调用 &lt;code>acceptConnection&lt;/code> 函数，把listener的socket放回io_uring中，后面才能继续工作。&lt;/p>
&lt;p>如果 &lt;strong>type&lt;/strong> 是 &lt;strong>READ&lt;/strong>，说明是读事件，就读取 &lt;strong>cqe&lt;/strong> 的 &lt;strong>res&lt;/strong> 字段，如果小于 &lt;strong>0&lt;/strong>，说明读取失败，比如客户端断开连接，就关闭 &lt;strong>fd&lt;/strong>，然后从 &lt;strong>connections&lt;/strong> 中移除这个 &lt;strong>fd&lt;/strong>，然后释放 &lt;strong>Connection&lt;/strong> 对象。
如果读取成功，就打印读取的数据，然后向客户端发送一条消息。&lt;/p>
&lt;p>如果 &lt;strong>type&lt;/strong> 是 &lt;strong>WRITE&lt;/strong>，说明是写事件，在这里就是向客户端写数据完成了。
调用 &lt;code>addSocketRead&lt;/code> 函数，向 &lt;strong>Submission Queue&lt;/strong> 中添加一个 读的请求，然后这个 &lt;strong>fd&lt;/strong> 就会继续接收 &lt;strong>I/O&lt;/strong> 事件。&lt;/p>
&lt;p>最后调用 &lt;code>io_uring_cqe_seen&lt;/code> 函数，标记 &lt;strong>cqe&lt;/strong> 为已处理。&lt;/p>
&lt;p>这样一个简单的 &lt;strong>tcp&lt;/strong> 服务就实现了。这个服务只是一个简单的例子，没法用在生产环境中，只是用来学习 &lt;strong>iouring&lt;/strong> 的基本使用。&lt;/p>
&lt;p>像是中间的错误处理，连接的超时等问题都没有处理，这些问题需要根据实际情况来处理。&lt;/p>
&lt;p>这个例子中，一个 &lt;strong>socket&lt;/strong> 同时只能读或者写，不能同时读写，这个问题也需要根据实际情况来处理。&lt;/p>
&lt;h2 id="总结">&lt;a href="#%e6%80%bb%e7%bb%93" class="header-anchor">&lt;/a>总结
&lt;/h2>&lt;p>这篇文章主要介绍了 &lt;strong>iouring&lt;/strong> 的基本使用，实现了一个简单的 &lt;strong>tcp&lt;/strong> 服务。只是介绍了 &lt;strong>iouring&lt;/strong> 的基本使用，没有涉及底层实现。
后面有时间再去学一下 &lt;strong>liburing&lt;/strong> 的源码，看看底层是如何实现的。&lt;/p>
&lt;p>其实 &lt;strong>iouring&lt;/strong> 最主要的两个操作是提交 &lt;strong>I/O&lt;/strong> 请求到 &lt;strong>sq&lt;/strong> ，然后等待 &lt;strong>I/O&lt;/strong> 请求的完成后,从 &lt;strong>cq&lt;/strong> 获取然后处理。&lt;/p>
&lt;p>看很多人都说 &lt;strong>iouring&lt;/strong> 性能很高，尤其是在 &lt;strong>I/O&lt;/strong> 密集型的场景下，性能提升很明显。这部分内容还没有验证，后面有时间再去验证一下。&lt;/p>
&lt;p>因为也是初学 &lt;strong>iouring&lt;/strong>，所以文章中可能有错误，欢迎批评指正。&lt;/p>
&lt;hr>
&lt;h2 id="追更">&lt;a href="#%e8%bf%bd%e6%9b%b4" class="header-anchor">&lt;/a>追更
&lt;/h2>&lt;p>&lt;strong>2024-10-23&lt;/strong>&lt;/p>
&lt;p>在服务端加了一点代码，写了一个简单的 &lt;strong>HTTP&lt;/strong> 服务器，可以通过浏览器访问，然后找了一个 HTTP 压测工具，测试了一下性能。&lt;/p>
&lt;p>HTTP 服务器返回的内容：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>writeBuf &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;HTTP/1.1 200 OK&lt;/span>&lt;span style="color:#f1fa8c">\r\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;Content-Length: 55&lt;/span>&lt;span style="color:#f1fa8c">\r\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;Content-Type: text/html&lt;/span>&lt;span style="color:#f1fa8c">\r\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;Connection: keep-alive&lt;/span>&lt;span style="color:#f1fa8c">\r\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;Date: Mon, 23 Oct 2024 13:24:24 GMT&lt;/span>&lt;span style="color:#f1fa8c">\r\n\r\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;&amp;lt;h1&amp;gt;hello&amp;lt;/h1&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>同样的，使用 &lt;strong>epoll&lt;/strong> 也实现了一个 &lt;strong>HTTP&lt;/strong> 服务器，返回了同样的内容。&lt;/p>
&lt;p>几轮测试下来，发现 &lt;strong>epoll&lt;/strong> 的性能要比 &lt;strong>iouring&lt;/strong> 高一点。至于原因还在研究中。&lt;/p>
&lt;p>猜测的原因可能是 在数据量很小的时候， &lt;strong>iouring&lt;/strong> 的性能发挥不出来，甚至效果更差了。
还有一个原因可能是我使用的方法有问题，这个等后面继续研究。&lt;/p></description></item><item><title>C++中动态加载共享库，使用.so/dll文件。详细讲解编译时链接与运行时动态加载的区别</title><link>https://lqxhub.github.io/posts/b810e905/</link><pubDate>Sat, 22 Jul 2023 21:56:18 +0000</pubDate><guid>https://lqxhub.github.io/posts/b810e905/</guid><description>&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/7e0d79d47f0173b9b7a0c351c5d719303aa0f0e8.png" alt="Featured image of post C++中动态加载共享库，使用.so/dll文件。详细讲解编译时链接与运行时动态加载的区别" />&lt;p>在C++使用动态库，(linux下是&lt;code>.so&lt;/code>，windows下是&lt;code>.dll&lt;/code>) 比较常见的方式是在编译时，直接连接到程序中。但是除了这种方式外，还可以使用的动态加载的方式去使用动态库。&lt;/p>
&lt;h2 id="两种方式的区别">&lt;a href="#%e4%b8%a4%e7%a7%8d%e6%96%b9%e5%bc%8f%e7%9a%84%e5%8c%ba%e5%88%ab" class="header-anchor">&lt;/a>两种方式的区别
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>在编译时把库连接到程序：这种方式是在编译的时候，就确定了要链接的库文件，然后通过编译参数在链接时直接把动态库的地址空间等等信息连接到程序中。程序在运行时，可以直接根据路径去寻找动态库，然后加载到程序中，然后运行，这种方式在日常开发中用的比较多。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在程序运行时动态加载库：这种方式是在程序运行时，通过调用系统函数，把动态库加载到程序中，然后执行动态库中的代码。这种方式和编译时链接的优势是可以在程序运行的过程中动态加载和卸载库。可以在不修改源程序的前提下，使用新的库。这种方式，比较常见的应用是程序的插件系统。还有一个就是服务器的热更可以用这个来实现。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>在编译时使用动态库的例子&lt;a class="link" href="https://lqxhub.github.io/posts/a20c5e48/" target="_blank" rel="noopener"
>传送门&lt;/a>&lt;/p>
&lt;h2 id="动态加载库">&lt;a href="#%e5%8a%a8%e6%80%81%e5%8a%a0%e8%bd%bd%e5%ba%93" class="header-anchor">&lt;/a>动态加载库
&lt;/h2>&lt;p>不废话了，直接开始上代码&lt;/p>
&lt;p>在程序运行的过程中动态加载库，需要依赖操作系统，所以在不同的系统上有不同的系统调用函数。&lt;/p>
&lt;p>在&lt;code>linux&lt;/code> 上需要用到 &lt;code>dlopen&lt;/code> 函数加载库，&lt;code>dlclose&lt;/code> 函数释放库，&lt;code>dlsym&lt;/code> 函数 查找库函数
需要的头文件 &lt;code>#include &amp;lt;dlfcn.h&amp;gt;&lt;/code>&lt;/p>
&lt;p>在&lt;code>windows&lt;/code> 上需要 &lt;code>LoadLibrary&lt;/code> 宏加载库，&lt;code>FreeLibrary&lt;/code> 宏释放库，&lt;code>GetProcAddress&lt;/code> 函数查找库函数
需要的头文件 &lt;code>#include &amp;lt;windows.h&amp;gt;&lt;/code>&lt;/p>
&lt;h3 id="基类功能">&lt;a href="#%e5%9f%ba%e7%b1%bb%e5%8a%9f%e8%83%bd" class="header-anchor">&lt;/a>基类功能
&lt;/h3>&lt;p>在C++中可以通过定义一个抽象类来作为所有库的基类，所有的库文件都实现这个基类，然后重写基类的纯虚函数。可以在加载到所有库后，都可以把库里的类作为抽象类的派生类。&lt;/p>
&lt;p>先定义一个基类 base.h&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C++" data-lang="C++">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#ifndef DLOAD_BASE_H
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#define DLOAD_BASE_H
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span>&lt;span style="color:#ff79c6">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span>&lt;span style="color:#6272a4">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span>&lt;span style="color:#6272a4"> * 必须实现 moduleName_create 函数,来初始化对象
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span>&lt;span style="color:#6272a4"> * extern &amp;#34;C&amp;#34; Base *module1_create() {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span>&lt;span style="color:#6272a4"> * return new Module;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span>&lt;span style="color:#6272a4"> * }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span>&lt;span style="color:#6272a4"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span>&lt;span style="color:#6272a4"> * //必须实现 moduleName_destroy 函数,来回收对象
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span>&lt;span style="color:#6272a4"> * extern &amp;#34;C&amp;#34; void module1_destroy(Base *obj) {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span>&lt;span style="color:#6272a4"> * delete obj;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span>&lt;span style="color:#6272a4"> * }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span>&lt;span style="color:#6272a4"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span>&lt;span style="color:#ff79c6">class&lt;/span> &lt;span style="color:#50fa7b">Base&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span> &lt;span style="color:#ff79c6">public&lt;/span>&lt;span style="color:#ff79c6">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>&lt;span> &lt;span style="color:#ff79c6">virtual&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>string readLine(&lt;span style="color:#ff79c6">const&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>string &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>) &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21&lt;/span>&lt;span> &lt;span style="color:#ff79c6">virtual&lt;/span> &lt;span style="color:#ff79c6">~&lt;/span>Base() &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">default&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22&lt;/span>&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#endif &lt;/span>&lt;span style="color:#6272a4">//DLOAD_BASE_H
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个基类的功能很简单，只有一个纯虚函数&lt;code>readLine&lt;/code> 这个函数会传入一个字符串，然后返回一个字符串&lt;/p>
&lt;p>注释中的哪两个函数，后面会有详细的介绍&lt;/p>
&lt;h3 id="实现一个模块">&lt;a href="#%e5%ae%9e%e7%8e%b0%e4%b8%80%e4%b8%aa%e6%a8%a1%e5%9d%97" class="header-anchor">&lt;/a>实现一个模块
&lt;/h3>&lt;p>可以把一个库看做是一个模块，现在实现一个模块&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C++" data-lang="C++">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#6272a4">//简单的模块 例子
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>&lt;span style="color:#6272a4">//转大写
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;algorithm&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;string&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;#34;../base.h&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span>&lt;span style="color:#ff79c6">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span>&lt;span style="color:#ff79c6">class&lt;/span> &lt;span style="color:#50fa7b">Module1&lt;/span> &lt;span style="color:#ff79c6">:&lt;/span> &lt;span style="color:#ff79c6">public&lt;/span> Base {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>string readLine(&lt;span style="color:#ff79c6">const&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>string &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>str) &lt;span style="color:#ff79c6">override&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>string str2(str);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>transform(str.begin(), str.end(), str2.begin(), &lt;span style="color:#ff79c6">::&lt;/span>toupper);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> str2;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span>&lt;span style="color:#6272a4">//必须实现 moduleName_create 函数,来初始化对象
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>&lt;span style="color:#ff79c6">extern&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;C&amp;#34;&lt;/span> Base &lt;span style="color:#ff79c6">*&lt;/span>module1_create() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#ff79c6">new&lt;/span> Module1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21&lt;/span>&lt;span>&lt;span style="color:#6272a4">//必须实现 moduleName_destroy 函数,来回收对象
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>&lt;span style="color:#ff79c6">extern&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;C&amp;#34;&lt;/span> &lt;span style="color:#8be9fd">void&lt;/span> module1_destroy(Base &lt;span style="color:#ff79c6">*&lt;/span>obj) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23&lt;/span>&lt;span> &lt;span style="color:#ff79c6">delete&lt;/span> obj;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个功能非常简单，把传入的字符串转成大写，然后返回&lt;/p>
&lt;ol>
&lt;li>&lt;strong>为什么需要 &lt;code>Base *module1_create()&lt;/code> 和 &lt;code>void module1_destroy(Base *obj)&lt;/code> 这两个函数&lt;/strong>&lt;/li>
&lt;/ol>
&lt;p>因为在把库加载完成后，需要使用库里的函数，但是不能直接查找C++的类，然后再初始化对象，只能在库里完成C++对象的初始化，然后返回对象的指针。&lt;/p>
&lt;p>所以需要在库里有对应的函数来初始化对象和回收对象，所以就有了这两个函数。&lt;/p>
&lt;ol start="2">
&lt;li>&lt;strong>为什么要 &lt;code>extern &amp;quot;C&amp;quot;&lt;/code>&lt;/strong>&lt;/li>
&lt;/ol>
&lt;p>因为C++有函数重载的功能，所以编译器在编译代码的时候，会对函数重命名。但是对函数重命名的规则，没有统一的标准，不同编译器有不同的规则。像 &lt;code>module1_create&lt;/code> 这个函数可能就被重命名成 &lt;code>_Z14module1_create&lt;/code>这样的字符串。这样后面使用 &lt;code>dlsym&lt;/code> 或者 &lt;code>GetProcAddress&lt;/code> 函数查找库里的函数时，就没法找到对应的函数了。所以使用&lt;code>extern &amp;quot;C&amp;quot;&lt;/code> 让编译器使用C的规则来编译这段函数&lt;/p>
&lt;p>至于这两个函数的名字 &lt;code>module1_create&lt;/code> 和 &lt;code>module1_destroy&lt;/code> 没有强制的要求，但是要有一定的规范。否则在加载到库后，没法根据函数名查找到对应的函数。这里用到的规则是 &lt;code>模块名_create&lt;/code> 和 &lt;code>模块名_destroy&lt;/code>&lt;/p>
&lt;h3 id="加载库">&lt;a href="#%e5%8a%a0%e8%bd%bd%e5%ba%93" class="header-anchor">&lt;/a>加载库
&lt;/h3>&lt;p>下面开始加载库，因为在同的系统下，加载库调用的函数不同，所以使用 宏来完成不用系统下的条件编译，最终完成加载库&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C++" data-lang="C++">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#6272a4">//声明创建对象的函数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>&lt;span style="color:#ff79c6">typedef&lt;/span> Base &lt;span style="color:#ff79c6">*&lt;/span>(&lt;span style="color:#ff79c6">*&lt;/span>create)();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span>&lt;span style="color:#6272a4">//声明回收对象的函数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>&lt;span style="color:#ff79c6">typedef&lt;/span> &lt;span style="color:#50fa7b">void&lt;/span> (&lt;span style="color:#ff79c6">*&lt;/span>destroy)(Base &lt;span style="color:#ff79c6">*&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span>&lt;span style="color:#6272a4">//调用系统函数,加载动态库
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#ifdef _WIN32
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span>&lt;span style="color:#ff79c6">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span>HINSTANCE &lt;span style="color:#50fa7b">loadLib&lt;/span>(Base &lt;span style="color:#ff79c6">**&lt;/span>base, &lt;span style="color:#ff79c6">const&lt;/span> &lt;span style="color:#8be9fd">char&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>path, &lt;span style="color:#ff79c6">const&lt;/span> &lt;span style="color:#8be9fd">char&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>funName) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> handle &lt;span style="color:#ff79c6">=&lt;/span> LoadLibrary(path);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (&lt;span style="color:#ff79c6">!&lt;/span>handle) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#ff79c6">nullptr&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> cr &lt;span style="color:#ff79c6">=&lt;/span> (create) GetProcAddress(handle, funName);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (cr) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span> &lt;span style="color:#ff79c6">*&lt;/span>base &lt;span style="color:#ff79c6">=&lt;/span> cr();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> handle;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23&lt;/span>&lt;span>&lt;span style="color:#6272a4">//调用系统函数,卸载动态库
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">freeLib&lt;/span>(HINSTANCE handle, Base &lt;span style="color:#ff79c6">*&lt;/span>obj, &lt;span style="color:#ff79c6">const&lt;/span> &lt;span style="color:#8be9fd">char&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>funName) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> free &lt;span style="color:#ff79c6">=&lt;/span> (destroy) GetProcAddress(handle, funName);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (free) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27&lt;/span>&lt;span> free(obj);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29&lt;/span>&lt;span> FreeLibrary(handle);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#else
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33&lt;/span>&lt;span>&lt;span style="color:#ff79c6">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34&lt;/span>&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>&lt;span style="color:#50fa7b">loadLib&lt;/span>(Base &lt;span style="color:#ff79c6">**&lt;/span>base, &lt;span style="color:#ff79c6">const&lt;/span> &lt;span style="color:#8be9fd">char&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>path, &lt;span style="color:#ff79c6">const&lt;/span> &lt;span style="color:#8be9fd">char&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>funName) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> handle &lt;span style="color:#ff79c6">=&lt;/span> dlopen(path, RTLD_LAZY);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (&lt;span style="color:#ff79c6">!&lt;/span>handle) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#ff79c6">nullptr&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> cr &lt;span style="color:#ff79c6">=&lt;/span> (create) dlsym(handle, funName);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (cr) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41&lt;/span>&lt;span> &lt;span style="color:#ff79c6">*&lt;/span>base &lt;span style="color:#ff79c6">=&lt;/span> cr();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> handle;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">44&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">45&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">46&lt;/span>&lt;span>&lt;span style="color:#6272a4">//调用系统函数,卸载动态库
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">47&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">freeLib&lt;/span>(&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>handle, Base &lt;span style="color:#ff79c6">*&lt;/span>obj, &lt;span style="color:#ff79c6">const&lt;/span> &lt;span style="color:#8be9fd">char&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>funName) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">48&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> free &lt;span style="color:#ff79c6">=&lt;/span> (destroy) dlsym(handle, funName);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">49&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (free) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">50&lt;/span>&lt;span> free(obj);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">51&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">52&lt;/span>&lt;span> dlclose(handle);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">53&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">54&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">55&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#endif
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在代码最开始的位置，通过 &lt;code>typedef&lt;/code> 声明了两个函数的指针，在查找到函数后，把函数强转成对应的类型，才能在后面使用&lt;/p>
&lt;h3 id="使用库">&lt;a href="#%e4%bd%bf%e7%94%a8%e5%ba%93" class="header-anchor">&lt;/a>使用库
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C++" data-lang="C++">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>string libPath;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#ifdef _WIN32
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span>&lt;span style="color:#ff79c6">&lt;/span> libPath &lt;span style="color:#ff79c6">=&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>string(&lt;span style="color:#f1fa8c">&amp;#34;./module/libmodule1&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">+&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;.dll&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#else
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span>&lt;span style="color:#ff79c6">&lt;/span> libPath &lt;span style="color:#ff79c6">=&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>string(&lt;span style="color:#f1fa8c">&amp;#34;./module/libmodule1&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">+&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;.so&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#endif
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span>&lt;span style="color:#ff79c6">&lt;/span> Base &lt;span style="color:#ff79c6">*&lt;/span>module &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">nullptr&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> handle &lt;span style="color:#ff79c6">=&lt;/span> loadLib(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>module, libPath.c_str(), std&lt;span style="color:#ff79c6">::&lt;/span>string(&lt;span style="color:#f1fa8c">&amp;#34;module1_create&amp;#34;&lt;/span>).c_str());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (&lt;span style="color:#ff79c6">!&lt;/span>module) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;load lib module1&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34; fail&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> module&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>readLine(&lt;span style="color:#f1fa8c">&amp;#34;abc&amp;#34;&lt;/span>) &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>现在基本就完成了一个动态库的动态加载过程。如果想要拓展，只要再按照这个规则，写一个新的模块然后加载上来就可以了。&lt;/p>
&lt;p>最后放一个相对完整的动态加载的demo，&lt;a class="link" href="https://github.com/lqxhub/dynamic-loading-lib" target="_blank" rel="noopener"
>github&lt;/a>&lt;/p></description></item><item><title>pika编译笔记</title><link>https://lqxhub.github.io/posts/d9a4c4a4/</link><pubDate>Sat, 12 Feb 2022 14:28:10 +0000</pubDate><guid>https://lqxhub.github.io/posts/d9a4c4a4/</guid><description>&lt;p>&lt;strong>pika&lt;/strong> 是啥懂得都懂，如果你不知道，这篇文章对你也没有任何帮助&lt;/p>
&lt;p>这篇文章已经同步到 pika 的 github中&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/OpenAtomFoundation/pika/issues/1148" target="_blank" rel="noopener"
>pika issue&lt;/a>&lt;/p>
&lt;h3 id="编译-pika">&lt;a href="#%e7%bc%96%e8%af%91-pika" class="header-anchor">&lt;/a>编译 pika
&lt;/h3>&lt;h2 id="0-准备">&lt;a href="#0-%e5%87%86%e5%a4%87" class="header-anchor">&lt;/a>0 准备
&lt;/h2>&lt;p>需要软件 &lt;strong>centos7.x&lt;/strong> &lt;strong>gcc4.8&lt;/strong> &lt;strong>g++4.8&lt;/strong> &lt;strong>git&lt;/strong> &lt;strong>cmake&lt;/strong>
最好用centos7系列, 在别的系统中编译可能会报错, 人生苦短, 别和自己过不去&lt;/p>
&lt;p>使用make 编译的时候, 使用 make -jN &lt;em>(N=cpu核数 加快编译速度)&lt;/em>&lt;/p>
&lt;hr>
&lt;h2 id="1-安装工具">&lt;a href="#1-%e5%ae%89%e8%a3%85%e5%b7%a5%e5%85%b7" class="header-anchor">&lt;/a>1 安装工具
&lt;/h2>&lt;ol>
&lt;li>
&lt;p>gcc g++ git 一般用 yum 安装&lt;/p>
&lt;/li>
&lt;li>
&lt;p>安装cmake&lt;/p>
&lt;p>cmake 源码 &lt;a class="link" href="https://cmake.org/download/" target="_blank" rel="noopener"
>https://cmake.org/download/&lt;/a>&lt;/p>
&lt;p>cmake依赖 openssl-devel 先用yum安装 openssl-devel
&lt;code>yum install openssl openssl-devel&lt;/code>&lt;/p>
&lt;p>编译安装cmake&lt;/p>
&lt;p>解压cmake源码&lt;/p>
&lt;p>&lt;code>./bootstrap&lt;/code>&lt;/p>
&lt;p>&lt;code>make &amp;amp;&amp;amp; make install&lt;/code>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2 id="2-解决rocksdb依赖安装必备的库">&lt;a href="#2-%e8%a7%a3%e5%86%b3rocksdb%e4%be%9d%e8%b5%96%e5%ae%89%e8%a3%85%e5%bf%85%e5%a4%87%e7%9a%84%e5%ba%93" class="header-anchor">&lt;/a>2 解决rocksdb依赖,安装必备的库
&lt;/h2>&lt;h2 id="rocksdb-依赖库">&lt;a href="#rocksdb-%e4%be%9d%e8%b5%96%e5%ba%93" class="header-anchor">&lt;/a>rocksdb 依赖库
&lt;/h2>&lt;p>snappy gflags zlib bzip2 stdc++ lz4 zstd lzma 这些库都要安装 为了能静态编译,这些库都要安装静态库&lt;/p>
&lt;ol>
&lt;li>
&lt;p>编译snappy&lt;/p>
&lt;p>&lt;code>mkdir build &amp;amp;&amp;amp; cd build&lt;/code>&lt;/p>
&lt;p>编译 动态库
&lt;code>cmake -DSNAPPY_BUILD_BENCHMARKS=OFF -DSNAPPY_BUILD_TESTS=OFF -DBUILD_SHARED_LIBS=ON ..&lt;/code>&lt;/p>
&lt;p>&lt;code>make &amp;amp;&amp;amp; make install&lt;/code>&lt;/p>
&lt;p>编译 静态库
&lt;code>cmake -DSNAPPY_BUILD_BENCHMARKS=OFF -DSNAPPY_BUILD_TESTS=OFF -DBUILD_SHARED_LIBS=OFF ..&lt;/code>&lt;/p>
&lt;p>&lt;code>make &amp;amp;&amp;amp; make install&lt;/code>&lt;/p>
&lt;p>我没有找到同时编译动态库和静态库的方法，只能分开编译了&lt;/p>
&lt;/li>
&lt;li>
&lt;p>编译gflags&lt;/p>
&lt;p>&lt;code>./configure&lt;/code>&lt;/p>
&lt;p>&lt;code>make &amp;amp;&amp;amp; make install&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>编译zlib&lt;/p>
&lt;p>&lt;code>./configure&lt;/code>&lt;/p>
&lt;p>&lt;code>make &amp;amp;&amp;amp; make install&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>bzip2 一般linux都自带, 没有的用 yum 安装一个&lt;/p>
&lt;p>&lt;code>yum install bzip2-devel bzip2-libs&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>stdc++ 这个库需要安装静态库,直接 yum 安装&lt;/p>
&lt;p>&lt;code>yum install libstdc++ libstdc++-devel libstdc++-static&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>安装lz4&lt;/p>
&lt;p>解压,进入 源码目录&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>cd build/cmake
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3&lt;/span>&lt;span>mkdir build &amp;amp;&amp;amp; build
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5&lt;/span>&lt;span>cmake -DBUILD_STATIC_LIBS=ON -DLZ4_BUILD_CLI=OFF -DLZ4_BUILD_LEGACY_LZ4C=OFF CMAKE_BUILD_TYPE=Relase -D LZ4_POSITION_INDEPENDENT_LIB=OFF ..
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7&lt;/span>&lt;span>make &amp;amp;&amp;amp; make install
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>安装 zstd&lt;/p>
&lt;p>解压源码&lt;/p>
&lt;p>&lt;code>cd build/cmake/lib&lt;/code>&lt;/p>
&lt;p>&lt;code>make &amp;amp;&amp;amp; make install&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>安装lzma&lt;/p>
&lt;p>解压源码 xz压缩包&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>./configure --disable-xz --disable-xzdec --disable-lzmadec --disable-lzmainfo --disable-lzma-links --disable-scripts --disable-doc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span>make &amp;amp;&amp;amp; make install
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;p>最后, 所有的库都安装好后,把库加到 ld 目录中。因为有的库会安装到 &lt;strong>/usr/local/lib64&lt;/strong> 目录下，但是有的系统没有把这个目录加到动态库搜索目录中,&lt;/p>
&lt;p>解决办法&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">echo&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;/usr/local/lib64&amp;#34;&lt;/span> &amp;gt;&amp;gt; /etc/ld.so.conf.d/usr.local.conf
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">echo&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;/usr/local/lib&amp;#34;&lt;/span> &amp;gt;&amp;gt; /etc/ld.so.conf.d/usr.local.conf
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行 &lt;code>ldconfig&lt;/code>&lt;/p>
&lt;hr>
&lt;h2 id="安装-protobuf">&lt;a href="#%e5%ae%89%e8%a3%85-protobuf" class="header-anchor">&lt;/a>安装 protobuf
&lt;/h2>&lt;p>编译 protobuf, 用cmake编译 protobuf release 地址 &lt;a class="link" href="https://github.com/protocolbuffers/protobuf/releases" target="_blank" rel="noopener"
>https://github.com/protocolbuffers/protobuf/releases&lt;/a>
下载 protobuf-cpp-XX.XX.XX.tar.gz&lt;/p>
&lt;p>&lt;em>xx.XX.XX 是版本号&lt;/em>，&lt;strong>需要下载3.X版本的&lt;/strong>&lt;/p>
&lt;p>&lt;code>./configure&lt;/code>&lt;/p>
&lt;p>&lt;code>make &amp;amp;&amp;amp; make install&lt;/code>&lt;/p>
&lt;p>protobuf 也要安装静态库&lt;/p>
&lt;p>到这 protobuf 安装完成&lt;/p>
&lt;hr>
&lt;h2 id="3--拉代码">&lt;a href="#3--%e6%8b%89%e4%bb%a3%e7%a0%81" class="header-anchor">&lt;/a>3 拉代码
&lt;/h2>&lt;p>拉 pika 代码 github &lt;a class="link" href="https://github.com/OpenAtomFoundation/pika" target="_blank" rel="noopener"
>https://github.com/OpenAtomFoundation/pika&lt;/a>
这里最好通过代理去拉代码,要不然 速度感人&lt;/p>
&lt;ol>
&lt;li>git 设置代理&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>git config --global https.proxy http://127.0.0.1:1080
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3&lt;/span>&lt;span>git config --global https.proxy https://127.0.0.1:1080
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5&lt;/span>&lt;span>git config --global --unset http.proxy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7&lt;/span>&lt;span>git config --global --unset https.proxy
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>拉取 依赖库代码&lt;/li>
&lt;/ol>
&lt;p>cd pika 源码目录&lt;/p>
&lt;p>&lt;code>git submodule init&lt;/code>
&lt;code>git submodule update&lt;/code>&lt;/p>
&lt;hr>
&lt;h2 id="4-编译">&lt;a href="#4-%e7%bc%96%e8%af%91" class="header-anchor">&lt;/a>4 编译
&lt;/h2>&lt;h2 id="预先编译">&lt;a href="#%e9%a2%84%e5%85%88%e7%bc%96%e8%af%91" class="header-anchor">&lt;/a>预先编译
&lt;/h2>&lt;p>预先编译一次 &lt;strong>glog&lt;/strong> 和 &lt;strong>rocksdb&lt;/strong>, 因为这两个库直接用 pika 的 MakeFile 编译容易出问题,先预编译一下&lt;/p>
&lt;ol>
&lt;li>先特殊编译一下glog库&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">cd&lt;/span> /third/glog
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span>./configu
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3&lt;/span>&lt;span>make &lt;span style="color:#ff79c6">&amp;amp;&amp;amp;&lt;/span> make install
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>编译rocksdb&lt;/li>
&lt;/ol>
&lt;p>rocksdb编译完不需要安装，只需要复制一下静态库就好&lt;/p>
&lt;p>使用cmake构建&lt;/p>
&lt;p>cmake 需要 cmake3, cmake命令如下&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>cmake笔记3 -DWITH_BZ2&lt;span style="color:#ff79c6">=&lt;/span>ON -DWITH_MD_LIBRARY&lt;span style="color:#ff79c6">=&lt;/span>OFF -DWITH_SNAPPY&lt;span style="color:#ff79c6">=&lt;/span>ON -DWITH_ZLIB&lt;span style="color:#ff79c6">=&lt;/span>ON -DWITH_ZSTD&lt;span style="color:#ff79c6">=&lt;/span>ON -DWITH_TOOLS&lt;span style="color:#ff79c6">=&lt;/span>OFF -DWITH_TESTS&lt;span style="color:#ff79c6">=&lt;/span>OFF -DCMAKE_BUILD_TYPE&lt;span style="color:#ff79c6">=&lt;/span>Release ..
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3&lt;/span>&lt;span>make -jN
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>把编译后的 &lt;strong>librocksdb.a&lt;/strong> 复制到 &lt;strong>rocksdb&lt;/strong> 的根目录&lt;/p>
&lt;h2 id="正常编译">&lt;a href="#%e6%ad%a3%e5%b8%b8%e7%bc%96%e8%af%91" class="header-anchor">&lt;/a>正常编译
&lt;/h2>&lt;p>按照官方给的文档编译即可,&lt;/p>
&lt;p>执行 &lt;code>make&lt;/code>&lt;/p>
&lt;p>等待拉各个依赖模块的代码 然后自动编译&lt;/p>
&lt;p>前期工作做好,编译中应该不会出错&lt;/p>
&lt;p>检查编译是否正确&lt;/p>
&lt;h2 id="后续">&lt;a href="#%e5%90%8e%e7%bb%ad" class="header-anchor">&lt;/a>后续
&lt;/h2>&lt;p>编译完成后,这个可执行文件有很多 .so的依赖, 可移植比较差, 通过 脚本编译一个依赖较少的.so文件&lt;/p>
&lt;p>执行 &lt;strong>link_3_3_path-master.sh&lt;/strong> 脚本等待完成链接&lt;/p>
&lt;hr>
&lt;h2 id="编译完成">&lt;a href="#%e7%bc%96%e8%af%91%e5%ae%8c%e6%88%90" class="header-anchor">&lt;/a>编译完成
&lt;/h2>&lt;ol>
&lt;li>
&lt;p>正常编译&lt;/p>
&lt;p>到 &lt;strong>output/bin/&lt;/strong> 目录中, 执行 &lt;code>ldd pika&lt;/code> 如果没有 notfind 的依赖库 说明编译完成了&lt;/p>
&lt;/li>
&lt;li>
&lt;p>静态链接
&lt;strong>output/bin/&lt;/strong> 目录中的是正常编译的, &lt;strong>link_3_3_path-master.sh&lt;/strong> 同级目录下的是静态链接的&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="静态链接脚本">&lt;a href="#%e9%9d%99%e6%80%81%e9%93%be%e6%8e%a5%e8%84%9a%e6%9c%ac" class="header-anchor">&lt;/a>静态链接脚本
&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#!/usr/bin/sh
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>&lt;span style="color:#ff79c6">&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">source_path&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>/root
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">dependence_path&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>/root/pika_static
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span>g++ &lt;span style="color:#f1fa8c">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">&lt;/span> &lt;span style="color:#f1fa8c">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">source_path&lt;/span>&lt;span style="color:#f1fa8c">}&lt;/span>/pika/src/build_version.o &lt;span style="color:#f1fa8c">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">&lt;/span> &lt;span style="color:#f1fa8c">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">source_path&lt;/span>&lt;span style="color:#f1fa8c">}&lt;/span>/pika/src/pika_stable_log.o &lt;span style="color:#f1fa8c">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">&lt;/span> &lt;span style="color:#f1fa8c">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">source_path&lt;/span>&lt;span style="color:#f1fa8c">}&lt;/span>/pika/src/pika_consensus.o &lt;span style="color:#f1fa8c">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">&lt;/span> &lt;span style="color:#f1fa8c">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">source_path&lt;/span>&lt;span style="color:#f1fa8c">}&lt;/span>/pika/src/pika_slave_node.o &lt;span style="color:#f1fa8c">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">&lt;/span> &lt;span style="color:#f1fa8c">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">source_path&lt;/span>&lt;span style="color:#f1fa8c">}&lt;/span>/pika/src/pika_statistic.o &lt;span style="color:#f1fa8c">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">&lt;/span> &lt;span style="color:#f1fa8c">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">source_path&lt;/span>&lt;span style="color:#f1fa8c">}&lt;/span>/pika/src/pika_client_processor.o &lt;span style="color:#f1fa8c">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">&lt;/span> &lt;span style="color:#f1fa8c">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">source_path&lt;/span>&lt;span style="color:#f1fa8c">}&lt;/span>/pika/src/pika_admin.o &lt;span style="color:#f1fa8c">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">&lt;/span> &lt;span style="color:#f1fa8c">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">source_path&lt;/span>&lt;span style="color:#f1fa8c">}&lt;/span>/pika/src/pika_binlog.o &lt;span style="color:#f1fa8c">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">&lt;/span> &lt;span style="color:#f1fa8c">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">source_path&lt;/span>&lt;span style="color:#f1fa8c">}&lt;/span>/pika/src/pika_bit.o &lt;span style="color:#f1fa8c">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">&lt;/span> &lt;span style="color:#f1fa8c">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">source_path&lt;/span>&lt;span style="color:#f1fa8c">}&lt;/span>/pika/src/pika.o &lt;span style="color:#f1fa8c">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">&lt;/span> &lt;span style="color:#f1fa8c">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">source_path&lt;/span>&lt;span style="color:#f1fa8c">}&lt;/span>/pika/src/pika_proxy.o &lt;span style="color:#f1fa8c">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">&lt;/span> &lt;span style="color:#f1fa8c">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">source_path&lt;/span>&lt;span style="color:#f1fa8c">}&lt;/span>/pika/src/pika_proxy_cli.o &lt;span style="color:#f1fa8c">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">&lt;/span> &lt;span style="color:#f1fa8c">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">source_path&lt;/span>&lt;span style="color:#f1fa8c">}&lt;/span>/pika/src/pika_proxy_conn.o &lt;span style="color:#f1fa8c">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">&lt;/span> &lt;span style="color:#f1fa8c">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">source_path&lt;/span>&lt;span style="color:#f1fa8c">}&lt;/span>/pika/src/pika_client_conn.o &lt;span style="color:#f1fa8c">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">&lt;/span> &lt;span style="color:#f1fa8c">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">source_path&lt;/span>&lt;span style="color:#f1fa8c">}&lt;/span>/pika/src/pika_command.o &lt;span style="color:#f1fa8c">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">&lt;/span> &lt;span style="color:#f1fa8c">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">source_path&lt;/span>&lt;span style="color:#f1fa8c">}&lt;/span>/pika/src/pika_pubsub.o &lt;span style="color:#f1fa8c">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">&lt;/span> &lt;span style="color:#f1fa8c">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">source_path&lt;/span>&lt;span style="color:#f1fa8c">}&lt;/span>/pika/src/pika_conf.o &lt;span style="color:#f1fa8c">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">&lt;/span> &lt;span style="color:#f1fa8c">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">source_path&lt;/span>&lt;span style="color:#f1fa8c">}&lt;/span>/pika/src/pika_dispatch_thread.o &lt;span style="color:#f1fa8c">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">&lt;/span> &lt;span style="color:#f1fa8c">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">source_path&lt;/span>&lt;span style="color:#f1fa8c">}&lt;/span>/pika/src/pika_hash.o &lt;span style="color:#f1fa8c">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">&lt;/span> &lt;span style="color:#f1fa8c">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">source_path&lt;/span>&lt;span style="color:#f1fa8c">}&lt;/span>/pika/src/pika_hyperloglog.o &lt;span style="color:#f1fa8c">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">&lt;/span> &lt;span style="color:#f1fa8c">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">source_path&lt;/span>&lt;span style="color:#f1fa8c">}&lt;/span>/pika/src/pika_kv.o &lt;span style="color:#f1fa8c">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">&lt;/span> &lt;span style="color:#f1fa8c">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">source_path&lt;/span>&lt;span style="color:#f1fa8c">}&lt;/span>/pika/src/pika_list.o &lt;span style="color:#f1fa8c">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">&lt;/span> &lt;span style="color:#f1fa8c">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">source_path&lt;/span>&lt;span style="color:#f1fa8c">}&lt;/span>/pika/src/pika_monitor_thread.o &lt;span style="color:#f1fa8c">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">&lt;/span> &lt;span style="color:#f1fa8c">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">source_path&lt;/span>&lt;span style="color:#f1fa8c">}&lt;/span>/pika/src/pika_server.o &lt;span style="color:#f1fa8c">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">&lt;/span> &lt;span style="color:#f1fa8c">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">source_path&lt;/span>&lt;span style="color:#f1fa8c">}&lt;/span>/pika/src/pika_set.o &lt;span style="color:#f1fa8c">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">&lt;/span> &lt;span style="color:#f1fa8c">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">source_path&lt;/span>&lt;span style="color:#f1fa8c">}&lt;/span>/pika/src/pika_geo.o &lt;span style="color:#f1fa8c">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">&lt;/span> &lt;span style="color:#f1fa8c">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">source_path&lt;/span>&lt;span style="color:#f1fa8c">}&lt;/span>/pika/src/pika_geohash.o &lt;span style="color:#f1fa8c">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">&lt;/span> &lt;span style="color:#f1fa8c">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">source_path&lt;/span>&lt;span style="color:#f1fa8c">}&lt;/span>/pika/src/pika_geohash_helper.o &lt;span style="color:#f1fa8c">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">&lt;/span> &lt;span style="color:#f1fa8c">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">source_path&lt;/span>&lt;span style="color:#f1fa8c">}&lt;/span>/pika/src/pika_binlog_transverter.o &lt;span style="color:#f1fa8c">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">&lt;/span> &lt;span style="color:#f1fa8c">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">source_path&lt;/span>&lt;span style="color:#f1fa8c">}&lt;/span>/pika/src/pika_binlog_reader.o &lt;span style="color:#f1fa8c">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">&lt;/span> &lt;span style="color:#f1fa8c">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">source_path&lt;/span>&lt;span style="color:#f1fa8c">}&lt;/span>/pika/src/pika_partition.o &lt;span style="color:#f1fa8c">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">&lt;/span> &lt;span style="color:#f1fa8c">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">source_path&lt;/span>&lt;span style="color:#f1fa8c">}&lt;/span>/pika/src/pika_repl_bgworker.o &lt;span style="color:#f1fa8c">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">&lt;/span> &lt;span style="color:#f1fa8c">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">source_path&lt;/span>&lt;span style="color:#f1fa8c">}&lt;/span>/pika/src/pika_repl_client.o &lt;span style="color:#f1fa8c">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">&lt;/span> &lt;span style="color:#f1fa8c">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">source_path&lt;/span>&lt;span style="color:#f1fa8c">}&lt;/span>/pika/src/pika_repl_client_conn.o &lt;span style="color:#f1fa8c">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">&lt;/span> &lt;span style="color:#f1fa8c">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">source_path&lt;/span>&lt;span style="color:#f1fa8c">}&lt;/span>/pika/src/pika_repl_client_thread.o &lt;span style="color:#f1fa8c">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">&lt;/span> &lt;span style="color:#f1fa8c">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">source_path&lt;/span>&lt;span style="color:#f1fa8c">}&lt;/span>/pika/src/pika_repl_server.o &lt;span style="color:#f1fa8c">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">&lt;/span> &lt;span style="color:#f1fa8c">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">source_path&lt;/span>&lt;span style="color:#f1fa8c">}&lt;/span>/pika/src/pika_repl_server_conn.o &lt;span style="color:#f1fa8c">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">&lt;/span> &lt;span style="color:#f1fa8c">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">source_path&lt;/span>&lt;span style="color:#f1fa8c">}&lt;/span>/pika/src/pika_repl_server_thread.o &lt;span style="color:#f1fa8c">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">&lt;/span> &lt;span style="color:#f1fa8c">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">source_path&lt;/span>&lt;span style="color:#f1fa8c">}&lt;/span>/pika/src/pika_cmd_table_manager.o &lt;span style="color:#f1fa8c">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">44&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">&lt;/span> &lt;span style="color:#f1fa8c">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">source_path&lt;/span>&lt;span style="color:#f1fa8c">}&lt;/span>/pika/src/pika_auxiliary_thread.o &lt;span style="color:#f1fa8c">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">45&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">&lt;/span> &lt;span style="color:#f1fa8c">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">source_path&lt;/span>&lt;span style="color:#f1fa8c">}&lt;/span>/pika/src/pika_rm.o &lt;span style="color:#f1fa8c">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">46&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">&lt;/span> &lt;span style="color:#f1fa8c">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">source_path&lt;/span>&lt;span style="color:#f1fa8c">}&lt;/span>/pika/src/pika_table.o &lt;span style="color:#f1fa8c">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">47&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">&lt;/span> &lt;span style="color:#f1fa8c">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">source_path&lt;/span>&lt;span style="color:#f1fa8c">}&lt;/span>/pika/src/pika_rsync_service.o &lt;span style="color:#f1fa8c">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">48&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">&lt;/span> &lt;span style="color:#f1fa8c">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">source_path&lt;/span>&lt;span style="color:#f1fa8c">}&lt;/span>/pika/src/pika_inner_message.pb.o &lt;span style="color:#f1fa8c">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">49&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">&lt;/span> &lt;span style="color:#f1fa8c">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">source_path&lt;/span>&lt;span style="color:#f1fa8c">}&lt;/span>/pika/src/pika_slot.o &lt;span style="color:#f1fa8c">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">50&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">&lt;/span> &lt;span style="color:#f1fa8c">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">source_path&lt;/span>&lt;span style="color:#f1fa8c">}&lt;/span>/pika/src/pika_data_distribution.o &lt;span style="color:#f1fa8c">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">51&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">&lt;/span> &lt;span style="color:#f1fa8c">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">source_path&lt;/span>&lt;span style="color:#f1fa8c">}&lt;/span>/pika/src/pika_meta.o &lt;span style="color:#f1fa8c">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">52&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">&lt;/span> &lt;span style="color:#f1fa8c">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">source_path&lt;/span>&lt;span style="color:#f1fa8c">}&lt;/span>/pika/src/pika_cluster.o &lt;span style="color:#f1fa8c">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">53&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">&lt;/span> &lt;span style="color:#f1fa8c">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">source_path&lt;/span>&lt;span style="color:#f1fa8c">}&lt;/span>/pika/third/slash/slash/lib/libslash.a &lt;span style="color:#f1fa8c">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">54&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">&lt;/span> &lt;span style="color:#f1fa8c">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">source_path&lt;/span>&lt;span style="color:#f1fa8c">}&lt;/span>/pika/third/pink/pink/lib/libpink.a &lt;span style="color:#f1fa8c">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">55&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">&lt;/span> &lt;span style="color:#f1fa8c">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">source_path&lt;/span>&lt;span style="color:#f1fa8c">}&lt;/span>/pika/third/blackwidow/lib/libblackwidow.a &lt;span style="color:#f1fa8c">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">56&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">&lt;/span> &lt;span style="color:#f1fa8c">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">source_path&lt;/span>&lt;span style="color:#f1fa8c">}&lt;/span>/pika/third/rocksdb/librocksdb.a &lt;span style="color:#f1fa8c">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">57&lt;/span>&lt;span>&lt;span style="color:#f1fa8c">&lt;/span> &lt;span style="color:#f1fa8c">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">source_path&lt;/span>&lt;span style="color:#f1fa8c">}&lt;/span>/pika/src/pika_zset.o -static-libstdc++ -Wl,-Bstatic -lprotobuf -llz4 -lzstd -llz4 -lglog -lgflags -llzma -lsnappy -Wl,-Bdynamic -lpthread -lrt -lz -lbz2 -Wl,--dynamic-linker&lt;span style="color:#ff79c6">=&lt;/span>/lib64/ld-linux-x86-64.so.2 -o pika
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>-Wl,-Bstatic&lt;/strong> 后面的是要 &lt;strong>静态链接&lt;/strong> 的库&lt;/p>
&lt;p>&lt;strong>-Wl,-Bdynamic&lt;/strong> 后面的是要 &lt;strong>动态链&lt;/strong> 接的库&lt;/p></description></item><item><title>linux 多线程或多进程 epoll处理 accept 导致惊群</title><link>https://lqxhub.github.io/posts/4926d2f3/</link><pubDate>Sun, 22 Aug 2021 00:10:33 +0000</pubDate><guid>https://lqxhub.github.io/posts/4926d2f3/</guid><description>&lt;p>
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-75bcac218baeff46.webp">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-75bcac218baeff46.webp" alt="" />
&lt;/a>
&lt;/div>
&lt;/p>
&lt;h2 id="什么是惊群">&lt;a href="#%e4%bb%80%e4%b9%88%e6%98%af%e6%83%8a%e7%be%a4" class="header-anchor">&lt;/a>什么是惊群
&lt;/h2>&lt;p>简单说，惊群是因为多进程（多线程）在同时阻塞等待同一个事件的时候（休眠状态），当事件发生时，就会唤醒所有等待的（休眠的）进程（线程）。但是事件只能被一个进程或线程处理，而其他进程（线程）获取失败，只能重新进入休眠状态，这种现象和性能浪费就叫做惊群。&lt;a class="link" href="https://zh.wikipedia.org/wiki/%E6%83%8A%E7%BE%A4%E9%97%AE%E9%A2%98" target="_blank" rel="noopener"
>维基百科-惊群&lt;/a>&lt;/p>
&lt;h2 id="产生惊群的条件">&lt;a href="#%e4%ba%a7%e7%94%9f%e6%83%8a%e7%be%a4%e7%9a%84%e6%9d%a1%e4%bb%b6" class="header-anchor">&lt;/a>产生惊群的条件
&lt;/h2>&lt;ol>
&lt;li>多个进程或者多个线程&lt;/li>
&lt;li>同时等待处理一个事件&lt;/li>
&lt;/ol>
&lt;h2 id="具体场景复现">&lt;a href="#%e5%85%b7%e4%bd%93%e5%9c%ba%e6%99%af%e5%a4%8d%e7%8e%b0" class="header-anchor">&lt;/a>具体场景复现
&lt;/h2>&lt;p>测试环境 :&lt;/p>
&lt;ol>
&lt;li>debian11&lt;/li>
&lt;li>内核5.10.0-8&lt;/li>
&lt;li>编译器 clang11&lt;/li>
&lt;/ol>
&lt;p>多线程和多进程在惊群问题上差不多，为了少些一点，下文中没有特殊说明，多线程 也包含了多进程&lt;/p>
&lt;p>在linux中，使用C/C++ 编写 tcp server时，会依次调用 &lt;code>socket()&lt;/code> &lt;code>bind()&lt;/code> &lt;code>listen()&lt;/code> &lt;code>accept()&lt;/code> 这几个函数，这几个函数会打开socket，绑定ip和端口，开始监听端口，accept函数会阻塞当前进程，等待客户端连接。&lt;/p>
&lt;p>如果在单线程中，只有一个accept函数在等待客户端连接，当客户端来连接的时候，只会有一个accept函数来处理，所以也不会存在惊群问题了。&lt;/p>
&lt;p>在多线模型中，多个线程分别accept同一个socket，当有客户端连接时，内核会通知所有的线程来处理这个请求，但是呢，请求只能被一个线程处理，其他的线程的不到这个事件，只能白白被唤醒。&lt;/p>
&lt;p>这是最简单的一种惊群，这种情况在linux2.6以后就不会产生了。因为在Linux 2.6 版本之后，通过引入一个标记位 WQ_FLAG_EXCLUSIVE，解决掉了 Accept 惊群效应。我原本还想在centos3.9（内核版本是2.5）中去复现这种情况，但是折腾了好久，也没能在centos上编译也运行C++程序，遂放弃。
不废话了，上代码，测试第一种情况&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;netinet/in.h&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;sys/epoll.h&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;thread&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;mutex&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;condition_variable&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span>&lt;span style="color:#ff79c6">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#define WORKER_THREAD 4
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span>&lt;span style="color:#ff79c6">&lt;/span>&lt;span style="color:#6272a4">//创建socket，并返回fd
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">createSocket&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> fd &lt;span style="color:#ff79c6">=&lt;/span> socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (fd &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;create socket error&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span> sockaddr_in sockAddr{};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>&lt;span> sockAddr.sin_port &lt;span style="color:#ff79c6">=&lt;/span> htons(PORT);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20&lt;/span>&lt;span> sockAddr.sin_family &lt;span style="color:#ff79c6">=&lt;/span> AF_INET;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21&lt;/span>&lt;span> sockAddr.sin_addr.s_addr &lt;span style="color:#ff79c6">=&lt;/span> htons(INADDR_ANY);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (bind(fd, (sockaddr &lt;span style="color:#ff79c6">*&lt;/span>) &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>sockAddr, &lt;span style="color:#ff79c6">sizeof&lt;/span>(sockAddr)) &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;bind socket error, port:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> PORT &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (listen(fd, &lt;span style="color:#bd93f9">100&lt;/span>) &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;listen port error&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> fd;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35&lt;/span>&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">Worker1&lt;/span>(&lt;span style="color:#8be9fd">int&lt;/span> socketFd, &lt;span style="color:#8be9fd">int&lt;/span> k) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34; Worker&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> k &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34; run &amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37&lt;/span>&lt;span> &lt;span style="color:#ff79c6">while&lt;/span> (&lt;span style="color:#8be9fd;font-style:italic">true&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> tfd &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39&lt;/span>&lt;span> sockaddr_in cli_addr{};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40&lt;/span>&lt;span> socklen_t length &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">sizeof&lt;/span>(cli_addr);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41&lt;/span>&lt;span> tfd &lt;span style="color:#ff79c6">=&lt;/span> accept(socketFd, (sockaddr &lt;span style="color:#ff79c6">*&lt;/span>) &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>cli_addr, &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>length);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;worker&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> k &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34; in &amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (tfd &lt;span style="color:#ff79c6">&amp;lt;=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">44&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;accept error&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">45&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">46&lt;/span>&lt;span> } &lt;span style="color:#ff79c6">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">47&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;worker&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> k &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34; accept &amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">48&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">49&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">50&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">51&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">52&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">53&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>mutex mutex;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">54&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>unique_lock&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>std&lt;span style="color:#ff79c6">::&lt;/span>mutex&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> lck(mutex);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">55&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>condition_variable cv;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">56&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">57&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> fd &lt;span style="color:#ff79c6">=&lt;/span> createSocket();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">58&lt;/span>&lt;span> &lt;span style="color:#6272a4">//第一种,多个线程不使用多路复用,accept同一个socket
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">59&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#ff79c6">for&lt;/span> (&lt;span style="color:#8be9fd">int&lt;/span> i &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>; i &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> WORKER_THREAD; &lt;span style="color:#ff79c6">++&lt;/span>i) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">60&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>&lt;span style="color:#ff79c6">thread&lt;/span> th(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>Worker1, fd, i &lt;span style="color:#ff79c6">+&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">61&lt;/span>&lt;span> th.detach();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">62&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">63&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">64&lt;/span>&lt;span> cv.wait(lck);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">65&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">66&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这代码可以用C写，但是习惯用C++了，就用C++写吧。代码也比较简单，&lt;code>createSocket()&lt;/code>创建了一个socket，然后4个线程分别去accept这个socket。
下面是运行结果：
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-c48c3f0cd5d7d843.webp">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-c48c3f0cd5d7d843.webp" alt="" />
&lt;/a>
&lt;/div>
&lt;/p>
&lt;p>可以看到，4个线程都在运行，并且accept，但是当连接来的时候，只有个线程能得到事件。&lt;/p>
&lt;p>既然linux内核已经帮我们处理了惊群，那我们还考虑这些干啥，直接用不就完了。&lt;/p>
&lt;p>但是，我们在写代码的时候一般不会直接阻塞accept的，都是使用多路复用来帮我们处理连接阻塞的是多路复用函数。目前综合性能比较好的IO多路复用是epoll。当在多线程中使用epoll时，惊群问题就会出现了。
先代码和结果，然后再解释&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;netinet/in.h&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;sys/epoll.h&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;thread&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;mutex&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;condition_variable&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span>&lt;span style="color:#ff79c6">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#define WORKER_THREAD 4
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span>&lt;span style="color:#ff79c6">&lt;/span>&lt;span style="color:#6272a4">//创建socket，并返回fd
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">createSocket&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> fd &lt;span style="color:#ff79c6">=&lt;/span> socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (fd &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;create socket error&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span> sockaddr_in sockAddr{};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>&lt;span> sockAddr.sin_port &lt;span style="color:#ff79c6">=&lt;/span> htons(PORT);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20&lt;/span>&lt;span> sockAddr.sin_family &lt;span style="color:#ff79c6">=&lt;/span> AF_INET;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21&lt;/span>&lt;span> sockAddr.sin_addr.s_addr &lt;span style="color:#ff79c6">=&lt;/span> htons(INADDR_ANY);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (bind(fd, (sockaddr &lt;span style="color:#ff79c6">*&lt;/span>) &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>sockAddr, &lt;span style="color:#ff79c6">sizeof&lt;/span>(sockAddr)) &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;bind socket error, port:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> PORT &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (listen(fd, &lt;span style="color:#bd93f9">100&lt;/span>) &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;listen port error&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> fd;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35&lt;/span>&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">Worker2&lt;/span>(&lt;span style="color:#8be9fd">int&lt;/span> socketFd, &lt;span style="color:#8be9fd">int&lt;/span> k) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34; Worker&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> k &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34; run &amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> eFd &lt;span style="color:#ff79c6">=&lt;/span> epoll_create(&lt;span style="color:#bd93f9">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (eFd &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;create epoll fail&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43&lt;/span>&lt;span> epoll_event epev_{};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">44&lt;/span>&lt;span> epev_.events &lt;span style="color:#ff79c6">=&lt;/span> EPOLLIN;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">45&lt;/span>&lt;span> epev_.data.fd &lt;span style="color:#ff79c6">=&lt;/span> socketFd;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">46&lt;/span>&lt;span> epoll_ctl(eFd, EPOLL_CTL_ADD, socketFd, &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>epev_);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">47&lt;/span>&lt;span> epoll_event events[EVENT_NUM];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">48&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">49&lt;/span>&lt;span> &lt;span style="color:#ff79c6">while&lt;/span> (&lt;span style="color:#8be9fd;font-style:italic">true&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">50&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> eNum &lt;span style="color:#ff79c6">=&lt;/span> epoll_wait(eFd, events, EVENT_NUM, &lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">51&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (eNum &lt;span style="color:#ff79c6">==&lt;/span> &lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">52&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;epoll error&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">53&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">54&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">55&lt;/span>&lt;span> &lt;span style="color:#6272a4">//一定要加上这句,防止事件被瞬间处理,导致看不到结果
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">56&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>this_thread&lt;span style="color:#ff79c6">::&lt;/span>sleep_for((std&lt;span style="color:#ff79c6">::&lt;/span>chrono&lt;span style="color:#ff79c6">::&lt;/span>seconds (&lt;span style="color:#bd93f9">1&lt;/span>)));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">57&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;worker&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> k &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34; in &amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">58&lt;/span>&lt;span> &lt;span style="color:#ff79c6">for&lt;/span> (&lt;span style="color:#8be9fd">int&lt;/span> i &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>; i &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> eNum; &lt;span style="color:#ff79c6">++&lt;/span>i) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">59&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (events[i].data.fd &lt;span style="color:#ff79c6">==&lt;/span> socketFd) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">60&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> tfd &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">61&lt;/span>&lt;span> sockaddr_in cli_addr{};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">62&lt;/span>&lt;span> socklen_t length &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">sizeof&lt;/span>(cli_addr);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">63&lt;/span>&lt;span> tfd &lt;span style="color:#ff79c6">=&lt;/span> accept(socketFd, (sockaddr &lt;span style="color:#ff79c6">*&lt;/span>) &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>cli_addr, &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>length);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">64&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (tfd &lt;span style="color:#ff79c6">&amp;lt;=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">65&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;accept error&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">66&lt;/span>&lt;span> } &lt;span style="color:#ff79c6">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">67&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;worker&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> k &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34; accept &amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">68&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">69&lt;/span>&lt;span> } &lt;span style="color:#ff79c6">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">70&lt;/span>&lt;span> &lt;span style="color:#6272a4">//处理正常的socket读写事件,这里可以忽略,不是这次关注的点
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">71&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">72&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">73&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">74&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">75&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">76&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">77&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>mutex mutex;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">78&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>unique_lock&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>std&lt;span style="color:#ff79c6">::&lt;/span>mutex&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> lck(mutex);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">79&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>condition_variable cv;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">80&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> fd &lt;span style="color:#ff79c6">=&lt;/span> createSocket();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">81&lt;/span>&lt;span> &lt;span style="color:#6272a4">//第二种,多个线程使用epoll多路复用,accept同一个socket
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">82&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#ff79c6">for&lt;/span> (&lt;span style="color:#8be9fd">int&lt;/span> i &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>; i &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> WORKER_THREAD; &lt;span style="color:#ff79c6">++&lt;/span>i) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">83&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>&lt;span style="color:#ff79c6">thread&lt;/span> th(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>Worker2, fd, i &lt;span style="color:#ff79c6">+&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">84&lt;/span>&lt;span> th.detach();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">85&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">86&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>结果
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-7e95cb7234b64dc1.webp">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-7e95cb7234b64dc1.webp" alt="" />
&lt;/a>
&lt;/div>
这里可以看到，当有客户端来连接的时候，4个线程都被唤醒了，但是只有workr2 线程成功获取了事件，其余的3个线程都白白唤醒浪费了性能&lt;/p>
&lt;p>为啥内核已经处理了第一种情景下的惊群问题，第二种情景下的惊群问题为啥就不处理了呢？&lt;/p>
&lt;p>我的猜想不一定正确，如果有错误，请指出：&lt;/p>
&lt;blockquote>
&lt;p>accept 只能是被一个进程调用成功（连接事件只会处理一次嘛），所以内核就直接处理了（一个accept只会唤醒一个进程）。但 epoll 不一样，epoll中管理了很多连接，不止socket这一个，除了可能后续被 accept 调用外，还有可能是其他网络 IO 事件的，而其他 IO 事件是否只能由一个进程处理，是不一定的，这是一个由用户决定的事情，例如可能一个文件会由多个进程来读写。所以，对 epoll 默认对于多进程监听同一文件不会设置互斥，所以就导致了epoll惊群问题。&lt;/p>
&lt;/blockquote>
&lt;p>在linux4.5内核之后给epoll添加了一个 &lt;code>EPOLLEXCLUSIVE&lt;/code>的标志位，如果设置了这个标志位，那epoll将进程挂到等待队列时将会设置一下互斥标志位，这时实现跟内核原生accept一样的特性，只会唤醒队列中的一个进程。&lt;a class="link" href="https://segmentfault.com/a/1190000039676522" target="_blank" rel="noopener"
>参考资料&lt;/a> 感谢这位大神的文章&lt;/p>
&lt;p>修改一下worker2函数:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">Worker2&lt;/span>(&lt;span style="color:#8be9fd">int&lt;/span> socketFd, &lt;span style="color:#8be9fd">int&lt;/span> k) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34; Worker&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> k &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34; run &amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> eFd &lt;span style="color:#ff79c6">=&lt;/span> epoll_create(&lt;span style="color:#bd93f9">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (eFd &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;create epoll fail&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span> epoll_event epev_{};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span> &lt;span style="color:#6272a4">//给epoll加上 互斥标志
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> epev_.events &lt;span style="color:#ff79c6">=&lt;/span> EPOLLIN &lt;span style="color:#ff79c6">|&lt;/span> EPOLLEXCLUSIVE;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span> epev_.data.fd &lt;span style="color:#ff79c6">=&lt;/span> socketFd;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span> epoll_ctl(eFd, EPOLL_CTL_ADD, socketFd, &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>epev_);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span> epoll_event events[EVENT_NUM];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span> &lt;span style="color:#ff79c6">while&lt;/span> (&lt;span style="color:#8be9fd;font-style:italic">true&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> eNum &lt;span style="color:#ff79c6">=&lt;/span> epoll_wait(eFd, events, EVENT_NUM, &lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (eNum &lt;span style="color:#ff79c6">==&lt;/span> &lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;epoll error&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22&lt;/span>&lt;span> &lt;span style="color:#6272a4">//一定要加上这句,防止事件被瞬间处理,导致看不到结果
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>this_thread&lt;span style="color:#ff79c6">::&lt;/span>sleep_for((std&lt;span style="color:#ff79c6">::&lt;/span>chrono&lt;span style="color:#ff79c6">::&lt;/span>seconds(&lt;span style="color:#bd93f9">1&lt;/span>)));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;worker&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> k &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34; in &amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25&lt;/span>&lt;span> &lt;span style="color:#ff79c6">for&lt;/span> (&lt;span style="color:#8be9fd">int&lt;/span> i &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>; i &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> eNum; &lt;span style="color:#ff79c6">++&lt;/span>i) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (events[i].data.fd &lt;span style="color:#ff79c6">==&lt;/span> socketFd) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> tfd &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28&lt;/span>&lt;span> sockaddr_in cli_addr{};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29&lt;/span>&lt;span> socklen_t length &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">sizeof&lt;/span>(cli_addr);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30&lt;/span>&lt;span> tfd &lt;span style="color:#ff79c6">=&lt;/span> accept(socketFd, (sockaddr &lt;span style="color:#ff79c6">*&lt;/span>) &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>cli_addr, &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>length);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (tfd &lt;span style="color:#ff79c6">&amp;lt;=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;accept error&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33&lt;/span>&lt;span> } &lt;span style="color:#ff79c6">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;worker&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> k &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34; accept &amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36&lt;/span>&lt;span> } &lt;span style="color:#ff79c6">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37&lt;/span>&lt;span> &lt;span style="color:#6272a4">//处理正常的socket读写事件,这里可以忽略,不是这次关注的点
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>现在来测试一下
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-5b7fb90f54f0e9d8.webp">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-5b7fb90f54f0e9d8.webp" alt="" />
&lt;/a>
&lt;/div>
现在的epoll已经不会有惊群问题了&lt;/p>
&lt;h2 id="另一种方式">&lt;a href="#%e5%8f%a6%e4%b8%80%e7%a7%8d%e6%96%b9%e5%bc%8f" class="header-anchor">&lt;/a>另一种方式
&lt;/h2>&lt;p>其实解决多线程使用epoll等多路复用导致的惊群问题，还有一个更彻底解决方法，让每个线程分别打开一个socket，并且这些socket绑定在同一个端口，然后accept这个socket。这就像第一种情景那样，内核直接帮我们做了惊群处理。这里会使用到 linux 3.9后 socket提供&lt;code>SO_REUSEPORT&lt;/code>标志。使用这个标志后，会允许多个socket绑定和监听同一个端口。
代码如下&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;netinet/in.h&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;sys/epoll.h&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;thread&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;mutex&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;condition_variable&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span>&lt;span style="color:#ff79c6">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#define WORKER_THREAD 4
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span>&lt;span style="color:#ff79c6">&lt;/span>&lt;span style="color:#6272a4">//创建socket，并返回fd
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">createSocket2&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> fd &lt;span style="color:#ff79c6">=&lt;/span> socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (fd &lt;span style="color:#ff79c6">==&lt;/span> &lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;create socket error&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> on &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (setsockopt(fd, SOL_SOCKET, SO_REUSEPORT, (&lt;span style="color:#ff79c6">const&lt;/span> &lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>) &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>on, &lt;span style="color:#ff79c6">sizeof&lt;/span>(on)) &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;set opt error, ret:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23&lt;/span>&lt;span> sockaddr_in sockAddr{};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24&lt;/span>&lt;span> sockAddr.sin_port &lt;span style="color:#ff79c6">=&lt;/span> htons(PORT);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25&lt;/span>&lt;span> sockAddr.sin_family &lt;span style="color:#ff79c6">=&lt;/span> AF_INET;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26&lt;/span>&lt;span> sockAddr.sin_addr.s_addr &lt;span style="color:#ff79c6">=&lt;/span> htons(INADDR_ANY);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (bind(fd, (sockaddr &lt;span style="color:#ff79c6">*&lt;/span>) &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>sockAddr, &lt;span style="color:#ff79c6">sizeof&lt;/span>(sockAddr)) &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;bind socket error, port:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> PORT &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (listen(fd, &lt;span style="color:#bd93f9">100&lt;/span>) &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;listen port error&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> fd;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40&lt;/span>&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">Worker3&lt;/span>(&lt;span style="color:#8be9fd">int&lt;/span> k) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34; Worker&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> k &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34; run &amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> socketFd &lt;span style="color:#ff79c6">=&lt;/span> createSocket2();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">44&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> eFd &lt;span style="color:#ff79c6">=&lt;/span> epoll_create(&lt;span style="color:#bd93f9">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">45&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (eFd &lt;span style="color:#ff79c6">==&lt;/span> &lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">46&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;create epoll fail&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">47&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">48&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">49&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">50&lt;/span>&lt;span> epoll_event epev_{};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">51&lt;/span>&lt;span> epev_.events &lt;span style="color:#ff79c6">=&lt;/span> EPOLLIN;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">52&lt;/span>&lt;span> epev_.data.fd &lt;span style="color:#ff79c6">=&lt;/span> socketFd;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">53&lt;/span>&lt;span> epoll_ctl(eFd, EPOLL_CTL_ADD, socketFd, &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>epev_);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">54&lt;/span>&lt;span> epoll_event events[EVENT_NUM];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">55&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">56&lt;/span>&lt;span> &lt;span style="color:#ff79c6">while&lt;/span> (&lt;span style="color:#8be9fd;font-style:italic">true&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">57&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> eNum &lt;span style="color:#ff79c6">=&lt;/span> epoll_wait(eFd, events, EVENT_NUM, &lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">58&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (eNum &lt;span style="color:#ff79c6">==&lt;/span> &lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">59&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;epoll error&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">60&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">61&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">62&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>this_thread&lt;span style="color:#ff79c6">::&lt;/span>sleep_for((std&lt;span style="color:#ff79c6">::&lt;/span>chrono&lt;span style="color:#ff79c6">::&lt;/span>seconds(&lt;span style="color:#bd93f9">1&lt;/span>)));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">63&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;worker&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> k &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34; in &amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">64&lt;/span>&lt;span> &lt;span style="color:#ff79c6">for&lt;/span> (&lt;span style="color:#8be9fd">int&lt;/span> i &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>; i &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> eNum; &lt;span style="color:#ff79c6">++&lt;/span>i) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">65&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (events[i].data.fd &lt;span style="color:#ff79c6">==&lt;/span> socketFd) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">66&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> tfd &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">67&lt;/span>&lt;span> sockaddr_in cli_addr{};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">68&lt;/span>&lt;span> socklen_t length &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">sizeof&lt;/span>(cli_addr);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">69&lt;/span>&lt;span> tfd &lt;span style="color:#ff79c6">=&lt;/span> accept(socketFd, (sockaddr &lt;span style="color:#ff79c6">*&lt;/span>) &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>cli_addr, &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>length);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">70&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (tfd &lt;span style="color:#ff79c6">&amp;lt;=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">71&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;accept error&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">72&lt;/span>&lt;span> } &lt;span style="color:#ff79c6">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">73&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;worker&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> k &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34; accept &amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">74&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">75&lt;/span>&lt;span> } &lt;span style="color:#ff79c6">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">76&lt;/span>&lt;span> &lt;span style="color:#6272a4">//处理正常的socket读写事件
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">77&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">78&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">79&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">80&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">81&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">82&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">83&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>mutex mutex;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">84&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>unique_lock&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>std&lt;span style="color:#ff79c6">::&lt;/span>mutex&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> lck(mutex);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">85&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>condition_variable cv;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">86&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">87&lt;/span>&lt;span> &lt;span style="color:#6272a4">//第三种,多个线程使用epoll多路复用,每个线程分别bind,listen 同一个端口, accept各自的socket
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">88&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#ff79c6">for&lt;/span> (&lt;span style="color:#8be9fd">int&lt;/span> i &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>; i &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> WORKER_THREAD; &lt;span style="color:#ff79c6">++&lt;/span>i) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">89&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>&lt;span style="color:#ff79c6">thread&lt;/span> th(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>Worker3, i &lt;span style="color:#ff79c6">+&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">90&lt;/span>&lt;span> th.detach();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">91&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">92&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">93&lt;/span>&lt;span> cv.wait(lck);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">94&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">95&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>结果
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-a210ececf944df66.webp">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-a210ececf944df66.webp" alt="" />
&lt;/a>
&lt;/div>
&lt;/p>
&lt;p>也是没有问题的，多个连接来的时候，只会有一个线程被唤醒，相当于在内核级别中实现了一个负载均衡&lt;/p>
&lt;h2 id="总结">&lt;a href="#%e6%80%bb%e7%bb%93" class="header-anchor">&lt;/a>总结
&lt;/h2>&lt;p>简单总结一下，当多个线程或者进程同时阻塞同一个事件的时候，会出现惊群现象，如果不适用epoll等多路复用技术，在linux2.6 以后内核已经帮我们处理了惊群问题。&lt;/p>
&lt;p>如果使用了epoll，就需要额外处理epoll导致的惊群问题，有两种方式&lt;/p>
&lt;ol>
&lt;li>linux4.5内核之后，epoll有一个&lt;code>EPOLLEXCLUSIVE&lt;/code>特性，可以防止epoll惊群出现&lt;/li>
&lt;li>linux 3.9内核之后给 socket 提供&lt;code>SO_REUSEPORT&lt;/code>特性，可以允许多个socket绑定在同一个端口上，相当于每个线程都有一个socket，在处理accept时，内核会自动处理惊群问题&lt;/li>
&lt;/ol>
&lt;p>1和2两种方式都能有效解决惊群问题，但是目前使用 socket的 &lt;code>SO_REUSEPORT&lt;/code> 是最好的方式.。&lt;/p>
&lt;p>我通过查资料得到 &lt;code> EPOLLEXCLUSIVE&lt;/code> 标识会保证一个事件发生时候只有一个线程会被唤醒，来避免多惊群问题。不过任一时候只能有一个Worker调用 accept，限制了真正并行的吞吐量。
这个有待验证，等我有时间再去深入了解一下。&lt;/p>
&lt;p>&lt;a class="link" href="https://gitee.com/lqxlucky/linux_socket_test1" target="_blank" rel="noopener"
>测试demo&lt;/a>&lt;/p></description></item><item><title>linux下 C++ 使用 epoll 多路复用 实现高性能的tcpserver</title><link>https://lqxhub.github.io/posts/91655bdf/</link><pubDate>Sun, 14 Mar 2021 13:58:35 +0000</pubDate><guid>https://lqxhub.github.io/posts/91655bdf/</guid><description>&lt;p>linux系统中，实现socket多路复用的技术有&lt;strong>select&lt;/strong> 、&lt;strong>poll&lt;/strong> 、&lt;strong>epoll&lt;/strong> 等多种方式。这些不同方式个有优缺点和适用场景，这不是本文讨论的重点，又兴趣的可以自己搜索学习一下。但是在高并发场景下， &lt;strong>epoll&lt;/strong> 性能是最高的， &lt;strong>Nginx&lt;/strong> 都听说过吧，大名鼎鼎的&lt;strong>Nginx&lt;/strong> 底层用的就是 &lt;strong>epoll&lt;/strong>。&lt;/p>
&lt;p>这篇文章主要是写怎么用 epoll，而不是原理分析。这篇文章不是最全的，也不是最深入的，但是绝对是一篇能让普通人看懂的，看完能自己用epoll写出一个tcpserver的文章。全废话不多说，直接开始搞&lt;/p>
&lt;p>首先明确一点，epoll 是linux系统提供的系统调用，也就说，epoll 在Windows系统上是没法使用的，相应的代码也是没法编译的。如果有人知道怎么在Windows中编译，请赐教。&lt;/p>
&lt;h2 id="工具">&lt;a href="#%e5%b7%a5%e5%85%b7" class="header-anchor">&lt;/a>工具
&lt;/h2>&lt;p>文中使用的开发环境&lt;/p>
&lt;ol>
&lt;li>系统: &lt;code>Debian GNU/Linux 10 (buster)&lt;/code>&lt;/li>
&lt;li>linux内核: &lt;code>4.19.0-14&lt;/code>&lt;/li>
&lt;li>gcc版本: &lt;code>8.3.0&lt;/code>&lt;/li>
&lt;/ol>
&lt;h2 id="准备知识">&lt;a href="#%e5%87%86%e5%a4%87%e7%9f%a5%e8%af%86" class="header-anchor">&lt;/a>准备知识
&lt;/h2>&lt;p>epoll是linux内核提供的功能，这个功能对外提供系统调用，在C/C++中通过三个函数对用户提供功能&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;code>epoll_create(int __size)&lt;/code> 创建一个epoll，&lt;strong>_size&lt;/strong> 参数在linux2.6内核之后就没有什么作用了, 但是要&amp;gt;0，一般直接填 &lt;strong>1&lt;/strong> 就好了。函数返回创建的epoll的文件描述符，如果创建失败，会返回 -1。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>epoll_ctl(nt __epfd, int __op, int __fd,struct epoll_event *__event)&lt;/code> 操作已有的epoll,&lt;strong>epfd&lt;/strong>epoll的文件描述符；&lt;strong>op&lt;/strong>操作方式，有添加、删除、修改等等；&lt;strong>_fd&lt;/strong> 要操作对象的描述符，如果是操作tcp连接，也会就是这个连接的描述符。&lt;strong>_event&lt;/strong> epoll 的响应事件，当epoll管理的tcp连接有事件发生时，会通过 _event 这个对象传递出来，所以在添加连接时，要把这个连接包装成一个 &lt;strong>epoll_event&lt;/strong> 对象 &lt;/br>&lt;/p>
&lt;ul>
&lt;li>op 类型&lt;/li>
&lt;li>&lt;strong>EPOLL_CTL_ADD&lt;/strong> 添加一个描述符&lt;/li>
&lt;li>&lt;strong>EPOLL_CTL_DEL&lt;/strong> 删除一个描述符&lt;/li>
&lt;li>&lt;strong>EPOLL_CTL_MOD&lt;/strong> 修改一个描述符&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>epoll_wait(int __epfd, struct epoll_event *__events,int __maxevents, int __timeout)&lt;/code> 当epoll管理的连接中有响应事件发生时,会回调这个函数。&lt;strong>epfd&lt;/strong>epoll的文件描述符；&lt;strong>__events&lt;/strong> 可以操作的连接数组；&lt;strong>__maxevents&lt;/strong> 一个可以处理的最大事件数量；&lt;strong>__timeout&lt;/strong> 超时时间（单位毫秒），如果填-1，会直到有可操作事件发生时才会返回，因为C++不支持函数多返回值，像Go可以直接返回所有事件和数量了 (╥╯^╰╥)。&lt;br>&lt;/p>
&lt;p>events 中的常用的类型：&lt;br>&lt;/p>
&lt;ul>
&lt;li>EPOLLIN ：表示对应的文件描述符可以读（SOCKET正常关闭）&lt;/li>
&lt;li>EPOLLOUT：表示对应的文件描述符可以写&lt;/li>
&lt;li>EPOLLPRI：表示对应的文件描述符有紧急的数据可读（表示有带外数据到来）&lt;/li>
&lt;li>EPOLLERR：表示对应的文件描述符发生错误(默认注册)&lt;/li>
&lt;li>EPOLLHUP：表示对应的文件描述符被挂断(默认注册)&lt;/li>
&lt;li>EPOLLET： 将EPOLL设为边缘触发(Edge Triggered)模式，这是相对于水平触发(Level Triggered)来说的&lt;/li>
&lt;li>EPOLLONESHOT：只监听一次事件，当监听完这次事件之后，如果还需要继续监听这个socket的话，需要再次把这个socket加入到EPOLL队列里
是不是很惊奇，这么牛逼的epoll就三个函数，第一次看到的时候我也觉得很奇怪，三个函数就能搞定那么复杂的事情。不过想想也是，把复杂的东西简化，才能体现出大神的实力&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="epoll的两种模式">&lt;a href="#epoll%e7%9a%84%e4%b8%a4%e7%a7%8d%e6%a8%a1%e5%bc%8f" class="header-anchor">&lt;/a>epoll的两种模式
&lt;/h3>&lt;p>epoll 事件有两种模型 &lt;strong>Level Triggered&lt;/strong> (LT) 和 &lt;strong>Edge Triggered&lt;/strong> (ET)：&lt;/br>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>LT(level triggered，水平触发模式)是默认的工作方式，并且同时支持 block 和 non-block socket。在这种做法中，内核告诉你一个文件描述符是否就绪了，然后你可以对这个就绪的fd进行IO操作。如果你不作任何操作，内核还是会继续通知你的，所以，这种模式编程出错误可能性要小一点。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ET(edge-triggered，边缘触发模式)是高速工作方式，只支持no-block socket。在这种模式下，当描述符从未就绪变为就绪时，内核通过epoll告诉你。然后它会假设你知道文件描述符已经就绪，并且不会再为那个文件描述符发送更多的就绪通知，等到下次有新的数据进来的时候才会再次出发就绪事件。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>把socket设置为非阻塞模式的方法&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> flags &lt;span style="color:#ff79c6">=&lt;/span> fcntl(fd, F_GETFL, &lt;span style="color:#bd93f9">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span>fcntl(fd, F_SETFL, flags &lt;span style="color:#ff79c6">|&lt;/span> O_NONBLOCK);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>需要的头文件 &lt;code>#include &amp;lt;fcntl.h&amp;gt;&lt;/code>&lt;/p>
&lt;h2 id="epoll原理">&lt;a href="#epoll%e5%8e%9f%e7%90%86" class="header-anchor">&lt;/a>epoll原理
&lt;/h2>&lt;p>简单通过画图解释一下epoll的工作原理
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-cb78a80f112544ea.webp">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-cb78a80f112544ea.webp" alt="" />
&lt;/a>
&lt;/div>
&lt;/p>
&lt;p>这里没有涉及太底层的东西，因为太底层的我也没研究过，不敢乱讲。知之为知之，不知为不知。&lt;/br>
epoll可以看做是一个由操作系统提供的容器，这个容器管理了一些 &lt;strong>epoll_event&lt;/strong> （图中我画成单向链表了，实际上用的是红黑树，因为画树太麻烦了），这个event是我们添加进去的，event中设置了要响应的事件类型，当epoll 检测到具体的 event 有对应的事件发生时，会通过&lt;strong>epoll_wait()&lt;/strong> 通知。&lt;/p>
&lt;h2 id="简单的epoll实现">&lt;a href="#%e7%ae%80%e5%8d%95%e7%9a%84epoll%e5%ae%9e%e7%8e%b0" class="header-anchor">&lt;/a>简单的epoll实现
&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#6272a4">//控制台输出
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;sys/socket.h&amp;gt;&lt;/span>&lt;span style="color:#6272a4">//创建socket
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;netinet/in.h&amp;gt;&lt;/span>&lt;span style="color:#6272a4">//socket addr
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;sys/epoll.h&amp;gt;&lt;/span>&lt;span style="color:#6272a4">//epoll
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span style="color:#6272a4">//close函数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;fcntl.h&amp;gt;&lt;/span>&lt;span style="color:#6272a4">//设置非阻塞
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span>&lt;span style="color:#ff79c6">using&lt;/span> &lt;span style="color:#ff79c6">namespace&lt;/span> std;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 10&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 11&lt;/span>&lt;span> &lt;span style="color:#ff79c6">const&lt;/span> &lt;span style="color:#8be9fd">int&lt;/span> EVENTS_SIZE &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">20&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 12&lt;/span>&lt;span> &lt;span style="color:#6272a4">//读socket的数组
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 13&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#8be9fd">char&lt;/span> buff[&lt;span style="color:#bd93f9">1024&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 14&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 15&lt;/span>&lt;span> &lt;span style="color:#6272a4">//创建一个tcp socket
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 16&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#8be9fd">int&lt;/span> socketFd &lt;span style="color:#ff79c6">=&lt;/span> socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 17&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 18&lt;/span>&lt;span> &lt;span style="color:#6272a4">//设置socket监听的地址和端口
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 19&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> sockaddr_in sockAddr{};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 20&lt;/span>&lt;span> sockAddr.sin_port &lt;span style="color:#ff79c6">=&lt;/span> htons(&lt;span style="color:#bd93f9">8088&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 21&lt;/span>&lt;span> sockAddr.sin_family &lt;span style="color:#ff79c6">=&lt;/span> AF_INET;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 22&lt;/span>&lt;span> sockAddr.sin_addr.s_addr &lt;span style="color:#ff79c6">=&lt;/span> htons(INADDR_ANY);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 23&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 24&lt;/span>&lt;span> &lt;span style="color:#6272a4">//将socket和地址绑定
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 25&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#ff79c6">if&lt;/span> (bind(socketFd, (sockaddr &lt;span style="color:#ff79c6">*&lt;/span>) &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>sockAddr, &lt;span style="color:#ff79c6">sizeof&lt;/span>(sockAddr)) &lt;span style="color:#ff79c6">==&lt;/span> &lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 26&lt;/span>&lt;span> cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;bind error&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 27&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 28&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 29&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 30&lt;/span>&lt;span> &lt;span style="color:#6272a4">//开始监听socket,当调用listen之后,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 31&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#6272a4">//进程就可以调用accept来接受一个外来的请求
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 32&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#6272a4">//第二个参数,请求队列的长度
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 33&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#ff79c6">if&lt;/span> (listen(socketFd, &lt;span style="color:#bd93f9">10&lt;/span>) &lt;span style="color:#ff79c6">==&lt;/span> &lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 34&lt;/span>&lt;span> cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;listen error&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 35&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 36&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 37&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 38&lt;/span>&lt;span> &lt;span style="color:#6272a4">//创建一个epoll,size已经不起作用了,一般填1就好了
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 39&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#8be9fd">int&lt;/span> eFd &lt;span style="color:#ff79c6">=&lt;/span> epoll_create(&lt;span style="color:#bd93f9">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 40&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 41&lt;/span>&lt;span> &lt;span style="color:#6272a4">//把socket包装成一个epoll_event对象
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 42&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#6272a4">//并添加到epoll中
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 43&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> epoll_event epev{};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 44&lt;/span>&lt;span> epev.events &lt;span style="color:#ff79c6">=&lt;/span> EPOLLIN;&lt;span style="color:#6272a4">//可以响应的事件,这里只响应可读就可以了
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 45&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> epev.data.fd &lt;span style="color:#ff79c6">=&lt;/span> socketFd;&lt;span style="color:#6272a4">//socket的文件描述符
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 46&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> epoll_ctl(eFd, EPOLL_CTL_ADD, socketFd, &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>epev);&lt;span style="color:#6272a4">//添加到epoll中
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 47&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 48&lt;/span>&lt;span> &lt;span style="color:#6272a4">//回调事件的数组,当epoll中有响应事件时,通过这个数组返回
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 49&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> epoll_event events[EVENTS_SIZE];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 50&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 51&lt;/span>&lt;span> &lt;span style="color:#6272a4">//整个epoll_wait 处理都要在一个死循环中处理
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 52&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#ff79c6">while&lt;/span> (&lt;span style="color:#8be9fd;font-style:italic">true&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 53&lt;/span>&lt;span> &lt;span style="color:#6272a4">//这个函数会阻塞,直到超时或者有响应事件发生
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 54&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#8be9fd">int&lt;/span> eNum &lt;span style="color:#ff79c6">=&lt;/span> epoll_wait(eFd, events, EVENTS_SIZE, &lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 55&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 56&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (eNum &lt;span style="color:#ff79c6">==&lt;/span> &lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 57&lt;/span>&lt;span> cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;epoll_wait&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 58&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 59&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 60&lt;/span>&lt;span> &lt;span style="color:#6272a4">//遍历所有的事件
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 61&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#ff79c6">for&lt;/span> (&lt;span style="color:#8be9fd">int&lt;/span> i &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>; i &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> eNum; i&lt;span style="color:#ff79c6">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 62&lt;/span>&lt;span> &lt;span style="color:#6272a4">//判断这次是不是socket可读(是不是有新的连接)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 63&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#ff79c6">if&lt;/span> (events[i].data.fd &lt;span style="color:#ff79c6">==&lt;/span> socketFd) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 64&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (events[i].events &lt;span style="color:#ff79c6">&amp;amp;&lt;/span> EPOLLIN) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 65&lt;/span>&lt;span> sockaddr_in cli_addr{};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 66&lt;/span>&lt;span> socklen_t length &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">sizeof&lt;/span>(cli_addr);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 67&lt;/span>&lt;span> &lt;span style="color:#6272a4">//接受来自socket连接
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 68&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#8be9fd">int&lt;/span> fd &lt;span style="color:#ff79c6">=&lt;/span> accept(socketFd, (sockaddr &lt;span style="color:#ff79c6">*&lt;/span>) &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>cli_addr, &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>length);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 69&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (fd &lt;span style="color:#ff79c6">&amp;gt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 70&lt;/span>&lt;span> &lt;span style="color:#6272a4">//设置响应事件,设置可读和边缘(ET)模式
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 71&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#6272a4">//很多人会把可写事件(EPOLLOUT)也注册了,后面会解释
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 72&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> epev.events &lt;span style="color:#ff79c6">=&lt;/span> EPOLLIN &lt;span style="color:#ff79c6">|&lt;/span> EPOLLET;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 73&lt;/span>&lt;span> epev.data.fd &lt;span style="color:#ff79c6">=&lt;/span> fd;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 74&lt;/span>&lt;span> &lt;span style="color:#6272a4">//设置连接为非阻塞模式
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 75&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#8be9fd">int&lt;/span> flags &lt;span style="color:#ff79c6">=&lt;/span> fcntl(fd, F_GETFL, &lt;span style="color:#bd93f9">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 76&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (flags &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 77&lt;/span>&lt;span> cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;set no block error, fd:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> fd &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 78&lt;/span>&lt;span> &lt;span style="color:#ff79c6">continue&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 79&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 80&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (fcntl(fd, F_SETFL, flags &lt;span style="color:#ff79c6">|&lt;/span> O_NONBLOCK) &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 81&lt;/span>&lt;span> cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;set no block error, fd:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> fd &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 82&lt;/span>&lt;span> &lt;span style="color:#ff79c6">continue&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 83&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 84&lt;/span>&lt;span> &lt;span style="color:#6272a4">//将新的连接添加到epoll中
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 85&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> epoll_ctl(eFd, EPOLL_CTL_ADD, fd, &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>epev);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 86&lt;/span>&lt;span> cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;client on line fd:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> fd &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 87&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 88&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 89&lt;/span>&lt;span> } &lt;span style="color:#ff79c6">else&lt;/span> {&lt;span style="color:#6272a4">//不是socket的响应事件
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 90&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 91&lt;/span>&lt;span> &lt;span style="color:#6272a4">//判断是不是断开和连接出错
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 92&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#6272a4">//因为连接断开和出错时,也会响应`EPOLLIN`事件
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 93&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#ff79c6">if&lt;/span> (events[i].events &lt;span style="color:#ff79c6">&amp;amp;&lt;/span> EPOLLERR &lt;span style="color:#ff79c6">||&lt;/span> events[i].events &lt;span style="color:#ff79c6">&amp;amp;&lt;/span> EPOLLHUP) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 94&lt;/span>&lt;span> &lt;span style="color:#6272a4">//出错时,从epoll中删除对应的连接
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 95&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#6272a4">//第一个是要操作的epoll的描述符
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 96&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#6272a4">//因为是删除,所有event参数天null就可以了
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 97&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> epoll_ctl(eFd, EPOLL_CTL_DEL, events[i].data.fd, &lt;span style="color:#ff79c6">nullptr&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 98&lt;/span>&lt;span> cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;client out fd:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> events[i].data.fd &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 99&lt;/span>&lt;span> close(events[i].data.fd);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">100&lt;/span>&lt;span> } &lt;span style="color:#ff79c6">else&lt;/span> &lt;span style="color:#ff79c6">if&lt;/span> (events[i].events &lt;span style="color:#ff79c6">&amp;amp;&lt;/span> EPOLLIN) {&lt;span style="color:#6272a4">//如果是可读事件
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">101&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">102&lt;/span>&lt;span> &lt;span style="color:#6272a4">//如果在windows中,读socket中的数据要用recv()函数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">103&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#8be9fd">int&lt;/span> len &lt;span style="color:#ff79c6">=&lt;/span> read(events[i].data.fd, buff, &lt;span style="color:#ff79c6">sizeof&lt;/span>(buff));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">104&lt;/span>&lt;span> &lt;span style="color:#6272a4">//如果读取数据出错,关闭并从epoll中删除连接
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">105&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#ff79c6">if&lt;/span> (len &lt;span style="color:#ff79c6">==&lt;/span> &lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">106&lt;/span>&lt;span> epoll_ctl(eFd, EPOLL_CTL_DEL, events[i].data.fd, &lt;span style="color:#ff79c6">nullptr&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">107&lt;/span>&lt;span> cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;client out fd:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> events[i].data.fd &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">108&lt;/span>&lt;span> close(events[i].data.fd);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">109&lt;/span>&lt;span> } &lt;span style="color:#ff79c6">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">110&lt;/span>&lt;span> &lt;span style="color:#6272a4">//正常读取,打印读到的数据
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">111&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> buff &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">112&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">113&lt;/span>&lt;span> &lt;span style="color:#6272a4">//向客户端发数据
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">114&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#8be9fd">char&lt;/span> a[] &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;123456&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">115&lt;/span>&lt;span> &lt;span style="color:#6272a4">//如果在windows中,向socket中写数据要用send()函数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">116&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> write(events[i].data.fd, a, &lt;span style="color:#ff79c6">sizeof&lt;/span>(a));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">117&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">118&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">119&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">120&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">121&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">122&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>常见的问题和注意事项在注释中，就单解释一下新连接注册事件的问题吧，很多文章中都会把可写事件也注册进去，像这样&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C++" data-lang="C++">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>sockaddr_in cli_addr{};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>socklen_t length &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">sizeof&lt;/span>(cli_addr);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span>&lt;span style="color:#6272a4">//接受来自socket连接
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>&lt;span style="color:#8be9fd">int&lt;/span> fd &lt;span style="color:#ff79c6">=&lt;/span> accept(socketFd, (sockaddr &lt;span style="color:#ff79c6">*&lt;/span>) &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>cli_addr, &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>length);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span>&lt;span style="color:#ff79c6">if&lt;/span> (fd &lt;span style="color:#ff79c6">&amp;gt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span> epev.events &lt;span style="color:#ff79c6">=&lt;/span> EPOLLIN &lt;span style="color:#ff79c6">|&lt;/span> EPOLLET &lt;span style="color:#ff79c6">|&lt;/span> EPOLLOUT;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span> epev.data.fd &lt;span style="color:#ff79c6">=&lt;/span> fd;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span> epoll_ctl(eFd, EPOLL_CTL_ADD, fd, &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>epev);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span> cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;client on line fd:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> fd &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>但是经过测试，不注册可写事件，直接往socket中写也是可以的&lt;br>
经过查资料得知:&lt;br>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>EPOLLIN&lt;/strong> : 如果状态改变了(比如 从无到有)，只要输入缓冲区可读就会触发&lt;/li>
&lt;li>&lt;strong>EPOLLOUT&lt;/strong> : 如果状态改变了(比如 从满到不满)，只要输出缓冲区可写就会触
如果把可写也注册上，会频繁回调，这里会有很多无用的回调，导致性能下降。
有一种思路，当向socket写失败后（write函数返回值 == -1），注册上 &lt;strong>EPOLLOUT&lt;/strong> 当响应了可写事件后，重新往socket中写数据，写成功后，再取消掉 &lt;strong>EPOLLOUT&lt;/strong>。 这里就不给出示例了&lt;/li>
&lt;/ul>
&lt;h2 id="客户端测试">&lt;a href="#%e5%ae%a2%e6%88%b7%e7%ab%af%e6%b5%8b%e8%af%95" class="header-anchor">&lt;/a>客户端测试
&lt;/h2>&lt;p>这次关注的是服务端实现，客户端就不用C++写了，用Go写了一个client（没别的原因，只是因为Go写起了简单）&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">package&lt;/span> main
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span>&lt;span style="color:#ff79c6">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;net&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;sync&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;time&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">const&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span> MAX_CONN = &lt;span style="color:#bd93f9">10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">func&lt;/span> &lt;span style="color:#50fa7b">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span> &lt;span style="color:#8be9fd;font-style:italic">var&lt;/span> wg sync.WaitGroup
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span> wg.&lt;span style="color:#50fa7b">Add&lt;/span>(&lt;span style="color:#bd93f9">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span> &lt;span style="color:#ff79c6">for&lt;/span> i &lt;span style="color:#ff79c6">:=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>; i &amp;lt; MAX_CONN; i&lt;span style="color:#ff79c6">++&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span> &lt;span style="color:#ff79c6">go&lt;/span> &lt;span style="color:#50fa7b">Conn&lt;/span>(&lt;span style="color:#f1fa8c">&amp;#34;192.168.199.164:8088&amp;#34;&lt;/span>, i)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>&lt;span> time.&lt;span style="color:#50fa7b">Sleep&lt;/span>(time.Millisecond &lt;span style="color:#ff79c6">*&lt;/span> &lt;span style="color:#bd93f9">100&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21&lt;/span>&lt;span> wg.&lt;span style="color:#50fa7b">Wait&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">func&lt;/span> &lt;span style="color:#50fa7b">Conn&lt;/span>(addr &lt;span style="color:#8be9fd">string&lt;/span>, id &lt;span style="color:#8be9fd">int&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25&lt;/span>&lt;span> conn, err &lt;span style="color:#ff79c6">:=&lt;/span> net.&lt;span style="color:#50fa7b">Dial&lt;/span>(&lt;span style="color:#f1fa8c">&amp;#34;tcp&amp;#34;&lt;/span>, addr)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> err &lt;span style="color:#ff79c6">!=&lt;/span> &lt;span style="color:#ff79c6">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27&lt;/span>&lt;span> fmt.&lt;span style="color:#50fa7b">Println&lt;/span>(err)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30&lt;/span>&lt;span> fmt.&lt;span style="color:#50fa7b">Println&lt;/span>(&lt;span style="color:#f1fa8c">&amp;#34;connect &amp;#34;&lt;/span>, id)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31&lt;/span>&lt;span> &lt;span style="color:#ff79c6">go&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">func&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32&lt;/span>&lt;span> buf &lt;span style="color:#ff79c6">:=&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">make&lt;/span>([]&lt;span style="color:#8be9fd">byte&lt;/span>, &lt;span style="color:#bd93f9">1024&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33&lt;/span>&lt;span> &lt;span style="color:#ff79c6">for&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34&lt;/span>&lt;span> n, err &lt;span style="color:#ff79c6">:=&lt;/span> conn.&lt;span style="color:#50fa7b">Read&lt;/span>(buf)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> err &lt;span style="color:#ff79c6">!=&lt;/span> &lt;span style="color:#ff79c6">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36&lt;/span>&lt;span> &lt;span style="color:#ff79c6">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38&lt;/span>&lt;span> fmt.&lt;span style="color:#50fa7b">Println&lt;/span>(id, &lt;span style="color:#f1fa8c">&amp;#34;read: &amp;#34;&lt;/span>, &lt;span style="color:#8be9fd;font-style:italic">string&lt;/span>(buf[:n]))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40&lt;/span>&lt;span> }()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41&lt;/span>&lt;span> time.&lt;span style="color:#50fa7b">Sleep&lt;/span>(time.Second &lt;span style="color:#ff79c6">*&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42&lt;/span>&lt;span> &lt;span style="color:#ff79c6">for&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43&lt;/span>&lt;span> _, err &lt;span style="color:#ff79c6">:=&lt;/span> conn.&lt;span style="color:#50fa7b">Write&lt;/span>([]&lt;span style="color:#8be9fd;font-style:italic">byte&lt;/span>(&lt;span style="color:#f1fa8c">&amp;#34;hello&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">44&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> err &lt;span style="color:#ff79c6">!=&lt;/span> &lt;span style="color:#ff79c6">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">45&lt;/span>&lt;span> &lt;span style="color:#ff79c6">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">46&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">47&lt;/span>&lt;span> time.&lt;span style="color:#50fa7b">Sleep&lt;/span>(time.Second &lt;span style="color:#ff79c6">*&lt;/span> &lt;span style="color:#bd93f9">10&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">48&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">49&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这只是一个测试用的，写的很粗糙，但是不影响使用&lt;/p>
&lt;p>服务端打印信息
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-8fb0e898063f3db7.webp">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-8fb0e898063f3db7.webp" alt="服务端" />
&lt;/a>
&lt;/div>
&lt;/p>
&lt;p>客户端打印信息
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-42cda40faa00d188.webp">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-42cda40faa00d188.webp" alt="客户端" />
&lt;/a>
&lt;/div>
&lt;/p>
&lt;h2 id="总结">&lt;a href="#%e6%80%bb%e7%bb%93" class="header-anchor">&lt;/a>总结
&lt;/h2>&lt;ol>
&lt;li>epoll是socket多路复用技术的一种，还有select和poll&lt;/li>
&lt;li>epoll 只能在linux使用(Windows下怎么用我没找到,如果说错了请指正)&lt;/li>
&lt;li>epoll 事件有 Level Triggered (LT) 和 Edge Triggered (ET) 两种模型，LT是默认模式，ET是高性能模式&lt;/li>
&lt;/ol>
&lt;p>另外，我使用面向对象的方式封装了一个epoll的tcpserver 代码有点多，就不贴在这了，已经上传
&lt;a class="link" href="https://github.com/lqxhub/epoll_server" target="_blank" rel="noopener"
>github&lt;/a>
&lt;a class="link" href="https://gitee.com/lqxlucky/epoll_server" target="_blank" rel="noopener"
>码云&lt;/a>&lt;/p>
&lt;p>欢迎给点个star ヾ(o◕∀◕)ﾉヾ&lt;/p></description></item><item><title>linux下通过rpath解决cmake动态编译后找不到动态链接库问题</title><link>https://lqxhub.github.io/posts/497a7ebf/</link><pubDate>Sat, 13 Mar 2021 17:48:50 +0000</pubDate><guid>https://lqxhub.github.io/posts/497a7ebf/</guid><description>&lt;p>这次书接上回，前段时间写了一篇《使用cmake构建C/C++项目和动态库》的文章， &lt;a class="link" href="https://lqxhub.github.io/posts/a20c5e48/" >传送门&lt;/a>。
但是直接通过cmake编译链接后，会有一个问题，那就是需要的.so文件不能更改目录，一旦.so文件目录变了,整个程序就没法运行了，这肯定是不行的。&lt;/p>
&lt;h2 id="原因">&lt;a href="#%e5%8e%9f%e5%9b%a0" class="header-anchor">&lt;/a>原因
&lt;/h2>&lt;p>后来我查一下一下，linux系统中，程序加载运行需要的.so文件是有顺序的&lt;/p>
&lt;ol>
&lt;li>环境变量LD_LIBRARY_PATH指定的路径&lt;/li>
&lt;li>gcc 编译时指定的运行时库路径-rpath&lt;/li>
&lt;li>ldconfig 配置文件ld.so.conf指定的路径&lt;/li>
&lt;li>系统默认库位置 /lib, /usr/lib&lt;/li>
&lt;/ol>
&lt;p>如果没有指定so的位置，gcc会自动把当前so所在的目录作为so的连接目录。知道原因了，问题就好解决了&lt;/p>
&lt;h2 id="解决办法">&lt;a href="#%e8%a7%a3%e5%86%b3%e5%8a%9e%e6%b3%95" class="header-anchor">&lt;/a>解决办法
&lt;/h2>&lt;p>先看一下现在的 &lt;strong>CMakeLists.txt&lt;/strong>文件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cmake" data-lang="cmake">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">cmake_minimum_required&lt;/span>(&lt;span style="color:#f1fa8c">VERSION&lt;/span> &lt;span style="color:#f1fa8c">3.13.3&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">project&lt;/span>(&lt;span style="color:#f1fa8c">project1&lt;/span> &lt;span style="color:#f1fa8c">C&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">set&lt;/span>(&lt;span style="color:#f1fa8c">CMAKE_C_STANDARD&lt;/span> &lt;span style="color:#f1fa8c">99&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">add_library&lt;/span>(&lt;span style="color:#f1fa8c">shared&lt;/span> &lt;span style="color:#f1fa8c">SHARED&lt;/span> &lt;span style="color:#f1fa8c">library.h&lt;/span> &lt;span style="color:#f1fa8c">library.c&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">set&lt;/span>(&lt;span style="color:#f1fa8c">LIBRARY_OUTPUT_PATH&lt;/span> &lt;span style="color:#ff79c6">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">PROJECT_SOURCE_DIR&lt;/span>&lt;span style="color:#ff79c6">}&lt;/span>&lt;span style="color:#f1fa8c">/lib&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">add_executable&lt;/span>(&lt;span style="color:#f1fa8c">project1&lt;/span> &lt;span style="color:#f1fa8c">main.c&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">target_link_libraries&lt;/span>(&lt;span style="color:#f1fa8c">project1&lt;/span> &lt;span style="color:#f1fa8c">shared&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我实验了两种办法，一是把.so 文件放到&lt;code>/lib&lt;/code> 或者 &lt;code>/usr/lib&lt;/code>中，这也是在安装很多软件时的做法，当使用包管理器安装软件时，需要的.so文件大多是安装到这两个目录下。在一种就是在编译时指定 &lt;code>rpath&lt;/code>的目录，使用相对目录，这样在复制文件的时候，把.so一起复制就可以了。&lt;/p>
&lt;h3 id="先用最简单的办法把so目录放到系统目录下">&lt;a href="#%e5%85%88%e7%94%a8%e6%9c%80%e7%ae%80%e5%8d%95%e7%9a%84%e5%8a%9e%e6%b3%95%e6%8a%8aso%e7%9b%ae%e5%bd%95%e6%94%be%e5%88%b0%e7%b3%bb%e7%bb%9f%e7%9b%ae%e5%bd%95%e4%b8%8b" class="header-anchor">&lt;/a>先用最简单的办法，把so目录放到系统目录下
&lt;/h3>&lt;p>
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-243a1ebb13296817.webp">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-243a1ebb13296817.webp" alt="" />
&lt;/a>
&lt;/div>
&lt;/p>
&lt;p>现在的目录结构如下，程序依赖的&lt;strong>libshared.so&lt;/strong> 在 &lt;strong>lib&lt;/strong> 目录下，现在把 &lt;strong>libshared.so&lt;/strong> 复制到 &lt;strong>/lib&lt;/strong> 目录下。这里有个要注意的地方，复制完后要执行 &lt;code>ldconfig&lt;/code> 命令，重新生成缓存，要不然程序依然找不到对应的.so文件
命令如下&lt;/p>
&lt;ol>
&lt;li>&lt;code>sudo mv lib/libshared.so /lib&lt;/code>&lt;/li>
&lt;li>&lt;code>sudo ldconfig &lt;/code>&lt;/li>
&lt;/ol>
&lt;p>这时候在运行 &lt;strong>project1&lt;/strong> 不会报错&lt;/p>
&lt;h3 id="编译时指定-rpath目录">&lt;a href="#%e7%bc%96%e8%af%91%e6%97%b6%e6%8c%87%e5%ae%9a-rpath%e7%9b%ae%e5%bd%95" class="header-anchor">&lt;/a>编译时指定 rpath目录
&lt;/h3>&lt;p>设置 &lt;strong>rpaht&lt;/strong> 有两种方式&lt;/p>
&lt;p>方式1&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cmake" data-lang="cmake">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">set&lt;/span>(&lt;span style="color:#f1fa8c">CMAKE_SKIP_BUILD_RPATH&lt;/span> &lt;span style="color:#f1fa8c">FALSE&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">set&lt;/span>(&lt;span style="color:#f1fa8c">CMAKE_BUILD_WITH_INSTALL_RPATH&lt;/span> &lt;span style="color:#f1fa8c">TRUE&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">set&lt;/span>(&lt;span style="color:#f1fa8c">CMAKE_INSTALL_RPATH&lt;/span> $&lt;span style="color:#f1fa8c">ORIGIN&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过修改编译后的 install 路径, 让程序在运行时通过程序的相对目录加载.so文件，其中 &lt;strong>$ORIGIN&lt;/strong> 变量是程序的当前目录&lt;/p>
&lt;p>方式2&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cmake" data-lang="cmake">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">set_target_properties&lt;/span>(&lt;span style="color:#f1fa8c">project1&lt;/span> &lt;span style="color:#f1fa8c">PROPERTIES&lt;/span> &lt;span style="color:#f1fa8c">LINK_FLAGS&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;-Wl,-rpath,./&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>方式2更粗暴，直接设置gcc的编译参数，指定&lt;strong>rpaht&lt;/strong> 是当前目录&lt;/p>
&lt;p>修改 &lt;strong>CMakeLists.txt&lt;/strong>文件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cmake" data-lang="cmake">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">cmake_minimum_required&lt;/span>(&lt;span style="color:#f1fa8c">VERSION&lt;/span> &lt;span style="color:#f1fa8c">3.13.3&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">project&lt;/span>(&lt;span style="color:#f1fa8c">project1&lt;/span> &lt;span style="color:#f1fa8c">C&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">set&lt;/span>(&lt;span style="color:#f1fa8c">CMAKE_C_STANDARD&lt;/span> &lt;span style="color:#f1fa8c">99&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">add_library&lt;/span>(&lt;span style="color:#f1fa8c">shared&lt;/span> &lt;span style="color:#f1fa8c">SHARED&lt;/span> &lt;span style="color:#f1fa8c">library.h&lt;/span> &lt;span style="color:#f1fa8c">library.c&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">set&lt;/span>(&lt;span style="color:#f1fa8c">LIBRARY_OUTPUT_PATH&lt;/span> &lt;span style="color:#ff79c6">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">PROJECT_SOURCE_DIR&lt;/span>&lt;span style="color:#ff79c6">}&lt;/span>&lt;span style="color:#f1fa8c">/lib&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span>&lt;span style="color:#6272a4">#方式1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">set&lt;/span>(&lt;span style="color:#f1fa8c">CMAKE_SKIP_BUILD_RPATH&lt;/span> &lt;span style="color:#f1fa8c">FALSE&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">set&lt;/span>(&lt;span style="color:#f1fa8c">CMAKE_BUILD_WITH_INSTALL_RPATH&lt;/span> &lt;span style="color:#f1fa8c">TRUE&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">set&lt;/span>(&lt;span style="color:#f1fa8c">CMAKE_INSTALL_RPATH&lt;/span> $&lt;span style="color:#f1fa8c">ORIGIN&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">add_executable&lt;/span>(&lt;span style="color:#f1fa8c">project1&lt;/span> &lt;span style="color:#f1fa8c">main.c&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span>&lt;span style="color:#6272a4">#方式2
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span>&lt;span style="color:#6272a4">#set_target_properties(project1 PROPERTIES LINK_FLAGS &amp;#34;-Wl,-rpath,./&amp;#34;)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">target_link_libraries&lt;/span>(&lt;span style="color:#f1fa8c">project1&lt;/span> &lt;span style="color:#f1fa8c">shared&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>重新生成 &lt;strong>MakeFile&lt;/strong> 文件, 然后编译&lt;/p>
&lt;p>编译生成的 &lt;strong>libshared.so&lt;/strong> 还是在 &lt;strong>lib&lt;/strong>目录下，先移动到可执行文件的同级目录下
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-74af9cfab32e95a7.webp">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-74af9cfab32e95a7.webp" alt="" />
&lt;/a>
&lt;/div>
&lt;/p>
&lt;p>最终目录如图，现在无论怎么复制文件，只要可执行文件和动态库在一个目录下，都以运行了&lt;/p>
&lt;h2 id="总结">&lt;a href="#%e6%80%bb%e7%bb%93" class="header-anchor">&lt;/a>总结
&lt;/h2>&lt;p>解决linux下 动态编译的程序找不到动态库的问题，有多种解决办法，这次用了两种&lt;/p>
&lt;ol>
&lt;li>把需要的.so文件放到 &lt;strong>/lib&lt;/strong> 或者 &lt;strong>/usr/lib&lt;/strong> 下， 然后执行 &lt;code> ldconfig&lt;/code>命令&lt;/li>
&lt;li>通过指定 &lt;strong>rpath&lt;/strong> 来决定加载 .so的目录&lt;/li>
&lt;/ol></description></item><item><title>使用cmake构建C/C++项目和动态库</title><link>https://lqxhub.github.io/posts/a20c5e48/</link><pubDate>Sat, 13 Mar 2021 17:45:45 +0000</pubDate><guid>https://lqxhub.github.io/posts/a20c5e48/</guid><description>&lt;p>编译C/C++文件时，很多时候都是直接使用像 &lt;code>gcc main.c&lt;/code> 或者 &lt;code>g++ main.cpp&lt;/code> 这样的命令编译的。但是代码文件多了后，这样编译就很困难了。这时候 就出现了&lt;code>MakeFile&lt;/code> 这个工具。&lt;/p>
&lt;p>MakeFile 解决了多个文件编译难的问题，有了MakeFile，只需要在MakeFile的目录中 运行一下&lt;code>make&lt;/code> 命令， 编译就会自动完成。但是编写MakeFile又很啰嗦，于是聪明的程序员们有开发了一个工具，自动生成MakeFile 文件，&lt;code>cmake&lt;/code> 的作用就是自动生成MakeFile。毕竟写cmake要比写MakeFile要简单很多&lt;/p>
&lt;p>也许你会说，现在都是用IDE写代码，IDE都会自动自动编译和运行，我还学这些干啥。但是有时候需要服务器上编译项目，或者在没有IDE的机器上编译项目，这时候MakeFile就很有用了。其实很多IDE也是使用cmake完成编译的，比如 &lt;strong>clion&lt;/strong>&lt;/p>
&lt;h2 id="cmake-安装">&lt;a href="#cmake-%e5%ae%89%e8%a3%85" class="header-anchor">&lt;/a>cmake 安装
&lt;/h2>&lt;p>在linux上可以使用源码安装和包管理安装，一般直接用包管理安装就好了
Ubuntu和Debian
&lt;code>sudo apt-get install cmake&lt;/code>&lt;/p>
&lt;p>CentOS
&lt;code>sudo yum install cmake&lt;/code>&lt;/p>
&lt;p>因为cmake只是生成MakeFile，最终组织编译的还是MakeFile，所以还有安装&lt;code>make&lt;/code>&lt;/p>
&lt;p>make 一般都会预装，为了保险，还是装一下&lt;/p>
&lt;p>Ubuntu和Debian
&lt;code>sudo apt-get install make&lt;/code>&lt;/p>
&lt;p>CentOS
&lt;code>sudo yum install make&lt;/code>&lt;/p>
&lt;h2 id="cmake基本规则">&lt;a href="#cmake%e5%9f%ba%e6%9c%ac%e8%a7%84%e5%88%99" class="header-anchor">&lt;/a>cmake基本规则
&lt;/h2>&lt;p>cmake 也没啥神秘的，本质上也是根据一定的规则自动生成MakeFile的，也是有语法的&lt;/p>
&lt;p>&lt;code>#&lt;/code> 是注释符号&lt;/p>
&lt;h3 id="预定义变量">&lt;a href="#%e9%a2%84%e5%ae%9a%e4%b9%89%e5%8f%98%e9%87%8f" class="header-anchor">&lt;/a>预定义变量
&lt;/h3>&lt;p>&lt;code>PROJECT_NAME&lt;/code>项目名称
&lt;code>PROJECT_SOURCE_DIR&lt;/code>工程的根目录
&lt;code>PROJECT_BINARY_DIR&lt;/code> 执行cmake命令的目录
&lt;code>PROJECT_BINARY_DIR&lt;/code> 执行cmake命令的目录
&lt;code>CMAKE_CURRENT_SOURCE_DIR &lt;/code>当前CMakeLists.txt文件所在目录
&lt;code>CMAKE_C_FLAGS&lt;/code>设置C编译选项
&lt;code>CMAKE_CXX_FLAGS&lt;/code>设置C++编译选项
&lt;code>CMAKE_C_COMPILER&lt;/code>设置C编译器
&lt;code>CMAKE_CXX_COMPILER&lt;/code>设置C++编译器
&lt;code>EXECUTABLE_OUTPUT_PATH&lt;/code>设置编译后可执行文件目录
&lt;code>LIBRARY_OUTPUT_PATH&lt;/code>设置生成的库文件目录&lt;/p>
&lt;h3 id="常用规则">&lt;a href="#%e5%b8%b8%e7%94%a8%e8%a7%84%e5%88%99" class="header-anchor">&lt;/a>常用规则
&lt;/h3>&lt;p>&lt;code>cmake_minimum_required(VERSION 3.16)&lt;/code> 指令cmake 版本
&lt;code>project(hello_world)&lt;/code> 设置工程名
&lt;code>include_directories(${PROJECT_SOURCE_DIR}/include)&lt;/code> 添加头文件路径
&lt;code>link_directories(${PROJECT_SOURCE_DIR}/lib)&lt;/code> 添加链接库的路径
&lt;code>add_subdirectory(module)&lt;/code>添加 module 子目录, 此目录下也要有CMakeLists.txt文件
&lt;code>add_executable(project1 main.c)&lt;/code>指定编译的可执行文件
&lt;code>add_library(lib1 SHARED library.c library.h)&lt;/code>指定生成的库文件，&lt;strong>SHARED&lt;/strong>是生成动态库，&lt;strong>STATIC&lt;/strong>后生成静态库
&lt;code>add_compile_options()&lt;/code> 添加编译选项
&lt;code>target_link_libraries()&lt;/code>指定动态链接库
&lt;code>install()&lt;/code>指定make install的目录&lt;/p>
&lt;p>&lt;code>set(XXXX YYYYYY)&lt;/code>用于设置和修改变量
&lt;code>${XXXX}&lt;/code> 使用变量&lt;/p>
&lt;h2 id="构建一个简单的项目">&lt;a href="#%e6%9e%84%e5%bb%ba%e4%b8%80%e4%b8%aa%e7%ae%80%e5%8d%95%e7%9a%84%e9%a1%b9%e7%9b%ae" class="header-anchor">&lt;/a>构建一个简单的项目
&lt;/h2>&lt;p>只有一个 &lt;code>main.c&lt;/code> 文件&lt;/p>
&lt;p>CMakeList.txt&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cmake" data-lang="cmake">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">cmake_minimum_required&lt;/span>(&lt;span style="color:#f1fa8c">VERSION&lt;/span> &lt;span style="color:#f1fa8c">3.15&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">project&lt;/span>(&lt;span style="color:#f1fa8c">project1&lt;/span> &lt;span style="color:#f1fa8c">C&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">set&lt;/span>(&lt;span style="color:#f1fa8c">CMAKE_C_STANDARD&lt;/span> &lt;span style="color:#f1fa8c">99&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">add_executable&lt;/span>(&lt;span style="color:#f1fa8c">project1&lt;/span> &lt;span style="color:#f1fa8c">main.c&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>main.c&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C" data-lang="C">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span>&lt;span style="color:#ff79c6">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4&lt;/span>&lt;span> &lt;span style="color:#50fa7b">printf&lt;/span>(&lt;span style="color:#f1fa8c">&amp;#34;Hello, CMakeList!&lt;/span>&lt;span style="color:#f1fa8c">\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="编译一个debug版本">&lt;a href="#%e7%bc%96%e8%af%91%e4%b8%80%e4%b8%aadebug%e7%89%88%e6%9c%ac" class="header-anchor">&lt;/a>编译一个debug版本
&lt;/h3>&lt;ol>
&lt;li>&lt;code>mkdir debug&lt;/code> 新建debug目录&lt;/li>
&lt;li>&lt;code>cd debug&lt;/code> 进入debug目录&lt;/li>
&lt;li>&lt;code>cmake -DCMAKE_BUILD_TYPR=debug ..&lt;/code> 指定编译模式为debug&lt;/li>
&lt;li>&lt;code>make&lt;/code> 生成可执行文件&lt;/li>
&lt;/ol>
&lt;p>此时会生成&lt;code>project1&lt;/code>文件&lt;/p>
&lt;p>步骤 3 中 &lt;code>cmake -DCMAKE_BUILD_TYPE=release ..&lt;/code> 指定编译模式为release&lt;/p>
&lt;h2 id="构建一个生成动态库的项目">&lt;a href="#%e6%9e%84%e5%bb%ba%e4%b8%80%e4%b8%aa%e7%94%9f%e6%88%90%e5%8a%a8%e6%80%81%e5%ba%93%e7%9a%84%e9%a1%b9%e7%9b%ae" class="header-anchor">&lt;/a>构建一个生成动态库的项目
&lt;/h2>&lt;p>有两个文件&lt;code>library.h&lt;/code>和&lt;code>library.c&lt;/code>
CMakeList.txt&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cmake" data-lang="cmake">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">cmake_minimum_required&lt;/span>(&lt;span style="color:#f1fa8c">VERSION&lt;/span> &lt;span style="color:#f1fa8c">3.15&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">project&lt;/span>(&lt;span style="color:#f1fa8c">shared&lt;/span> &lt;span style="color:#f1fa8c">C&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">set&lt;/span>(&lt;span style="color:#f1fa8c">CMAKE_C_STANDARD&lt;/span> &lt;span style="color:#f1fa8c">99&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">add_library&lt;/span>(&lt;span style="color:#f1fa8c">shared&lt;/span> &lt;span style="color:#f1fa8c">SHARED&lt;/span> &lt;span style="color:#f1fa8c">library.c&lt;/span> &lt;span style="color:#f1fa8c">library.h&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>library.h&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">add&lt;/span>(&lt;span style="color:#8be9fd">int&lt;/span> a, &lt;span style="color:#8be9fd">int&lt;/span> b);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>library.c&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">add&lt;/span>(&lt;span style="color:#8be9fd">int&lt;/span> a, &lt;span style="color:#8be9fd">int&lt;/span> b) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> a &lt;span style="color:#ff79c6">+&lt;/span> b;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="生成动态库">&lt;a href="#%e7%94%9f%e6%88%90%e5%8a%a8%e6%80%81%e5%ba%93" class="header-anchor">&lt;/a>生成动态库
&lt;/h3>&lt;ol>
&lt;li>&lt;code>mkdir lib&lt;/code> 新建lib目录&lt;/li>
&lt;li>&lt;code>cd lib&lt;/code> 进入lib目录&lt;/li>
&lt;li>&lt;code>cmake -DCMAKE_BUILD_TYPE=debug ..&lt;/code> 指定编译模式为debug&lt;/li>
&lt;li>&lt;code>make&lt;/code> 生成可执行文件
此时会生成 &lt;code>libshared.so&lt;/code>文件&lt;/li>
&lt;/ol>
&lt;h2 id="在第一个项目中使用动态库">&lt;a href="#%e5%9c%a8%e7%ac%ac%e4%b8%80%e4%b8%aa%e9%a1%b9%e7%9b%ae%e4%b8%ad%e4%bd%bf%e7%94%a8%e5%8a%a8%e6%80%81%e5%ba%93" class="header-anchor">&lt;/a>在第一个项目中使用动态库
&lt;/h2>&lt;p>首先把 &lt;code>libshared.so&lt;/code>文件和&lt;code>library.h&lt;/code>文件复制到第一个项目中&lt;/p>
&lt;p>修改 CMakeList.txt&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cmake" data-lang="cmake">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">cmake_minimum_required&lt;/span>(&lt;span style="color:#f1fa8c">VERSION&lt;/span> &lt;span style="color:#f1fa8c">3.15&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">project&lt;/span>(&lt;span style="color:#f1fa8c">project1&lt;/span> &lt;span style="color:#f1fa8c">C&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">set&lt;/span>(&lt;span style="color:#f1fa8c">CMAKE_C_STANDARD&lt;/span> &lt;span style="color:#f1fa8c">99&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">add_executable&lt;/span>(&lt;span style="color:#f1fa8c">project1&lt;/span> &lt;span style="color:#f1fa8c">main.c&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">target_link_libraries&lt;/span>(&lt;span style="color:#f1fa8c">project1&lt;/span> &lt;span style="color:#ff79c6">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">PROJECT_SOURCE_DIR&lt;/span>&lt;span style="color:#ff79c6">}&lt;/span>&lt;span style="color:#f1fa8c">/libshared.so&lt;/span>)&lt;span style="color:#6272a4">#指定动态库文件
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>&lt;code>mkdir debug&lt;/code> 新建debug目录&lt;/li>
&lt;li>&lt;code>cd debug&lt;/code> 进入debug目录&lt;/li>
&lt;li>&lt;code>cmake -DCMAKE_BUILD_TYPE=debug ..&lt;/code> 指定编译模式为debug&lt;/li>
&lt;li>&lt;code>make&lt;/code> 生成可执行文件&lt;/li>
&lt;/ol>
&lt;p>最终目录如图
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-74e036182d3b091d.webp">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-74e036182d3b091d.webp" alt="" />
&lt;/a>
&lt;/div>
&lt;/p>
&lt;h2 id="把两个项目合成一个">&lt;a href="#%e6%8a%8a%e4%b8%a4%e4%b8%aa%e9%a1%b9%e7%9b%ae%e5%90%88%e6%88%90%e4%b8%80%e4%b8%aa" class="header-anchor">&lt;/a>把两个项目合成一个
&lt;/h2>&lt;p>能不能在一个项目中生成动态库并在这个项目中使用呢，当然是可以的。&lt;/p>
&lt;p>也就是在这个项目中部分文件编译成动态库 .so 文件， 部分文件编译成 可执行文件&lt;/p>
&lt;p>修改 CMakeList.txt&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cmake" data-lang="cmake">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">cmake_minimum_required&lt;/span>(&lt;span style="color:#f1fa8c">VERSION&lt;/span> &lt;span style="color:#f1fa8c">3.13.3&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">project&lt;/span>(&lt;span style="color:#f1fa8c">project1&lt;/span> &lt;span style="color:#f1fa8c">C&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">set&lt;/span>(&lt;span style="color:#f1fa8c">CMAKE_C_STANDARD&lt;/span> &lt;span style="color:#f1fa8c">99&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">add_library&lt;/span>(&lt;span style="color:#f1fa8c">shared&lt;/span> &lt;span style="color:#f1fa8c">SHARED&lt;/span> &lt;span style="color:#f1fa8c">library.h&lt;/span> &lt;span style="color:#f1fa8c">library.c&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">set&lt;/span>(&lt;span style="color:#f1fa8c">LIBRARY_OUTPUT_PATH&lt;/span> &lt;span style="color:#ff79c6">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">PROJECT_SOURCE_DIR&lt;/span>&lt;span style="color:#ff79c6">}&lt;/span>&lt;span style="color:#f1fa8c">/lib&lt;/span>)&lt;span style="color:#6272a4">#设置动态库输出目录
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">add_executable&lt;/span>(&lt;span style="color:#f1fa8c">project1&lt;/span> &lt;span style="color:#f1fa8c">main.c&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">target_link_libraries&lt;/span>(&lt;span style="color:#f1fa8c">project1&lt;/span> &lt;span style="color:#f1fa8c">shared&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>&lt;code>mkdir debug&lt;/code> 新建debug目录&lt;/li>
&lt;li>&lt;code>cd debug&lt;/code> 进入debug目录&lt;/li>
&lt;li>&lt;code>cmake -DCMAKE_BUILD_TYPE=debug ..&lt;/code> 指定编译模式为debug&lt;/li>
&lt;li>&lt;code>make&lt;/code> 生成可执行文件&lt;/li>
&lt;/ol>
&lt;p>最终目录如图&lt;/p>
&lt;p>
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-ef708a45de2bc055.webp">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-ef708a45de2bc055.webp" alt="" />
&lt;/a>
&lt;/div>
&lt;/p>
&lt;h2 id="最后">&lt;a href="#%e6%9c%80%e5%90%8e" class="header-anchor">&lt;/a>最后
&lt;/h2>&lt;p>通过几个简单的例子，介绍了一下cmake的基本使用，文中是使用cmake构建的C项目，换成C++基本没什么区别，就不展示了&lt;/p>
&lt;p>cmake的功能远不止这些，还需要在实战中多学习，多总结&lt;/p>
&lt;p>&lt;strong>2021-03-06 补充&lt;/strong>
通过上面的方式可以编译运行，但是会有一个问题，就是 &lt;strong>.so&lt;/strong> 文件不能更改目录，一旦动态库目录变了，程序就没法加载，程序也就没法运行了。为此又找资料学习一番，另写了一篇，{% post_link linux下cmake动态编译后找不到动态链接库 [传送门] %}&lt;/p></description></item><item><title>花式使用C/C++的指针</title><link>https://lqxhub.github.io/posts/4835beb2/</link><pubDate>Thu, 09 Nov 2017 17:10:42 +0000</pubDate><guid>https://lqxhub.github.io/posts/4835beb2/</guid><description>&lt;p>指针无疑是C/C++语言的精髓所在，用好了是把利剑，用不好就是一颗炸弹。指针出BUG了，分分钟会让你写程序崩溃
今天被C++的指针搞混了，翻阅了很多资料，有点懂了。赶快来做一下笔记。&lt;/p>
&lt;p>
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-379c50271ecccde6.webp">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-379c50271ecccde6.webp" alt="" />
&lt;/a>
&lt;/div>
&lt;/p>
&lt;p>先来使用一个最简单的指针&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> a &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">10&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>p&lt;span style="color:#ff79c6">=&amp;amp;&lt;/span>a;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个没啥难度不会出错，接下来来个难点的&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> a &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">10&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>p &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>a;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#ff79c6">**&lt;/span>p1 &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>p;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个&lt;strong>指针的指针&lt;/strong>是不是已经头皮发麻了，别急，还有更变态的——&lt;strong>指针数组&lt;/strong>，&lt;strong>数组指针&lt;/strong>，&lt;strong>函数指针&lt;/strong>，&lt;strong>指针函数&lt;/strong>。这回是不是彻底懵了。
现在就开始一个个使用这些指针
首先要明确一点，指针数组和数组指针不是一个概念&lt;/p>
&lt;p>&lt;code>int *p3[10];&lt;/code> 这就定义了一个指针数组， &lt;strong>[]&lt;/strong> 优先级高，先与p结合成为一个数组，再由int*说明这是一个整型指针数组，它有10个指针类型的数组元素&lt;/p>
&lt;hr>
&lt;p>&lt;code>int (*p4)[10];&lt;/code>
这是一个数组指针，因为()优先级高，首先说明p是一个指针，指向一个整型的一维数组，这个一维数组的长度是10&lt;/p>
&lt;p>&lt;code>int* fun(int a);&lt;/code>
这样就声明了一 个指针函数，就是返回指针的函数，函数可以不返回任何值，也可以返回整型值，实型值，字符型值，当然也可以返回指针值。函数fun需要在函数体中返回一个int型的指针。&lt;/p>
&lt;p>&lt;code>int (*fun)(int a);&lt;/code>
这样就定义了一个指向函数的指针，可以通过这个指针来调用函数，注意，这个指针不能指向任意的函数，只能指向返回值是int，并且只有一个形参的函数。
这些都是C中指针的使用，到了C++中，指针遇到类和对象，遇到new和delete这两个运算符，稍有不慎就会内存泄漏。
说了这么多，现在开始研究C++中指针的使用问题
先来新建一个Test类
&lt;strong>Test.h&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#pragma once
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span>&lt;span style="color:#ff79c6">&lt;/span>&lt;span style="color:#ff79c6">class&lt;/span> &lt;span style="color:#50fa7b">Test&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3&lt;/span>&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4&lt;/span>&lt;span>&lt;span style="color:#ff79c6">public&lt;/span>&lt;span style="color:#ff79c6">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5&lt;/span>&lt;span> Test();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6&lt;/span>&lt;span> Test(&lt;span style="color:#8be9fd">int&lt;/span> _a);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7&lt;/span>&lt;span> &lt;span style="color:#ff79c6">~&lt;/span>Test();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> a;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">9&lt;/span>&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Test.cpp&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;#34;stdafx.h&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;#34;Test.h&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span>&lt;span style="color:#ff79c6">&lt;/span>&lt;span style="color:#ff79c6">using&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>cout;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span>&lt;span style="color:#ff79c6">using&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span>Test&lt;span style="color:#ff79c6">::&lt;/span>Test()&lt;span style="color:#ff79c6">:&lt;/span>Test(&lt;span style="color:#bd93f9">0&lt;/span>)&lt;span style="color:#6272a4">//委托构造函数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span> cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;调用委托构造函数给a赋值 0&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span>Test&lt;span style="color:#ff79c6">::&lt;/span>Test(&lt;span style="color:#8be9fd">int&lt;/span> _a&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#bd93f9">10&lt;/span>)&lt;span style="color:#ff79c6">:&lt;/span>a(_a)&lt;span style="color:#6272a4">//构造初始化,形参默认值=10
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span> cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;call function Test(int _a) &amp;#34;&lt;/span>&lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>&lt;span>Test&lt;span style="color:#ff79c6">::~&lt;/span>Test()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20&lt;/span>&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21&lt;/span>&lt;span> cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;delete Test &amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> a &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>main.cpp&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#6272a4">// main.cpp: 定义控制台应用程序的入口点。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>&lt;span style="color:#6272a4">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;#34;stdafx.h&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;#34;Test.h&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span>&lt;span style="color:#ff79c6">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">main&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span> &lt;span style="color:#6272a4">/*1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span>&lt;span style="color:#6272a4"> 创建Test的实例，指针t1指向实例*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span> Test &lt;span style="color:#ff79c6">*&lt;/span>t1 &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">new&lt;/span> Test(&lt;span style="color:#bd93f9">6&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span> &lt;span style="color:#ff79c6">delete&lt;/span> t1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span> t1 &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">nullptr&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span> &lt;span style="color:#6272a4">/*2
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>&lt;span>&lt;span style="color:#6272a4"> 创建3个test实例数组 指针t2指向数组的第一个元素,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20&lt;/span>&lt;span>&lt;span style="color:#6272a4"> 此时只能调用Test类的无参构造函数*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21&lt;/span>&lt;span> Test &lt;span style="color:#ff79c6">*&lt;/span>t2 &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">new&lt;/span> Test[&lt;span style="color:#bd93f9">3&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23&lt;/span>&lt;span> &lt;span style="color:#ff79c6">delete&lt;/span>[] t2;&lt;span style="color:#6272a4">//释放 test的三个实例
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> t2 &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">nullptr&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26&lt;/span>&lt;span> &lt;span style="color:#6272a4">/*3
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27&lt;/span>&lt;span>&lt;span style="color:#6272a4"> 在堆中创建3个（Test）类型的指针数组，t3指向这个数组；*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28&lt;/span>&lt;span> Test&lt;span style="color:#ff79c6">*&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>t3 &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">new&lt;/span> Test&lt;span style="color:#ff79c6">*&lt;/span>[&lt;span style="color:#bd93f9">3&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29&lt;/span>&lt;span> &lt;span style="color:#ff79c6">for&lt;/span> (&lt;span style="color:#8be9fd">int&lt;/span> i &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>; i &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">3&lt;/span>; i&lt;span style="color:#ff79c6">++&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30&lt;/span>&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31&lt;/span>&lt;span> &lt;span style="color:#6272a4">/*创建3个Test的实例，让t3数组中的元素（指针）指向创建的对象*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32&lt;/span>&lt;span> t3[i] &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">new&lt;/span> Test(i &lt;span style="color:#ff79c6">+&lt;/span> &lt;span style="color:#bd93f9">10&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35&lt;/span>&lt;span> &lt;span style="color:#ff79c6">for&lt;/span> (&lt;span style="color:#8be9fd">int&lt;/span> i &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>; i &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">3&lt;/span>; i&lt;span style="color:#ff79c6">++&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36&lt;/span>&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37&lt;/span>&lt;span> &lt;span style="color:#6272a4">/*释放 在堆中创建的三个Test的实例*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38&lt;/span>&lt;span> &lt;span style="color:#ff79c6">delete&lt;/span> t3[i];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41&lt;/span>&lt;span> &lt;span style="color:#ff79c6">delete&lt;/span>[] t3;&lt;span style="color:#6272a4">//释放动态创建的指向Test实例的指针数组
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">44&lt;/span>&lt;span> system(&lt;span style="color:#f1fa8c">&amp;#34;pause&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">45&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">46&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>先来开一下最简单的一种对象指针&lt;code>Test *t1 = new Test(6);&lt;/code> 这时定义了一个Test类型的指针t1，并让这个指针指向从堆中申请的内存（Test的实例）运行以下看看&lt;/p>
&lt;p>
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-7017480d4350e17f.webp">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-7017480d4350e17f.webp" alt="1" />
&lt;/a>
&lt;/div>
&lt;/p>
&lt;p>没意外，Test的实例正常创建，正常释放了。
再来看一下第二种情况&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>Test &lt;span style="color:#ff79c6">*&lt;/span>t2 &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">new&lt;/span> Test[&lt;span style="color:#bd93f9">3&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3&lt;/span>&lt;span>&lt;span style="color:#ff79c6">delete&lt;/span>[] t2;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>现在定义了一个Test的指针t2，并且在堆中创建了3个Test的实例，放在一个数组中，指针t2指向了这个数组。运行看一下
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-de19b311faff18ae.webp">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-de19b311faff18ae.webp" alt="2" />
&lt;/a>
&lt;/div>
&lt;/p>
&lt;p>这时有一点要注意一下，这样new创建对象时只能调用Test类的默认无参构造函数，其他的函数不能调用。我们为了给a赋值，使用了委托构造函数（不太熟悉的同学可以忽略），从打印的结果来看，程序正常创建了Test的实例，也正常释放内存。
现在来看一下最复杂的一种情况&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#6272a4">/*3
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>&lt;span style="color:#6272a4">在堆中创建3个（Test）类型的指针数组，t3指向这个数组；*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span>Test&lt;span style="color:#ff79c6">*&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>t3 &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">new&lt;/span> Test&lt;span style="color:#ff79c6">*&lt;/span>[&lt;span style="color:#bd93f9">3&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span> &lt;span style="color:#ff79c6">for&lt;/span> (&lt;span style="color:#8be9fd">int&lt;/span> i &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>; i &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">3&lt;/span>; i&lt;span style="color:#ff79c6">++&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span> &lt;span style="color:#6272a4">/*创建3个Test的实例，让t3数组中的元素（指针）指向创建的对象*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span> t3[i] &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">new&lt;/span> Test(i &lt;span style="color:#ff79c6">+&lt;/span> &lt;span style="color:#bd93f9">10&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span> &lt;span style="color:#ff79c6">for&lt;/span> (&lt;span style="color:#8be9fd">int&lt;/span> i &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>; i &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">3&lt;/span>; i&lt;span style="color:#ff79c6">++&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span> &lt;span style="color:#6272a4">/*释放 在堆中创建的三个Test的实例*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span> &lt;span style="color:#ff79c6">delete&lt;/span> t3[i];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span> &lt;span style="color:#ff79c6">delete&lt;/span>[] t3;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>是不是已经晕倒在电脑前了0.0     莫慌,先看一下运行结果
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-0f144e7a69844359.webp">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-0f144e7a69844359.webp" alt="3" />
&lt;/a>
&lt;/div>
&lt;/p>
&lt;p>一步步来分析以下代码，首先看一下&lt;code>Test* *t3 = new Test*[3];&lt;/code>t3是一个指针，它指向了堆中的一个数组，这个数组的类型是&lt;code>Test*&lt;/code>的。&lt;code> new Test*[3]&lt;/code>在堆内存中创建了一个长度为3的&lt;code>Test*&lt;/code>的数组。重点&lt;strong>t3指向的是堆中的一个数组&lt;/strong>
第一个for循环中的&lt;code>t3[i] = new Test(i + 10);&lt;/code>是给&lt;code>t3&lt;/code>所指向的数组中的元素赋值，因为数组是&lt;code>Test*&lt;/code>类型的，所以可以指向Test类的实例。
第二个for循环中&lt;code>delete t3[i];&lt;/code>是把在堆内存中创建的Test 类的实例释放。因为&lt;code>t3[i]&lt;/code>是一个指针，而且是指针数组，也就是说&lt;code>t3[i]&lt;/code>，是&lt;code>t3&lt;/code>指针指向的数组（在堆内存中）的一个元素，所以要把&lt;code>t3&lt;/code>指向的数组释放&lt;code>delete[] t3;&lt;/code>&lt;/p>
&lt;p>好了先总结到这吧。项目我已经上传到&lt;strong>码云&lt;/strong>，需要的可以&lt;a class="link" href="https://gitee.com/bruce_le/111" target="_blank" rel="noopener"
>下载&lt;/a>。&lt;/p></description></item></channel></rss>