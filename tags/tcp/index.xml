<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tcp on QX 的笔记</title><link>https://lqxhub.github.io/tags/tcp/</link><description>Recent content in Tcp on QX 的笔记</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sun, 20 Oct 2024 17:31:37 +0800</lastBuildDate><atom:link href="https://lqxhub.github.io/tags/tcp/index.xml" rel="self" type="application/rss+xml"/><item><title>Linux下使用iouring实现一个tcp服务</title><link>https://lqxhub.github.io/posts/f0e9829c/</link><pubDate>Sun, 20 Oct 2024 17:31:37 +0800</pubDate><guid>https://lqxhub.github.io/posts/f0e9829c/</guid><description>&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/6a84474a44a97bccecbbc9c5a3b9f7aea2571c97.jpg" alt="Featured image of post Linux下使用iouring实现一个tcp服务" />&lt;p>今年一直没怎么写东西，看了一下上一篇文章，都过去半年了。前段时间一直想写一点redis的东西，但是一直没有时间去研读源码，所以就一直没有写。
最近有时间，看了一点 &lt;strong>iouring&lt;/strong> 的东西，就写了一篇文章，介绍了一下 &lt;strong>iouring&lt;/strong> 的基本使用，实现了一个简单的TCP server&lt;/p>
&lt;p>很早就听说过 &lt;strong>iouring&lt;/strong> ，但是一直没有时间学习。最近有时间就找了一些资料，学习了一下，写了一个简单的例子，实现了一个简单的tcp服务。&lt;/p>
&lt;p>这篇文章主要介绍了如何使用 &lt;strong>iouring&lt;/strong> 实现一个简单的 &lt;strong>tcp&lt;/strong> 服务，只是介绍了iouring的基本使用，没有涉及底层实现。
后面有时间再去学一下 &lt;strong>liburing&lt;/strong> 的源码，看看底层是如何实现的。&lt;/p>
&lt;p>先解释一下两个名词：&lt;strong>iouring&lt;/strong> 和 &lt;strong>liburing&lt;/strong>。
&lt;strong>iouring&lt;/strong> 是 &lt;strong>Linux&lt;/strong> 内核在 &lt;strong>5.1&lt;/strong> 版本引入的一个新的异步I/O接口。
&lt;strong>liburing&lt;/strong> 是 &lt;strong>iouring&lt;/strong> 的一个用户态库，封装了 &lt;strong>iouring&lt;/strong> 的接口，使得用户可以更方便的使用 &lt;strong>iouring&lt;/strong>。&lt;/p>
&lt;p>简单说就是 &lt;strong>io_uring&lt;/strong> 是linux内核的功能，对外提供了一套异步I/O的接口。因为直接使用 linux内核的 &lt;strong>io_uring&lt;/strong> 接口太麻烦了，
所以在就写了 &lt;strong>liburing&lt;/strong> 这个库，对内核的 &lt;strong>io_uring&lt;/strong> 封装，提供了一套更加友好的接口，使得用户可以更方便的使用 &lt;strong>io_uring&lt;/strong>。&lt;/p>
&lt;h2 id="什么是iouring">&lt;a href="#%e4%bb%80%e4%b9%88%e6%98%afiouring" class="header-anchor">&lt;/a>什么是iouring
&lt;/h2>&lt;p>io_uring是Linux内核在 &lt;strong>5.1&lt;/strong> 版本引入的一个新的异步I/O接口。
io_uring的目标是提供一个高效的、统一的异步I/O接口，以替代现有的异步I/O接口（如aio、epoll、eventfd等）。
io_uring的设计目标是提供一个简单的、高效的、统一的异步I/O接口，以便应用程序可以更容易地利用异步I/O的优势。&lt;/p>
&lt;p>虽然linux内核提供了很多异步I/O的接口，比如aio。
在linux上可以使用&lt;/p>
&lt;p>&lt;code>fcntl(sockfd, F_SETFL, fcntl(sockfd, F_GETFL, 0) | O_NONBLOCK);&lt;/code>&lt;/p>
&lt;p>来设置 &lt;strong>socket&lt;/strong> 为非阻塞模式，后续在读写 &lt;strong>socket&lt;/strong> 的 &lt;strong>fd&lt;/strong> 时，使用 &lt;code>read&lt;/code> 和 &lt;code>write&lt;/code> 函数 就是非阻塞的了。&lt;/p>
&lt;p>在调用 &lt;code>read&lt;/code> 和 &lt;code>write&lt;/code> 函数时，如果 &lt;strong>fd&lt;/strong> 没有数据，或者 &lt;strong>fd&lt;/strong> 的缓冲区满了，那么 &lt;code>read&lt;/code> 和 &lt;code>write&lt;/code> 函数会立即返回，
不会阻塞&lt;/p>
&lt;p>但是这种方式有一个问题，就是 &lt;strong>read&lt;/strong> 和 &lt;strong>write&lt;/strong> 函数的调用是阻塞的，虽然 &lt;strong>read&lt;/strong> 和 &lt;strong>write&lt;/strong> 函数会立即返回，但是 &lt;strong>read&lt;/strong> 和 &lt;strong>write&lt;/strong> 函数的调用是阻塞的，会占用 &lt;strong>CPU&lt;/strong> 的资源。&lt;/p>
&lt;p>因为之前的异步I/O接口不够好用，所以 &lt;strong>io_uring&lt;/strong> 就诞生了。&lt;/p>
&lt;p>&lt;strong>io_uring&lt;/strong> 的设计目标是提供一个简单的、高效的、统一的异步I/O接口，以便应用程序可以更容易地利用异步I/O的优势。
现在的 &lt;strong>io_uring&lt;/strong> 支持 &lt;strong>文件 I/O&lt;/strong>、&lt;strong>网络 I/O&lt;/strong>、&lt;strong>定时器&lt;/strong>、&lt;strong>信号&lt;/strong> 等。真正的统一了 &lt;strong>I/O&lt;/strong> 异步操作。&lt;/p>
&lt;p>说到异步I/O，就不得不提一下 &lt;strong>epoll&lt;/strong>。 &lt;strong>epoll&lt;/strong> 是 &lt;strong>Linux&lt;/strong> 内核提供的一种 &lt;strong>I/O&lt;/strong> 多路复用机制，可以同时监控多个 &lt;strong>fd&lt;/strong> 的 &lt;strong>I/O&lt;/strong> 事件。
&lt;strong>epoll&lt;/strong> 只是这个 多路复用机制，只是用来监控 &lt;strong>fd&lt;/strong> 的 &lt;strong>I/O&lt;/strong> 事件，当 &lt;strong>fd&lt;/strong> 有 &lt;strong>I/O&lt;/strong> 事件时（fd 可以被读写时）， &lt;strong>epoll&lt;/strong> 会通知应用程序。
真正的 &lt;strong>I/O&lt;/strong> 操作还是由 &lt;strong>read&lt;/strong> 和 &lt;strong>write&lt;/strong> 函数来完成的。
所以说 &lt;strong>epoll&lt;/strong> 并不是异步 &lt;strong>I/O&lt;/strong>，只是 &lt;strong>I/O&lt;/strong> 多路复用机制。&lt;/p>
&lt;h2 id="io_uring的基础概念">&lt;a href="#io_uring%e7%9a%84%e5%9f%ba%e7%a1%80%e6%a6%82%e5%bf%b5" class="header-anchor">&lt;/a>io_uring的基础概念
&lt;/h2>&lt;p>&lt;strong>io_uring&lt;/strong> 有两个重要的概念：&lt;strong>Submission Queue&lt;/strong> 和 &lt;strong>Completion Queue&lt;/strong>。 简称 &lt;strong>sq&lt;/strong> 和 &lt;strong>cq&lt;/strong>。&lt;/p>
&lt;p>&lt;strong>Submission Queue&lt;/strong> 是 &lt;strong>io_uring&lt;/strong> 的提交队列，用来提交 &lt;strong>I/O&lt;/strong> 请求。&lt;/p>
&lt;p>&lt;strong>Completion Queue&lt;/strong> 是 &lt;strong>io_uring&lt;/strong> 的完成队列，用来存放 &lt;strong>I/O&lt;/strong> 请求的完成状态。&lt;/p>
&lt;p>和 &lt;strong>sq&lt;/strong> 和 &lt;strong>cq&lt;/strong> 相对应的是 &lt;strong>sqe&lt;/strong> 和 &lt;strong>cqe&lt;/strong>。&lt;/p>
&lt;p>&lt;strong>sqe&lt;/strong> 是 &lt;strong>Submission Queue&lt;/strong> 的元素，用来描述一个 &lt;strong>I/O&lt;/strong> 请求。&lt;/p>
&lt;p>&lt;strong>cqe&lt;/strong> 是 &lt;strong>Completion Queue&lt;/strong> 的元素，用来描述一个 &lt;strong>I/O&lt;/strong> 请求的完成状态。&lt;/p>
&lt;p>放一张iouring的工作流程图：&lt;/p>
&lt;p>
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/359587e330204f8a868cf77c92197a417877ae15.png">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/359587e330204f8a868cf77c92197a417877ae15.png" alt="" />
&lt;/a>
&lt;/div>
&lt;/p>
&lt;p>io_uring中非常重要的两个数据结构 &lt;strong>sq&lt;/strong> 和 &lt;strong>cq&lt;/strong>。是用户空间和内核空间之间的通信桥梁。&lt;/p>
&lt;p>&lt;strong>io_uring&lt;/strong> 的工作流程如下：&lt;/p>
&lt;ol>
&lt;li>应用程序向 &lt;strong>Submission Queue&lt;/strong> 中提交 &lt;strong>I/O&lt;/strong> 请求。&lt;/li>
&lt;li>&lt;strong>io_uring&lt;/strong> 内核模块从 &lt;strong>Submission Queue&lt;/strong> 中取出 &lt;strong>I/O&lt;/strong> 请求，执行 &lt;strong>I/O&lt;/strong> 操作。&lt;/li>
&lt;li>&lt;strong>io_uring&lt;/strong> 内核模块将 &lt;strong>I/O&lt;/strong> 请求的完成状态写入 &lt;strong>Completion Queue&lt;/strong>。&lt;/li>
&lt;li>应用程序从 &lt;strong>Completion Queue&lt;/strong> 中读取 &lt;strong>I/O&lt;/strong> 请求的完成状态。&lt;/li>
&lt;li>应用程序处理 &lt;strong>I/O&lt;/strong> 请求的完成状态。&lt;/li>
&lt;/ol>
&lt;p>因为这次只是简单的介绍 &lt;strong>iouring&lt;/strong> 的基本使用，所以就不深入讲 &lt;strong>iouring&lt;/strong> 的原理了。&lt;/p>
&lt;h2 id="liburing的使用">&lt;a href="#liburing%e7%9a%84%e4%bd%bf%e7%94%a8" class="header-anchor">&lt;/a>liburing的使用
&lt;/h2>&lt;p>&lt;strong>liburing&lt;/strong> 是 &lt;strong>iouring&lt;/strong> 的一个用户态库，封装了 &lt;strong>iouring&lt;/strong> 的接口，使得用户可以更方便的使用 &lt;strong>iouring&lt;/strong>。&lt;/p>
&lt;p>liburing中封装了很多操作函数，这次也不会全部介绍，只介绍一些常用的函数。&lt;/p>
&lt;h3 id="liburing常用的函数">&lt;a href="#liburing%e5%b8%b8%e7%94%a8%e7%9a%84%e5%87%bd%e6%95%b0" class="header-anchor">&lt;/a>liburing常用的函数
&lt;/h3>&lt;h4 id="io_uring_queue_init">&lt;a href="#io_uring_queue_init" class="header-anchor">&lt;/a>io_uring_queue_init
&lt;/h4>&lt;p>初始化 &lt;strong>io_uring&lt;/strong> 对象。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">io_uring_queue_init&lt;/span>(&lt;span style="color:#8be9fd">unsigned&lt;/span> entries, &lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">io_uring&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>ring,&lt;span style="color:#8be9fd">unsigned&lt;/span> flags);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>有三个参数：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>entries&lt;/strong>： &lt;strong>Submission Queue&lt;/strong> 和 &lt;strong>Completion Queue&lt;/strong> 的大小。&lt;/li>
&lt;li>&lt;strong>ring&lt;/strong>： &lt;strong>io_uring&lt;/strong> 对象。&lt;/li>
&lt;li>&lt;strong>flags&lt;/strong>： 保留参数，传 &lt;strong>0&lt;/strong> 即可。&lt;/li>
&lt;/ol>
&lt;h4 id="io_uring_queue_exit">&lt;a href="#io_uring_queue_exit" class="header-anchor">&lt;/a>io_uring_queue_exit
&lt;/h4>&lt;p>销毁 &lt;strong>io_uring&lt;/strong> 对象。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">io_uring_queue_exit&lt;/span>(&lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">io_uring&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>ring);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>传入 &lt;strong>io_uring&lt;/strong> 对象即可。&lt;/p>
&lt;h4 id="io_uring_get_sqe">&lt;a href="#io_uring_get_sqe" class="header-anchor">&lt;/a>io_uring_get_sqe
&lt;/h4>&lt;p>获取 &lt;strong>Submission Queue&lt;/strong> 的元素。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">io_uring_sqe&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>&lt;span style="color:#50fa7b">io_uring_get_sqe&lt;/span>(&lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">io_uring&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>ring);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>传入 &lt;strong>io_uring&lt;/strong> 对象，返回一个 &lt;strong>sqe&lt;/strong> 对象，用来描述一个 &lt;strong>I/O&lt;/strong> 请求。&lt;/p>
&lt;h4 id="io_uring_submit">&lt;a href="#io_uring_submit" class="header-anchor">&lt;/a>io_uring_submit
&lt;/h4>&lt;p>提交 &lt;strong>I/O&lt;/strong> 请求。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">io_uring_submit&lt;/span>(&lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">io_uring&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>ring);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>传入 &lt;strong>io_uring&lt;/strong> 对象，提交 &lt;strong>I/O&lt;/strong> 请求。&lt;/p>
&lt;h4 id="io_uring_wait_cqe">&lt;a href="#io_uring_wait_cqe" class="header-anchor">&lt;/a>io_uring_wait_cqe
&lt;/h4>&lt;p>等待 &lt;strong>I/O&lt;/strong> 请求的完成状态。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">io_uring_wait_cqe&lt;/span>(&lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">io_uring&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>ring, &lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">io_uring_cqe&lt;/span> &lt;span style="color:#ff79c6">**&lt;/span>cqe_ptr);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>传入 &lt;strong>io_uring&lt;/strong> 对象，返回 &lt;strong>cqe&lt;/strong> 对象，用来描述一个 &lt;strong>I/O&lt;/strong> 请求的完成状态。&lt;/p>
&lt;h4 id="io_uring_submit_and_wait">&lt;a href="#io_uring_submit_and_wait" class="header-anchor">&lt;/a>io_uring_submit_and_wait
&lt;/h4>&lt;p>提交 &lt;strong>I/O&lt;/strong> 请求，并等待 &lt;strong>I/O&lt;/strong> 请求的完成状态。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">io_uring_submit_and_wait&lt;/span>(&lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">io_uring&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>ring, &lt;span style="color:#8be9fd">unsigned&lt;/span> wait_nr);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>传入 &lt;strong>io_uring&lt;/strong> 对象，提交 &lt;strong>I/O&lt;/strong> 请求，并等待 &lt;strong>I/O&lt;/strong> 请求的完成状态。&lt;/p>
&lt;p>可以看做是 &lt;strong>io_uring_submit&lt;/strong> 和 &lt;strong>io_uring_wait_cqe&lt;/strong> 的组合。&lt;/p>
&lt;h4 id="io_uring_prep_accept">&lt;a href="#io_uring_prep_accept" class="header-anchor">&lt;/a>io_uring_prep_accept
&lt;/h4>&lt;p>向 &lt;strong>Submission Queue&lt;/strong> 中添加一个 &lt;strong>accept&lt;/strong> 请求。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">io_uring_prep_accept&lt;/span>(&lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">io_uring_sqe&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>sqe, &lt;span style="color:#8be9fd">int&lt;/span> fd, &lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">sockaddr&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>addr, socklen_t &lt;span style="color:#ff79c6">*&lt;/span>addrlen, &lt;span style="color:#8be9fd">int&lt;/span> flags);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>有五个参数：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>sqe&lt;/strong>： &lt;strong>Submission Queue&lt;/strong> 的元素。&lt;/li>
&lt;li>&lt;strong>fd&lt;/strong>： &lt;strong>socket&lt;/strong> 的 &lt;strong>fd&lt;/strong>。&lt;/li>
&lt;li>&lt;strong>addr&lt;/strong>： &lt;strong>sockaddr&lt;/strong> 结构体。&lt;/li>
&lt;li>&lt;strong>addrlen&lt;/strong>： &lt;strong>sockaddr&lt;/strong> 结构体的长度。&lt;/li>
&lt;li>&lt;strong>flags&lt;/strong>： 保留参数，传 &lt;strong>0&lt;/strong> 即可。&lt;/li>
&lt;/ol>
&lt;h4 id="io_uring_prep_recv">&lt;a href="#io_uring_prep_recv" class="header-anchor">&lt;/a>io_uring_prep_recv
&lt;/h4>&lt;p>向 &lt;strong>Submission Queue&lt;/strong> 中添加一个 &lt;strong>recv&lt;/strong> 请求，也就是从fd中异步读取数据。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">io_uring_prep_recv&lt;/span>(&lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">io_uring_sqe&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>sqe, &lt;span style="color:#8be9fd">int&lt;/span> fd, &lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>buf, &lt;span style="color:#8be9fd">unsigned&lt;/span> nbytes, &lt;span style="color:#8be9fd">unsigned&lt;/span> flags);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>有五个参数：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>sqe&lt;/strong>： &lt;strong>Submission Queue&lt;/strong> 的元素。&lt;/li>
&lt;li>&lt;strong>fd&lt;/strong>： &lt;strong>socket&lt;/strong> 的 &lt;strong>fd&lt;/strong>。&lt;/li>
&lt;li>&lt;strong>buf&lt;/strong>： 接收数据的缓冲区,一般是 &lt;code>char&lt;/code> 数组的地址。&lt;/li>
&lt;li>&lt;strong>nbytes&lt;/strong>： 缓冲区的大小。&lt;/li>
&lt;li>&lt;strong>flags&lt;/strong>： 保留参数，传 &lt;strong>0&lt;/strong> 即可。&lt;/li>
&lt;/ol>
&lt;h4 id="io_uring_prep_send">&lt;a href="#io_uring_prep_send" class="header-anchor">&lt;/a>io_uring_prep_send
&lt;/h4>&lt;p>向 &lt;strong>Submission Queue&lt;/strong> 中添加一个 &lt;strong>send&lt;/strong> 请求，也就是向fd中异步写入数据。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">io_uring_prep_send&lt;/span>(&lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">io_uring_sqe&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>sqe, &lt;span style="color:#8be9fd">int&lt;/span> fd, &lt;span style="color:#ff79c6">const&lt;/span> &lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>buf, &lt;span style="color:#8be9fd">unsigned&lt;/span> nbytes, &lt;span style="color:#8be9fd">unsigned&lt;/span> flags);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>有五个参数：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>sqe&lt;/strong>： &lt;strong>Submission Queue&lt;/strong> 的元素。&lt;/li>
&lt;li>&lt;strong>fd&lt;/strong>： &lt;strong>socket&lt;/strong> 的 &lt;strong>fd&lt;/strong>。&lt;/li>
&lt;li>&lt;strong>buf&lt;/strong>： 发送数据的缓冲区，一般是 &lt;code>char&lt;/code> 指针的地址。&lt;/li>
&lt;li>&lt;strong>nbytes&lt;/strong>： 缓冲区的大小。&lt;/li>
&lt;li>&lt;strong>flags&lt;/strong>： 保留参数，传 &lt;strong>0&lt;/strong> 即可。&lt;/li>
&lt;/ol>
&lt;h4 id="io_uring_sqe_set_data">&lt;a href="#io_uring_sqe_set_data" class="header-anchor">&lt;/a>io_uring_sqe_set_data
&lt;/h4>&lt;p>设置 &lt;strong>sqe&lt;/strong> 的数据，把用户态的数据和内核绑定。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">io_uring_sqe_set_data&lt;/span>(&lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">io_uring_sqe&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>sqe, &lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>data);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>传入 &lt;strong>sqe&lt;/strong> 对象和用户态的数据，把用户态的数据和内核绑定。&lt;/p>
&lt;h4 id="io_uring_cqe_seen">&lt;a href="#io_uring_cqe_seen" class="header-anchor">&lt;/a>io_uring_cqe_seen
&lt;/h4>&lt;p>标记 &lt;strong>cqe&lt;/strong> 为已处理。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">io_uring_cqe_seen&lt;/span>(&lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">io_uring&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>ring, &lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">io_uring_cqe&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>cqe);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>传入 &lt;strong>io_uring&lt;/strong> 对象和 &lt;strong>cqe&lt;/strong> 对象，标记 &lt;strong>cqe&lt;/strong> 为已处理。&lt;/p>
&lt;h3 id="实现一个简单的tcp服务">&lt;a href="#%e5%ae%9e%e7%8e%b0%e4%b8%80%e4%b8%aa%e7%ae%80%e5%8d%95%e7%9a%84tcp%e6%9c%8d%e5%8a%a1" class="header-anchor">&lt;/a>实现一个简单的tcp服务
&lt;/h3>&lt;p>&lt;strong>io_uring&lt;/strong> 只能在 &lt;strong>linux&lt;/strong> 内核 &lt;strong>5.1&lt;/strong> 以上版本使用，所以在使用io_uring之前，需要先检查一下内核版本。
一般最新的 &lt;strong>ubuntu&lt;/strong> 和 &lt;strong>Debian&lt;/strong> 都是支持 &lt;strong>io_uring&lt;/strong> 的。&lt;/p>
&lt;p>使用 &lt;strong>liburing&lt;/strong> 需要安装 &lt;strong>liburing&lt;/strong> 库。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>sudo apt-get install liburing-dev
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>下面是一个简单的 &lt;strong>tcp&lt;/strong> 服务，功能是接收客户端的连接，然后向客户端发送一条消息。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>&lt;span style="color:#ff79c6">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;liburing.h&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;netinet/in.h&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;map&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span>&lt;span style="color:#ff79c6">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span>&lt;span style="color:#ff79c6">const&lt;/span> &lt;span style="color:#8be9fd">int&lt;/span> QUEUE_DEPTH &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">128&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span>&lt;span style="color:#ff79c6">const&lt;/span> &lt;span style="color:#8be9fd">int&lt;/span> BUFFER_SIZE &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">4096&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 10&lt;/span>&lt;span>&lt;span style="color:#ff79c6">enum&lt;/span> &lt;span style="color:#50fa7b">ConnectionType&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 11&lt;/span>&lt;span> ACCEPT,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 12&lt;/span>&lt;span> READ,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 13&lt;/span>&lt;span> WRITE,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 14&lt;/span>&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 15&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 16&lt;/span>&lt;span>&lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">Connection&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 17&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> fd;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 18&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> type{};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 19&lt;/span>&lt;span> &lt;span style="color:#8be9fd">char&lt;/span> readBuf[BUFFER_SIZE]{};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 20&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>string writeBuf;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 21&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 22&lt;/span>&lt;span> &lt;span style="color:#ff79c6">explicit&lt;/span> &lt;span style="color:#50fa7b">Connection&lt;/span>(&lt;span style="color:#8be9fd">int&lt;/span> _fd) { fd &lt;span style="color:#ff79c6">=&lt;/span> _fd; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 23&lt;/span>&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 24&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 25&lt;/span>&lt;span>std&lt;span style="color:#ff79c6">::&lt;/span>map&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>&lt;span style="color:#8be9fd">int&lt;/span>, Connection &lt;span style="color:#ff79c6">*&amp;gt;&lt;/span> connections;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 26&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 27&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">createListener&lt;/span>(sockaddr_in &lt;span style="color:#ff79c6">*&lt;/span>addr) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 28&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> listener &lt;span style="color:#ff79c6">=&lt;/span> socket(AF_INET, SOCK_STREAM, &lt;span style="color:#bd93f9">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 29&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (listener &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 30&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cerr &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;socket failed errno:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> errno &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 31&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 32&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 33&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 34&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> opt &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 35&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (setsockopt(listener, SOL_SOCKET, SO_REUSEADDR, &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>opt, &lt;span style="color:#ff79c6">sizeof&lt;/span>(opt)) &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 36&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cerr &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;setsockopt failed errno:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> errno &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 37&lt;/span>&lt;span> close(listener);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 38&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 39&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 40&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 41&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (bind(listener, &lt;span style="color:#ff79c6">reinterpret_cast&lt;/span>&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>sockaddr &lt;span style="color:#ff79c6">*&amp;gt;&lt;/span>(addr), &lt;span style="color:#ff79c6">sizeof&lt;/span>(&lt;span style="color:#ff79c6">*&lt;/span>addr)) &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 42&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cerr &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;bind failed errno:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> errno &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 43&lt;/span>&lt;span> close(listener);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 44&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 45&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 46&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 47&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (listen(listener, &lt;span style="color:#bd93f9">10&lt;/span>) &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 48&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cerr &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;listen failed errno:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> errno &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 49&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 50&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 51&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 52&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> listener;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 53&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 54&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 55&lt;/span>&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">acceptConnection&lt;/span>(io_uring &lt;span style="color:#ff79c6">*&lt;/span>ring, Connection &lt;span style="color:#ff79c6">*&lt;/span>conn, sockaddr &lt;span style="color:#ff79c6">*&lt;/span>addr, socklen_t &lt;span style="color:#ff79c6">*&lt;/span>clientLen) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 56&lt;/span>&lt;span> conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>type &lt;span style="color:#ff79c6">=&lt;/span> ACCEPT;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 57&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> sqe &lt;span style="color:#ff79c6">=&lt;/span> io_uring_get_sqe(ring);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 58&lt;/span>&lt;span> io_uring_prep_accept(sqe, conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>fd, addr, clientLen, &lt;span style="color:#bd93f9">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 59&lt;/span>&lt;span> io_uring_sqe_set_data(sqe, conn);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 60&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 61&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 62&lt;/span>&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">addSocketRead&lt;/span>(io_uring &lt;span style="color:#ff79c6">*&lt;/span>ring, Connection &lt;span style="color:#ff79c6">*&lt;/span>conn) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 63&lt;/span>&lt;span> conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>type &lt;span style="color:#ff79c6">=&lt;/span> READ;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 64&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> sqe &lt;span style="color:#ff79c6">=&lt;/span> io_uring_get_sqe(ring);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 65&lt;/span>&lt;span> io_uring_prep_recv(sqe, conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>fd, &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>readBuf, BUFFER_SIZE, &lt;span style="color:#bd93f9">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 66&lt;/span>&lt;span> io_uring_sqe_set_data(sqe, conn);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 67&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 68&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 69&lt;/span>&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">addSocketWrite&lt;/span>(io_uring &lt;span style="color:#ff79c6">*&lt;/span>ring, Connection &lt;span style="color:#ff79c6">*&lt;/span>conn) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 70&lt;/span>&lt;span> conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>type &lt;span style="color:#ff79c6">=&lt;/span> WRITE;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 71&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> sqe &lt;span style="color:#ff79c6">=&lt;/span> io_uring_get_sqe(ring);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 72&lt;/span>&lt;span> io_uring_prep_send(sqe, conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>fd, conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>writeBuf.data(), conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>writeBuf.size(), &lt;span style="color:#bd93f9">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 73&lt;/span>&lt;span> io_uring_sqe_set_data(sqe, conn);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 74&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 75&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 76&lt;/span>&lt;span>Connection &lt;span style="color:#ff79c6">*&lt;/span>&lt;span style="color:#50fa7b">newConn&lt;/span>(io_uring &lt;span style="color:#ff79c6">*&lt;/span>ring, &lt;span style="color:#8be9fd">int&lt;/span> fd) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 77&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> conn &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">new&lt;/span> Connection(fd);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 78&lt;/span>&lt;span> connections[fd] &lt;span style="color:#ff79c6">=&lt;/span> conn;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 79&lt;/span>&lt;span> addSocketRead(ring, conn);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 80&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> conn;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 81&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 82&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 83&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">uringRun&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 84&lt;/span>&lt;span> sockaddr_in addr{};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 85&lt;/span>&lt;span> addr.sin_family &lt;span style="color:#ff79c6">=&lt;/span> AF_INET;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 86&lt;/span>&lt;span> addr.sin_port &lt;span style="color:#ff79c6">=&lt;/span> htons(&lt;span style="color:#bd93f9">8088&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 87&lt;/span>&lt;span> addr.sin_addr.s_addr &lt;span style="color:#ff79c6">=&lt;/span> INADDR_ANY;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 88&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 89&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> listenFd &lt;span style="color:#ff79c6">=&lt;/span> createListener(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>addr);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 90&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (listenFd &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 91&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 92&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 93&lt;/span>&lt;span> socklen_t clientLen &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">sizeof&lt;/span>(addr);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 94&lt;/span>&lt;span> io_uring ring{};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 95&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (io_uring_queue_init(QUEUE_DEPTH, &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>ring, &lt;span style="color:#bd93f9">0&lt;/span>) &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 96&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cerr &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;io_uring_queue_init failed errno:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> errno &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 97&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 98&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 99&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> lConn &lt;span style="color:#ff79c6">=&lt;/span> newConn(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>ring, listenFd);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">100&lt;/span>&lt;span> acceptConnection(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>ring, lConn, &lt;span style="color:#ff79c6">reinterpret_cast&lt;/span>&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>sockaddr &lt;span style="color:#ff79c6">*&amp;gt;&lt;/span> (&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>addr), &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>clientLen);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">101&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (io_uring_submit(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>ring) &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">102&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cerr &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;io_uring_submit failed errno:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> errno &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">103&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">104&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">105&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">106&lt;/span>&lt;span> io_uring_cqe &lt;span style="color:#ff79c6">*&lt;/span>cqes[QUEUE_DEPTH];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">107&lt;/span>&lt;span> &lt;span style="color:#ff79c6">while&lt;/span> (&lt;span style="color:#8be9fd;font-style:italic">true&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">108&lt;/span>&lt;span> &lt;span style="color:#6272a4">//等待事件完成
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">109&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#8be9fd">int&lt;/span> ret &lt;span style="color:#ff79c6">=&lt;/span> io_uring_submit_and_wait(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>ring, &lt;span style="color:#bd93f9">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">110&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (ret &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">111&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cerr &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;io_uring_wait_cqe failed errno:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> errno &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">112&lt;/span>&lt;span> &lt;span style="color:#ff79c6">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">113&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">114&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">115&lt;/span>&lt;span> &lt;span style="color:#6272a4">//获取完成的事件
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">116&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#ff79c6">auto&lt;/span> num &lt;span style="color:#ff79c6">=&lt;/span> io_uring_peek_batch_cqe(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>ring, cqes, QUEUE_DEPTH);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">117&lt;/span>&lt;span> &lt;span style="color:#ff79c6">for&lt;/span> (&lt;span style="color:#8be9fd">int&lt;/span> i &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>; i &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> num; &lt;span style="color:#ff79c6">++&lt;/span>i) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">118&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> conn &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">reinterpret_cast&lt;/span>&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>Connection &lt;span style="color:#ff79c6">*&amp;gt;&lt;/span> (cqes[i]&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>user_data);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">119&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>type &lt;span style="color:#ff79c6">==&lt;/span> ACCEPT) {&lt;span style="color:#6272a4">//新连接
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">120&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#8be9fd">int&lt;/span> clientFd &lt;span style="color:#ff79c6">=&lt;/span> cqes[i]&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>res;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">121&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> newCLi &lt;span style="color:#ff79c6">=&lt;/span> newConn(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>ring, clientFd);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">122&lt;/span>&lt;span> addSocketRead(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>ring, newCLi);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">123&lt;/span>&lt;span> acceptConnection(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>ring, lConn, &lt;span style="color:#ff79c6">reinterpret_cast&lt;/span>&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>sockaddr &lt;span style="color:#ff79c6">*&amp;gt;&lt;/span> (&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>addr), &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>clientLen);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">124&lt;/span>&lt;span> } &lt;span style="color:#ff79c6">else&lt;/span> &lt;span style="color:#ff79c6">if&lt;/span> (conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>type &lt;span style="color:#ff79c6">==&lt;/span> READ) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">125&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> readSize &lt;span style="color:#ff79c6">=&lt;/span> cqes[i]&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>res;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">126&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (readSize &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {&lt;span style="color:#6272a4">//读取失败(比如客户端断开连接)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">127&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> shutdown(conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>fd, SHUT_RDWR);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">128&lt;/span>&lt;span> connections.erase(conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>fd);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">129&lt;/span>&lt;span> &lt;span style="color:#ff79c6">delete&lt;/span> conn;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">130&lt;/span>&lt;span> } &lt;span style="color:#ff79c6">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">131&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;read:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>readBuf &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">132&lt;/span>&lt;span> conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>writeBuf &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;hello client&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">133&lt;/span>&lt;span> addSocketWrite(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>ring, conn);&lt;span style="color:#6272a4">//向客户端写数据
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">134&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">135&lt;/span>&lt;span> } &lt;span style="color:#ff79c6">else&lt;/span> &lt;span style="color:#ff79c6">if&lt;/span> (conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>type &lt;span style="color:#ff79c6">==&lt;/span> WRITE) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">136&lt;/span>&lt;span> addSocketRead(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>ring, conn);&lt;span style="color:#6272a4">// 把这个连接加入读事件
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">137&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">138&lt;/span>&lt;span> io_uring_cqe_seen(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>ring, cqes[i]);&lt;span style="color:#6272a4">// mark the cqe as processed
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">139&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">140&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">141&lt;/span>&lt;span> io_uring_queue_exit(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>ring);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">142&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">143&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">144&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">145&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">146&lt;/span>&lt;span> uringRun();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">147&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">148&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>编译这段代码的时候，需要链接 &lt;strong>liburing&lt;/strong> 库。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>g++ -o server server.cpp -luring
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>createListener&lt;/code> 函数用来创建一个 &lt;strong>socket&lt;/strong> 监听 &lt;strong>8088&lt;/strong> 端口。这个函数没什么特别的，就是创建一个 &lt;strong>socket&lt;/strong>，然后绑定 &lt;strong>8088&lt;/strong> 端口，然后监听。&lt;/p>
&lt;p>&lt;code>acceptConnection&lt;/code> 函数用来接收客户端的连接。这个函数调用 &lt;strong>io_uring_prep_accept&lt;/strong> 函数，向 &lt;strong>Submission Queue&lt;/strong> 中添加一个 &lt;strong>accept&lt;/strong> 请求。&lt;/p>
&lt;p>&lt;code>addSocketRead&lt;/code> 函数用来向 &lt;strong>Submission Queue&lt;/strong> 中添加一个 &lt;strong>recv&lt;/strong> 请求，也就是从 &lt;strong>fd&lt;/strong> 中异步读取数据。&lt;/p>
&lt;p>&lt;code>addSocketWrite&lt;/code> 函数用来向 &lt;strong>Submission Queue&lt;/strong> 中添加一个 &lt;strong>send&lt;/strong> 请求，也就是向 &lt;strong>fd&lt;/strong> 中异步写入数据。&lt;/p>
&lt;p>&lt;code>newConn&lt;/code> 函数用来创建一个新的连接。这个函数会调用 &lt;code>addSocketRead&lt;/code> 函数，向 &lt;strong>Submission Queue&lt;/strong> 中添加一个 &lt;strong>recv&lt;/strong> 请求。&lt;/p>
&lt;p>&lt;code>uringRun&lt;/code> 函数是主函数。这个函数会创建一个 &lt;strong>io_uring&lt;/strong> 对象，然后调用 &lt;code>createListener&lt;/code> 函数创建一个监听 &lt;strong>socket&lt;/strong>，然后调用 &lt;code>newConn&lt;/code> 函数创建一个新的连接。&lt;/p>
&lt;p>有一个知识点需要注意一下，在 io_uring中，每次获取的 &lt;strong>cqe&lt;/strong> 在使用完之后，需要调用 &lt;code>io_uring_cqe_seen&lt;/code> 函数，标记 &lt;strong>cqe&lt;/strong> 为已处理。
同时处理的时候，也会把 这个 &lt;strong>cqe&lt;/strong> 从 &lt;strong>Completion Queue&lt;/strong> 中移除，对应的 &lt;code>fd&lt;/code> 也会从 &lt;strong>io_uring&lt;/strong> 中移除。
所以，为了保证后续能继续接收到 &lt;strong>fd&lt;/strong> 的 &lt;strong>I/O&lt;/strong> 事件，需要在处理完 &lt;strong>cqe&lt;/strong> 之后，再次调用 &lt;code>addSocketRead&lt;/code> 函数，向 &lt;strong>Submission Queue&lt;/strong> 中添加一个 &lt;strong>recv&lt;/strong> 请求。&lt;/p>
&lt;p>这些函数的内容都比较简单，就不再详细介绍了。主要看一下 &lt;strong>while&lt;/strong> 循环的内容。&lt;/p>
&lt;p>&lt;code>int ret = io_uring_submit_and_wait(&amp;amp;ring, 1);&lt;/code> 这个函数会提交 &lt;strong>I/O&lt;/strong> 请求，并等待 &lt;strong>I/O&lt;/strong> 请求的完成状态。这个函数会阻塞，直到有 1个 &lt;strong>I/O&lt;/strong> 请求完成。&lt;/p>
&lt;p>这里可以使用 &lt;code>io_uring_submit&lt;/code> 这个函数只提交 &lt;strong>I/O&lt;/strong> 请求，不等待 &lt;strong>I/O&lt;/strong> 请求的完成状态。但是这样的话，while循环会一直循环，不会阻塞，对应的表现就是 &lt;strong>CPU&lt;/strong> 占用率会很高。
这种情况适用于 &lt;strong>I/O&lt;/strong> 请求比较多的情况，比如 &lt;strong>nginx&lt;/strong> 这种 &lt;strong>web&lt;/strong> 服务器。&lt;/p>
&lt;p>一般情况下，使用 &lt;code>io_uring_submit_and_wait&lt;/code> 这个函数就可以了。&lt;/p>
&lt;p>如果 返回的 &lt;strong>ret&lt;/strong> 小于 &lt;strong>0&lt;/strong>，说明出错了，这里简单的打印一下错误信息，然后退出。&lt;/p>
&lt;p>&lt;code>auto num = io_uring_peek_batch_cqe(&amp;amp;ring, cqes, QUEUE_DEPTH);&lt;/code> 这个函数会获取 &lt;strong>Completion Queue&lt;/strong> 中的 &lt;strong>cqe&lt;/strong>，一次最多获取 &lt;strong>QUEUE_DEPTH&lt;/strong> 个 &lt;strong>cqe&lt;/strong>。&lt;/p>
&lt;p>这个函数有点类似于 &lt;strong>epoll&lt;/strong> 的 &lt;strong>epoll_wait&lt;/strong> 函数，会一次性获取多个 &lt;strong>cqe&lt;/strong>。&lt;/p>
&lt;p>然后遍历 &lt;strong>cqe&lt;/strong>，根据 &lt;strong>cqe&lt;/strong> 的 &lt;strong>type&lt;/strong> 来处理 &lt;strong>I/O&lt;/strong> 事件。在之前的submit的时候，指定了有 &lt;strong>ACCEPT&lt;/strong>、&lt;strong>READ&lt;/strong>、&lt;strong>WRITE&lt;/strong> 三种 &lt;strong>I/O&lt;/strong> 事件。&lt;/p>
&lt;p>因为之前的 &lt;strong>cqe&lt;/strong> 中的 &lt;strong>user_data&lt;/strong> 是 &lt;strong>Connection&lt;/strong> 对象的指针，所以可以根据 &lt;strong>cqe&lt;/strong> 的 &lt;strong>user_data&lt;/strong> 来获取 &lt;strong>Connection&lt;/strong> 对象，然后根据 &lt;strong>Connection&lt;/strong> 对象的 &lt;strong>type&lt;/strong> 来处理 &lt;strong>I/O&lt;/strong> 事件。
所以可以 &lt;code>reinterpret_cast&amp;lt;Connection *&amp;gt; (cqes[i]-&amp;gt;user_data);&lt;/code>强转来获取 &lt;strong>Connection&lt;/strong> 对象。&lt;/p>
&lt;p>如果 &lt;strong>type&lt;/strong> 是 &lt;strong>ACCEPT&lt;/strong>，说明是新的连接，就调用 &lt;code>newConn&lt;/code> 函数创建一个新的连接，然后调用 &lt;code>acceptConnection&lt;/code> 函数接收新的连接。
在接收新的连接之后，需要再次调用 &lt;code>acceptConnection&lt;/code> 函数，把listener的socket放回io_uring中，后面才能继续工作。&lt;/p>
&lt;p>如果 &lt;strong>type&lt;/strong> 是 &lt;strong>READ&lt;/strong>，说明是读事件，就读取 &lt;strong>cqe&lt;/strong> 的 &lt;strong>res&lt;/strong> 字段，如果小于 &lt;strong>0&lt;/strong>，说明读取失败，比如客户端断开连接，就关闭 &lt;strong>fd&lt;/strong>，然后从 &lt;strong>connections&lt;/strong> 中移除这个 &lt;strong>fd&lt;/strong>，然后释放 &lt;strong>Connection&lt;/strong> 对象。
如果读取成功，就打印读取的数据，然后向客户端发送一条消息。&lt;/p>
&lt;p>如果 &lt;strong>type&lt;/strong> 是 &lt;strong>WRITE&lt;/strong>，说明是写事件，在这里就是向客户端写数据完成了。
调用 &lt;code>addSocketRead&lt;/code> 函数，向 &lt;strong>Submission Queue&lt;/strong> 中添加一个 读的请求，然后这个 &lt;strong>fd&lt;/strong> 就会继续接收 &lt;strong>I/O&lt;/strong> 事件。&lt;/p>
&lt;p>最后调用 &lt;code>io_uring_cqe_seen&lt;/code> 函数，标记 &lt;strong>cqe&lt;/strong> 为已处理。&lt;/p>
&lt;p>这样一个简单的 &lt;strong>tcp&lt;/strong> 服务就实现了。这个服务只是一个简单的例子，没法用在生产环境中，只是用来学习 &lt;strong>iouring&lt;/strong> 的基本使用。&lt;/p>
&lt;p>像是中间的错误处理，连接的超时等问题都没有处理，这些问题需要根据实际情况来处理。&lt;/p>
&lt;p>这个例子中，一个 &lt;strong>socket&lt;/strong> 同时只能读或者写，不能同时读写，这个问题也需要根据实际情况来处理。&lt;/p>
&lt;h2 id="总结">&lt;a href="#%e6%80%bb%e7%bb%93" class="header-anchor">&lt;/a>总结
&lt;/h2>&lt;p>这篇文章主要介绍了 &lt;strong>iouring&lt;/strong> 的基本使用，实现了一个简单的 &lt;strong>tcp&lt;/strong> 服务。只是介绍了 &lt;strong>iouring&lt;/strong> 的基本使用，没有涉及底层实现。
后面有时间再去学一下 &lt;strong>liburing&lt;/strong> 的源码，看看底层是如何实现的。&lt;/p>
&lt;p>其实 &lt;strong>iouring&lt;/strong> 最主要的两个操作是提交 &lt;strong>I/O&lt;/strong> 请求到 &lt;strong>sq&lt;/strong> ，然后等待 &lt;strong>I/O&lt;/strong> 请求的完成后,从 &lt;strong>cq&lt;/strong> 获取然后处理。&lt;/p>
&lt;p>看很多人都说 &lt;strong>iouring&lt;/strong> 性能很高，尤其是在 &lt;strong>I/O&lt;/strong> 密集型的场景下，性能提升很明显。这部分内容还没有验证，后面有时间再去验证一下。&lt;/p>
&lt;p>因为也是初学 &lt;strong>iouring&lt;/strong>，所以文章中可能有错误，欢迎批评指正。&lt;/p>
&lt;hr>
&lt;h2 id="追更">&lt;a href="#%e8%bf%bd%e6%9b%b4" class="header-anchor">&lt;/a>追更
&lt;/h2>&lt;p>&lt;strong>2024-10-23&lt;/strong>&lt;/p>
&lt;p>在服务端加了一点代码，写了一个简单的 &lt;strong>HTTP&lt;/strong> 服务器，可以通过浏览器访问，然后找了一个 HTTP 压测工具，测试了一下性能。&lt;/p>
&lt;p>HTTP 服务器返回的内容：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>writeBuf &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;HTTP/1.1 200 OK&lt;/span>&lt;span style="color:#f1fa8c">\r\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;Content-Length: 55&lt;/span>&lt;span style="color:#f1fa8c">\r\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;Content-Type: text/html&lt;/span>&lt;span style="color:#f1fa8c">\r\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;Connection: keep-alive&lt;/span>&lt;span style="color:#f1fa8c">\r\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;Date: Mon, 23 Oct 2024 13:24:24 GMT&lt;/span>&lt;span style="color:#f1fa8c">\r\n\r\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;&amp;lt;h1&amp;gt;hello&amp;lt;/h1&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>同样的，使用 &lt;strong>epoll&lt;/strong> 也实现了一个 &lt;strong>HTTP&lt;/strong> 服务器，返回了同样的内容。&lt;/p>
&lt;p>几轮测试下来，发现 &lt;strong>epoll&lt;/strong> 的性能要比 &lt;strong>iouring&lt;/strong> 高一点。至于原因还在研究中。&lt;/p>
&lt;p>猜测的原因可能是 在数据量很小的时候， &lt;strong>iouring&lt;/strong> 的性能发挥不出来，甚至效果更差了。
还有一个原因可能是我使用的方法有问题，这个等后面继续研究。&lt;/p></description></item><item><title>tcp loopbcak与unix domain区别与性能对比，在Linux系统中如何使用这两种网络通信方式，展示Unix套接字的使用方法</title><link>https://lqxhub.github.io/posts/afb2aaad/</link><pubDate>Sun, 23 Oct 2022 17:35:05 +0000</pubDate><guid>https://lqxhub.github.io/posts/afb2aaad/</guid><description>&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/8025.jpg_wh860.jpg" alt="Featured image of post tcp loopbcak与unix domain区别与性能对比，在Linux系统中如何使用这两种网络通信方式，展示Unix套接字的使用方法" />&lt;h2 id="访问本机网络的方式">&lt;a href="#%e8%ae%bf%e9%97%ae%e6%9c%ac%e6%9c%ba%e7%bd%91%e7%bb%9c%e7%9a%84%e6%96%b9%e5%bc%8f" class="header-anchor">&lt;/a>访问本机网络的方式
&lt;/h2>&lt;p>访问同一台电脑上的网络，一般用的地址是 &lt;code>localhost&lt;/code> 或者 &lt;code>127.0.0.1&lt;/code>这两种方式，比如本机有一个Nginx服务器，想要访问本机Nginx，在浏览器中输入&lt;code>localhost&lt;/code> 或者 &lt;code>127.0.0.1&lt;/code>就能访问到Nginx的首页。如果要连接到本机的mysql， 在连接的时候，把地址填&lt;code>127.0.0.1&lt;/code>就好了&lt;/p>
&lt;h2 id="tcp-本地回环">&lt;a href="#tcp-%e6%9c%ac%e5%9c%b0%e5%9b%9e%e7%8e%af" class="header-anchor">&lt;/a>tcp 本地回环
&lt;/h2>&lt;p>为什么使用&lt;code>localhost&lt;/code>或者&lt;code>1270.0.1&lt;/code>就能访问本机的网络或者程序呢，是因为在每台电脑上都有一个特殊的网络，这个网络就是本地回环（local loopback）。&lt;code>localhost&lt;/code>可以看做是 127.0.0.1 的域名。一般在hosts文件中都会有一条配置，使 &lt;code>localhost&lt;/code> 映射到&lt;code>1270.0.0.1&lt;/code>&lt;/p>
&lt;p>在linux系统(debin 11)中, 使用 &lt;code>ip a&lt;/code>命令可以查看本机的网络&lt;/p>
&lt;p>
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-c3a8b53e75c2b3d6.webp">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-c3a8b53e75c2b3d6.webp" alt="" />
&lt;/a>
&lt;/div>
&lt;/p>
&lt;p>可以看到，第一个网络就是本地回环（loopback），他的 ip 地址就是就是 &lt;code>127.0.0.1&lt;/code>&lt;/p>
&lt;p>本地回环也是网络，是一个特殊的虚拟网卡。使用本地回环网络时，数据也会经过网络栈的封包和解包。&lt;/p>
&lt;p>
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-69e2bb8bc11cc8d3.webp">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-69e2bb8bc11cc8d3.webp" alt="" />
&lt;/a>
&lt;/div>
&lt;/p>
&lt;p>可以看到，tcp属于运输层（传输层）协议，所以在本机发送数据时，也会经过&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>传输层-&amp;gt;网络层-&amp;gt;lookback-&amp;gt;网络层-&amp;gt;传输层
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样一个过程。&lt;/p>
&lt;h2 id="unix-domain">&lt;a href="#unix-domain" class="header-anchor">&lt;/a>unix domain
&lt;/h2>&lt;p>上面说了什么是 tcp 本地回环，那什么是 &lt;code>unix domain&lt;/code> 呢。unix domain 严格来说不是网络，是&lt;code>unix&lt;/code> 和 &lt;code>linux&lt;/code>系统提供的一个进程间通信的方式，有点类似管道。看名字也知道，unix domain 只支持&lt;code>unix&lt;/code>类的系统中，&lt;code>windows&lt;/code>系统是不支持的。unix 的使用方式和 tcp很像，但是底层的工作原理差别却很大。&lt;/p>
&lt;p>unix domain 中的数据传输 就不需要网络栈了，可以看做是操作系统做了一次内存中的一个数据复制。&lt;/p>
&lt;h2 id="使用-unix-domain">&lt;a href="#%e4%bd%bf%e7%94%a8-unix-domain" class="header-anchor">&lt;/a>使用 unix domain
&lt;/h2>&lt;p>如何使用tcp 相信都很熟了，就不上demo了。只上 unix domain 的代码吧。因为 unix domain 不支持 windows系统，所以要在linux或者unix系统中测试，下面会使用go在debin中测试一下&lt;/p>
&lt;p>unix domain 和tcp 一样 也是分 &lt;code>服务器&lt;/code> 和 &lt;code>客户端&lt;/code> 的&lt;/p>
&lt;p>&lt;code>unix domain 服务器 &lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">package&lt;/span> main
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span>&lt;span style="color:#ff79c6">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;io&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;net&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">func&lt;/span> &lt;span style="color:#50fa7b">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span> listen, err &lt;span style="color:#ff79c6">:=&lt;/span> &lt;span style="color:#50fa7b">GetUnixListen&lt;/span>(&lt;span style="color:#f1fa8c">&amp;#34;/tmp/test_server.sock&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> err &lt;span style="color:#ff79c6">!=&lt;/span> &lt;span style="color:#ff79c6">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span> &lt;span style="color:#8be9fd;font-style:italic">panic&lt;/span>(err)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span> &lt;span style="color:#ff79c6">defer&lt;/span> listen.&lt;span style="color:#50fa7b">Close&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span> &lt;span style="color:#ff79c6">for&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span> conn, err &lt;span style="color:#ff79c6">:=&lt;/span> listen.&lt;span style="color:#50fa7b">Accept&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> err &lt;span style="color:#ff79c6">!=&lt;/span> &lt;span style="color:#ff79c6">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>&lt;span> &lt;span style="color:#8be9fd;font-style:italic">panic&lt;/span>(err)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22&lt;/span>&lt;span> buf &lt;span style="color:#ff79c6">:=&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">make&lt;/span>([]&lt;span style="color:#8be9fd">byte&lt;/span>, &lt;span style="color:#bd93f9">1024&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23&lt;/span>&lt;span> &lt;span style="color:#6272a4">//读数据
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> n, err &lt;span style="color:#ff79c6">:=&lt;/span> conn.&lt;span style="color:#50fa7b">Read&lt;/span>(buf)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> err &lt;span style="color:#ff79c6">!=&lt;/span> &lt;span style="color:#ff79c6">nil&lt;/span> &lt;span style="color:#ff79c6">&amp;amp;&amp;amp;&lt;/span> err &lt;span style="color:#ff79c6">!=&lt;/span> io.EOF {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26&lt;/span>&lt;span> &lt;span style="color:#8be9fd;font-style:italic">panic&lt;/span>(err)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28&lt;/span>&lt;span> fmt.&lt;span style="color:#50fa7b">Printf&lt;/span>(&lt;span style="color:#f1fa8c">&amp;#34;%s\n&amp;#34;&lt;/span>, buf[:n])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30&lt;/span>&lt;span> &lt;span style="color:#6272a4">//写数据
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> _, err = conn.&lt;span style="color:#50fa7b">Write&lt;/span>([]&lt;span style="color:#8be9fd;font-style:italic">byte&lt;/span>(&lt;span style="color:#f1fa8c">&amp;#34;hello&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32&lt;/span>&lt;span> &lt;span style="color:#8be9fd;font-style:italic">panic&lt;/span>(err)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">func&lt;/span> &lt;span style="color:#50fa7b">GetUnixListen&lt;/span>(addr &lt;span style="color:#8be9fd">string&lt;/span>) (net.Listener, &lt;span style="color:#8be9fd">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37&lt;/span>&lt;span> listen, err &lt;span style="color:#ff79c6">:=&lt;/span> net.&lt;span style="color:#50fa7b">Listen&lt;/span>(&lt;span style="color:#f1fa8c">&amp;#34;unix&amp;#34;&lt;/span>, addr)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> err &lt;span style="color:#ff79c6">!=&lt;/span> &lt;span style="color:#ff79c6">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#ff79c6">nil&lt;/span>, err
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> listen, &lt;span style="color:#ff79c6">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>unix domain&lt;/code> 客户端&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">package&lt;/span> main
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span>&lt;span style="color:#ff79c6">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;io&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;net&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">func&lt;/span> &lt;span style="color:#50fa7b">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span> conn, err &lt;span style="color:#ff79c6">:=&lt;/span> &lt;span style="color:#50fa7b">GetUnixConn&lt;/span>(&lt;span style="color:#f1fa8c">&amp;#34;/tmp/test_server.sock&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> err &lt;span style="color:#ff79c6">!=&lt;/span> &lt;span style="color:#ff79c6">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span> &lt;span style="color:#8be9fd;font-style:italic">panic&lt;/span>(err)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span> buff &lt;span style="color:#ff79c6">:=&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">make&lt;/span>([]&lt;span style="color:#8be9fd">byte&lt;/span>, &lt;span style="color:#bd93f9">1024&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span> n, err &lt;span style="color:#ff79c6">:=&lt;/span> conn.&lt;span style="color:#50fa7b">Read&lt;/span>(buff)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> err &lt;span style="color:#ff79c6">!=&lt;/span> &lt;span style="color:#ff79c6">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> err &lt;span style="color:#ff79c6">!=&lt;/span> io.EOF {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>&lt;span> &lt;span style="color:#8be9fd;font-style:italic">panic&lt;/span>(err)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22&lt;/span>&lt;span> fmt.&lt;span style="color:#50fa7b">Printf&lt;/span>(&lt;span style="color:#f1fa8c">&amp;#34;%s\n&amp;#34;&lt;/span>, buff[:n])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24&lt;/span>&lt;span> conn.&lt;span style="color:#50fa7b">Write&lt;/span>([]&lt;span style="color:#8be9fd;font-style:italic">byte&lt;/span>(&lt;span style="color:#f1fa8c">&amp;#34;ok&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">func&lt;/span> &lt;span style="color:#50fa7b">GetUnixConn&lt;/span>(addr &lt;span style="color:#8be9fd">string&lt;/span>) (net.Conn, &lt;span style="color:#8be9fd">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28&lt;/span>&lt;span> conn, err &lt;span style="color:#ff79c6">:=&lt;/span> net.&lt;span style="color:#50fa7b">Dial&lt;/span>(&lt;span style="color:#f1fa8c">&amp;#34;unix&amp;#34;&lt;/span>, addr)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> err &lt;span style="color:#ff79c6">!=&lt;/span> &lt;span style="color:#ff79c6">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#ff79c6">nil&lt;/span>, err
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> conn, &lt;span style="color:#ff79c6">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到，在go中使用 unix domain的api 和tcp基本没有区别。有区别的地方是在监听和连接的地方。&lt;/p>
&lt;p>tcp 通过 &lt;code>IP&lt;/code>+&lt;code>端口&lt;/code>的方式来确定地址的，而unix domain 同时一个文件符 来确定地址。&lt;/p>
&lt;p>当unix domain开启监听后，会在目录中创建一个文件。在上面的例子中，就会在 &lt;code>/tmp&lt;/code> 目录中创建一个&lt;code>test_server.sock&lt;/code> 文件。
这是一个特殊的文件通过 &lt;code>file&lt;/code>命令可以看到&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>file test_server.sock
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span>test_server.sock: socket
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果在同一个目录下有一个同名的文件，unix domain 的监听就会失败。就像一个端口默认只能被监听一次一样。&lt;/p>
&lt;h2 id="unix-domain-和-tcp-loopback-性能对比">&lt;a href="#unix-domain-%e5%92%8c-tcp-loopback-%e6%80%a7%e8%83%bd%e5%af%b9%e6%af%94" class="header-anchor">&lt;/a>unix domain 和 tcp loopback 性能对比
&lt;/h2>&lt;p>我没有过严格的性能测试，只是写了一些简单的测试看了一下，在发送小的数据包时，unix domain 的性能会好于 tcp。当发送大的数据包时，两者的性能差距可以忽略不计了。&lt;/p>
&lt;p>这个也是符合预期的，小的数据包时，tcp会经过网络协议栈，当数据量变大时，网络协议栈的影响可以忽略不计了。&lt;/p>
&lt;h2 id="总结">&lt;a href="#%e6%80%bb%e7%bb%93" class="header-anchor">&lt;/a>总结
&lt;/h2>&lt;ol>
&lt;li>tcp look back&lt;/li>
&lt;/ol>
&lt;p>可以在多个平台使用，通过本机的虚拟网卡完成数据传输，需要经过网络协议栈，性能开销相对大一些。&lt;/p>
&lt;ol start="2">
&lt;li>unix domain&lt;/li>
&lt;/ol>
&lt;p>只能在unix类系统中使用，是操作系统提供的一种进程间通信方式。不需要经过网络协议栈，性能相对高一些。&lt;/p></description></item></channel></rss>