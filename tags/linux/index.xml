<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Linux on QX 的笔记</title><link>https://lqxhub.github.io/tags/linux/</link><description>Recent content in Linux on QX 的笔记</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sun, 24 Aug 2025 15:09:50 +0800</lastBuildDate><atom:link href="https://lqxhub.github.io/tags/linux/index.xml" rel="self" type="application/rss+xml"/><item><title>一文讲清楚所有IO，同步IO，异步IO，阻塞IO，非阻塞IO，IO多路复用，网络编程</title><link>https://lqxhub.github.io/posts/fad3c120/</link><pubDate>Sun, 24 Aug 2025 15:09:50 +0800</pubDate><guid>https://lqxhub.github.io/posts/fad3c120/</guid><description>&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/6d6b0bc8be14ed7f83dc3fc00e09b7e1490f76d1.jpg" alt="Featured image of post 一文讲清楚所有IO，同步IO，异步IO，阻塞IO，非阻塞IO，IO多路复用，网络编程" />&lt;p>前两天写了一篇 &lt;strong>C++协程 + io_uring&lt;/strong> 的 &lt;a class="link" href="https://lqxhub.github.io/posts/d26369fd" >文章&lt;/a> ，里面介绍了如何在 C++ 中结合使用协程和 io_uring 来实现异步 I/O 操作。写完自己在审阅时，回想起来自己刚接触 linux 网络编程时走过的一些弯路，一些错误的理解。所有就想着写一篇 I/O 的文章总结一下。 所以今天我们就来聊聊常见的IO类型，同步 I/O ，异步 I/O ，阻塞 I/O ，非阻塞 I/O 还有 IO 多路复用。&lt;/p>
&lt;p>一开始我错误的认为，非阻塞 I/O 就是异步 I/O ，阻塞 I/O 就是同步 I/O 。后来才发现，原来并不是这样的。IO 的分类有两个维度，一个是按调用方式分为：&lt;strong>同步&lt;/strong> 和 &lt;strong>异步&lt;/strong>；另一个是按等待方式分为：&lt;strong>阻塞&lt;/strong> 和 &lt;strong>非阻塞&lt;/strong>。&lt;/p>
&lt;p>简单说 &lt;strong>阻塞/非阻塞 是指 函数调用时的返回行为&lt;/strong> ，而 &lt;strong>同步/异步 是指 I/O的完成通知&lt;/strong> 。
而 &lt;strong>I/O多路复用&lt;/strong> 则是一种特殊的技术，是提升效率的一种机制，它允许单个线程同时管理多个 I/O 操作。通过使用 &lt;code>select&lt;/code>、&lt;code>poll&lt;/code> 或 &lt;code>epoll&lt;/code> 等系统调用，应用程序可以在多个文件描述符上等待事件的发生，从而实现高效的 I/O 处理。I/O多路复用通常与非阻塞 I/O 结合使用，以提高性能和响应能力。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>模型&lt;/th>
&lt;th>应用行为&lt;/th>
&lt;th>等待位置&lt;/th>
&lt;th>优缺点&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>同步 I/O&lt;/td>
&lt;td>等待完成&lt;/td>
&lt;td>应用自己阻塞&lt;/td>
&lt;td>简单，但效率低&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>异步 I/O&lt;/td>
&lt;td>发起请求立刻返回，完成后通知&lt;/td>
&lt;td>内核异步完成&lt;/td>
&lt;td>最理想，但实现复杂&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>阻塞 I/O&lt;/td>
&lt;td>调用阻塞直到数据就绪&lt;/td>
&lt;td>应用阻塞&lt;/td>
&lt;td>编程简单，但浪费等待时间&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>非阻塞 I/O&lt;/td>
&lt;td>数据没好立即返回，需要轮询&lt;/td>
&lt;td>应用层轮询&lt;/td>
&lt;td>避免阻塞，但效率差&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>I/O 多路复用&lt;/td>
&lt;td>统一等待多个 I/O 就绪&lt;/td>
&lt;td>内核等待，应用一次醒来处理&lt;/td>
&lt;td>高效，常用于高并发服务器&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>下面用 C 为每种 I/O 类型写一个简单的例子，来帮助理解。&lt;/p>
&lt;p>在linux中，一切都是文件，包括网络连接和设备。通过文件描述符，应用程序可以以统一的方式进行I/O操作，所以有些例子中，使用 &lt;code>open&lt;/code>、&lt;code>read&lt;/code> 和 &lt;code>close&lt;/code> 等系统调用来进行文件的读取操作。对于网络 I/O，应用程序可以使用相同的接口来进行数据的发送和接收。&lt;/p>
&lt;h2 id="阻塞io">&lt;a href="#%e9%98%bb%e5%a1%9eio" class="header-anchor">&lt;/a>阻塞I/O
&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;fcntl.h&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span>&lt;span style="color:#ff79c6">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span> &lt;span style="color:#8be9fd">char&lt;/span> buffer[&lt;span style="color:#bd93f9">1024&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> fd &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#50fa7b">open&lt;/span>(&lt;span style="color:#f1fa8c">&amp;#34;file.txt&amp;#34;&lt;/span>, O_RDONLY);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (fd &lt;span style="color:#ff79c6">==&lt;/span> &lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span> &lt;span style="color:#50fa7b">perror&lt;/span>(&lt;span style="color:#f1fa8c">&amp;#34;open&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span> &lt;span style="color:#8be9fd">ssize_t&lt;/span> bytesRead &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#50fa7b">read&lt;/span>(fd, buffer, &lt;span style="color:#ff79c6">sizeof&lt;/span>(buffer));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (bytesRead &lt;span style="color:#ff79c6">==&lt;/span> &lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span> &lt;span style="color:#50fa7b">perror&lt;/span>(&lt;span style="color:#f1fa8c">&amp;#34;read&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span> &lt;span style="color:#50fa7b">close&lt;/span>(fd);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>&lt;span> &lt;span style="color:#50fa7b">printf&lt;/span>(&lt;span style="color:#f1fa8c">&amp;#34;Read %zd bytes: %.*s&lt;/span>&lt;span style="color:#f1fa8c">\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>, bytesRead, (&lt;span style="color:#8be9fd">int&lt;/span>)bytesRead, buffer);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20&lt;/span>&lt;span> &lt;span style="color:#50fa7b">close&lt;/span>(fd);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>read&lt;/code> 函数 操作默认的 文件描述符 (fd) 是阻塞的，也就是说，如果没有数据可读，它会一直等待，直到有数据可读为止。这种方式在某些情况下是合适的，但在高并发的网络应用中，可能会导致性能瓶颈。
优势就是这种阻塞方式编程简单，容易理解。&lt;/p>
&lt;h2 id="非阻塞io">&lt;a href="#%e9%9d%9e%e9%98%bb%e5%a1%9eio" class="header-anchor">&lt;/a>非阻塞I/O
&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;fcntl.h&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;errno.h&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;string.h&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span>&lt;span style="color:#ff79c6">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span> &lt;span style="color:#8be9fd">char&lt;/span> buf[&lt;span style="color:#bd93f9">100&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> flags &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#50fa7b">fcntl&lt;/span>(STDIN_FILENO, F_GETFL, &lt;span style="color:#bd93f9">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span> &lt;span style="color:#50fa7b">fcntl&lt;/span>(STDIN_FILENO, F_SETFL, flags &lt;span style="color:#ff79c6">|&lt;/span> O_NONBLOCK); &lt;span style="color:#6272a4">// 设置非阻塞
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span> &lt;span style="color:#50fa7b">printf&lt;/span>(&lt;span style="color:#f1fa8c">&amp;#34;非阻塞输入（没有输入时立即返回）：&lt;/span>&lt;span style="color:#f1fa8c">\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span> &lt;span style="color:#ff79c6">while&lt;/span> (&lt;span style="color:#bd93f9">1&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span> &lt;span style="color:#8be9fd">ssize_t&lt;/span> n &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#50fa7b">read&lt;/span>(STDIN_FILENO, buf, &lt;span style="color:#ff79c6">sizeof&lt;/span>(buf)&lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (n &lt;span style="color:#ff79c6">&amp;gt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span> buf[n] &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#f1fa8c">&amp;#39;\0&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span> &lt;span style="color:#50fa7b">printf&lt;/span>(&lt;span style="color:#f1fa8c">&amp;#34;你输入了：%s&lt;/span>&lt;span style="color:#f1fa8c">\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>, buf);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span> &lt;span style="color:#ff79c6">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>&lt;span> } &lt;span style="color:#ff79c6">else&lt;/span> &lt;span style="color:#ff79c6">if&lt;/span> (n &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span> &lt;span style="color:#ff79c6">&amp;amp;&amp;amp;&lt;/span> errno &lt;span style="color:#ff79c6">==&lt;/span> EAGAIN) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20&lt;/span>&lt;span> &lt;span style="color:#50fa7b">printf&lt;/span>(&lt;span style="color:#f1fa8c">&amp;#34;暂时没有输入，干点别的事...&lt;/span>&lt;span style="color:#f1fa8c">\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21&lt;/span>&lt;span> &lt;span style="color:#50fa7b">sleep&lt;/span>(&lt;span style="color:#bd93f9">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22&lt;/span>&lt;span> } &lt;span style="color:#ff79c6">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23&lt;/span>&lt;span> &lt;span style="color:#ff79c6">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这次使用 标准输入（&lt;code>STDIN_FILENO&lt;/code>）进行非阻塞读取。&lt;/p>
&lt;p>使用 &lt;code>fcntl&lt;/code> 函数设置文件描述符的标志位为非阻塞。
后续使用 &lt;code>read&lt;/code> 函数操作 这个文件描述符时，就会变成 &lt;strong>非阻塞I/O&lt;/strong> 了。 在没有数据可读时会立即返回，而不是阻塞等待。使用非阻塞I/O 编程时，需要判断 &lt;code>errno&lt;/code> 的值来判断当前 &lt;code>fd&lt;/code> 的状态。&lt;/p>
&lt;p>常见的错误码有：&lt;/p>
&lt;ul>
&lt;li>&lt;code>EAGAIN&lt;/code>：表示当前没有数据可读，非阻塞I/O模式下会立即返回。&lt;/li>
&lt;li>&lt;code>EINTR&lt;/code>：表示系统调用被信号中断，可能需要重试。&lt;/li>
&lt;li>&lt;code>EINVAL&lt;/code>：表示无效的文件描述符或参数。&lt;/li>
&lt;li>&lt;code>ENETDOWN&lt;/code>：表示网络关闭。&lt;/li>
&lt;li>&lt;code>EIO&lt;/code>：表示 I/O 错误。&lt;/li>
&lt;li>&lt;code>ETIMEDOUT&lt;/code>：表示操作超时。&lt;/li>
&lt;/ul>
&lt;p>在网络编程中，可以使用 &lt;code>accept4&lt;/code> 函数来创建非阻塞的 socket。&lt;/p>
&lt;p>函数定义&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">accept4&lt;/span>(&lt;span style="color:#8be9fd">int&lt;/span> sockfd, &lt;span style="color:#ff79c6">struct&lt;/span> sockaddr &lt;span style="color:#ff79c6">*&lt;/span>addr,&lt;span style="color:#8be9fd">socklen_t&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>addrlen, &lt;span style="color:#8be9fd">int&lt;/span> flags);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>sockfd：监听socket fd（必须是 listen 状态）。&lt;/li>
&lt;li>addr：返回对端地址（客户端 IP + 端口）。如果不关心，可以传 NULL。&lt;/li>
&lt;li>addrlen：输入输出参数，传入时为 addr 的大小，返回时表示实际长度。&lt;/li>
&lt;li>flags：额外选项，可以是以下的 按位或：
&lt;code>SOCK_NONBLOCK&lt;/code> 设置新 socket 为非阻塞模式。
&lt;code>SOCK_CLOEXEC&lt;/code> 设置 FD_CLOEXEC（执行 exec 时自动关闭 fd）。&lt;/li>
&lt;/ul>
&lt;p>调用方式&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">struct&lt;/span> sockaddr_in cliaddr;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span>&lt;span style="color:#8be9fd">socklen_t&lt;/span> clilen &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">sizeof&lt;/span>(cliaddr);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> fd &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#50fa7b">accept4&lt;/span>(listenfd,(&lt;span style="color:#ff79c6">struct&lt;/span> sockaddr&lt;span style="color:#ff79c6">*&lt;/span>)&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>cliaddr,&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>clilen, SOCK_NONBLOCK &lt;span style="color:#ff79c6">|&lt;/span> SOCK_CLOEXEC);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用非阻塞I/O 可以避免应用程序在等待 I/O 操作完成时被阻塞，从而提高整体的响应能力和并发处理能力。&lt;/p>
&lt;p>一般来说，非阻塞I/O 适用于对响应时间要求较高的场景，比如网络服务、实时数据处理等。而阻塞I/O 则更适合对性能要求不高的场景，比如简单的文件读取等。&lt;/p>
&lt;p>非阻塞I/O 需要搭配 多路复用技术一起使用，才能发挥出更好的性能。通过使用 &lt;code>select&lt;/code>、&lt;code>poll&lt;/code> 或 &lt;code>epoll&lt;/code> 等系统调用，应用程序可以在多个文件描述符上等待事件的发生，从而实现高效的 I/O 处理，关于多路复用，后面会介绍&lt;/p>
&lt;h2 id="同步-io">&lt;a href="#%e5%90%8c%e6%ad%a5-io" class="header-anchor">&lt;/a>同步 I/O
&lt;/h2>&lt;p>在 POSIX 语义里，阻塞 I/O 本质就是同步 I/O。还有上面提到的非阻塞 I/O，虽然它的返回行为是非阻塞的，但在数据准备好之前，应用程序仍然需要主动去查询状态，这种行为在某种程度上也可以视为一种同步。&lt;/p>
&lt;p>所以就不再重复这些内容了。&lt;/p>
&lt;h2 id="异步-io">&lt;a href="#%e5%bc%82%e6%ad%a5-io" class="header-anchor">&lt;/a>异步 I/O
&lt;/h2>&lt;p>所谓的 异步 I/O ，是指应用程序发起 I/O 请求后，不需要等待操作完成，而是可以继续执行其他任务。当 I/O 操作完成后，内核会通过某种机制（如信号、回调函数或事件通知）来通知应用程序。&lt;/p>
&lt;p>在 Linux 5.1 版本中，引入了新的异步 I/O 接口（&lt;code>io_uring&lt;/code>），它提供了一种更高效的方式来进行异步 I/O 操作。通过 &lt;code>io_uring&lt;/code>，应用程序可以将 I/O 请求提交到内核，并在请求完成时获得通知，从而实现真正的异步 I/O。&lt;/p>
&lt;p>举一个简单的例子，我去麦当劳点餐。&lt;/p>
&lt;p>
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/8189404dbacca5d8b4903914b3409258a62e29ac.jpg">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/8189404dbacca5d8b4903914b3409258a62e29ac.jpg" alt="" />
&lt;/a>
&lt;/div>
&lt;/p>
&lt;p>&lt;strong>同步 I/O：&lt;/strong> 我走到柜台前，告诉服务员我要点什么，然后站在那里等着，直到小姐姐把我的餐给我为止。在这个过程中我只能在柜台前等待，我不能做其他事情，只能等待。&lt;/p>
&lt;p>&lt;strong>异步 I/O：&lt;/strong> 我走到柜台前，告诉服务员我要点什么，然后就去找地方坐着玩手机了，甚至可以去上个厕所。当餐点准备好后，小姐姐会通过某种方式通知我取餐，比如喊一声XXX号餐好了。&lt;/p>
&lt;p>回到程序中，同步 I/O 应用程序发起 I/O 请求后，必须等待内核完成操作才能继续执行后续代码。而异步 I/O 则允许应用程序在发起请求后立即返回，继续执行其他任务，内核会在操作完成后通过回调或信号的方式通知应用程序。&lt;/p>
&lt;p>异步 I/O 的代码比较多，就不在这里展示了，可以去 &lt;a class="link" href="https://lqxhub.github.io/posts/f0e9829c/" >io_uring&lt;/a> 和 &lt;a class="link" href="https://lqxhub.github.io/posts/d26369fd/" >C++协程+io_uring&lt;/a> 查看相关内容。&lt;/p>
&lt;h2 id="多路复用">&lt;a href="#%e5%a4%9a%e8%b7%af%e5%a4%8d%e7%94%a8" class="header-anchor">&lt;/a>多路复用
&lt;/h2>&lt;p>乍一听这个名字还挺高大上的，其实它的核心思想就是让一个线程同时管理多个 I/O 操作，从而提高效率。最早的网络编程中，通常是为每个连接创建一个线程，这样虽然简单，但在高并发场景下会导致线程数量激增，系统资源耗尽。所有有了 &lt;a class="link" href="https://en.wikipedia.org/wiki/C10k_problem" target="_blank" rel="noopener"
>C10K&lt;/a> 连接的问题。&lt;/p>
&lt;p>很多程序就是使用这种每个线程处理一个连接的方式，像是 &lt;strong>Apache HTTP Server&lt;/strong>，&lt;strong>MySQL&lt;/strong> 社区版（听说付费版使用了多路复用）等。&lt;/p>
&lt;p>为了解决这个问题，出现了 I/O 多路复用技术。它允许一个线程同时监视多个 I/O 流，并在其中任何一个流准备好时进行处理。常见的 I/O 多路复用机制有 &lt;code>select&lt;/code>、&lt;code>poll&lt;/code>、 &lt;code>epoll&lt;/code> 和 &lt;code>kqueue&lt;/code>。&lt;/p>
&lt;h3 id="select">&lt;a href="#select" class="header-anchor">&lt;/a>select
&lt;/h3>&lt;p>&lt;code>select&lt;/code> 是 最常见的一种 多路复用技术，几乎所有的操作系统都支持。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;sys/select.h&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;string.h&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span>&lt;span style="color:#ff79c6">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span> &lt;span style="color:#8be9fd">char&lt;/span> buf[&lt;span style="color:#bd93f9">100&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span> fd_set rfds;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span> &lt;span style="color:#50fa7b">printf&lt;/span>(&lt;span style="color:#f1fa8c">&amp;#34;多路复用等待输入 (5秒超时)：&lt;/span>&lt;span style="color:#f1fa8c">\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span> &lt;span style="color:#50fa7b">FD_ZERO&lt;/span>(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>rfds);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span> &lt;span style="color:#50fa7b">FD_SET&lt;/span>(STDIN_FILENO, &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>rfds);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span> &lt;span style="color:#ff79c6">struct&lt;/span> timeval tv &lt;span style="color:#ff79c6">=&lt;/span> {&lt;span style="color:#bd93f9">5&lt;/span>, &lt;span style="color:#bd93f9">0&lt;/span>}; &lt;span style="color:#6272a4">// 5秒超时
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#8be9fd">int&lt;/span> ret &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#50fa7b">select&lt;/span>(STDIN_FILENO&lt;span style="color:#ff79c6">+&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>, &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>rfds, &lt;span style="color:#8be9fd;font-style:italic">NULL&lt;/span>, &lt;span style="color:#8be9fd;font-style:italic">NULL&lt;/span>, &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>tv);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (ret &lt;span style="color:#ff79c6">&amp;gt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span> &lt;span style="color:#ff79c6">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#50fa7b">FD_ISSET&lt;/span>(STDIN_FILENO, &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>rfds)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span> &lt;span style="color:#8be9fd">ssize_t&lt;/span> n &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#50fa7b">read&lt;/span>(STDIN_FILENO, buf, &lt;span style="color:#ff79c6">sizeof&lt;/span>(buf)&lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span> buf[n] &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#f1fa8c">&amp;#39;\0&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>&lt;span> &lt;span style="color:#50fa7b">printf&lt;/span>(&lt;span style="color:#f1fa8c">&amp;#34;你输入了：%s&lt;/span>&lt;span style="color:#f1fa8c">\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>, buf);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20&lt;/span>&lt;span> } &lt;span style="color:#ff79c6">else&lt;/span> &lt;span style="color:#ff79c6">if&lt;/span> (ret &lt;span style="color:#ff79c6">==&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21&lt;/span>&lt;span> &lt;span style="color:#50fa7b">printf&lt;/span>(&lt;span style="color:#f1fa8c">&amp;#34;5秒内没有输入，超时！&lt;/span>&lt;span style="color:#f1fa8c">\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22&lt;/span>&lt;span> } &lt;span style="color:#ff79c6">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23&lt;/span>&lt;span> &lt;span style="color:#50fa7b">perror&lt;/span>(&lt;span style="color:#f1fa8c">&amp;#34;select 出错&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>select&lt;/code> 也有不足之处，比如：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>性能问题&lt;/strong>：&lt;code>select&lt;/code> 在每次调用时都需要把被监控的fds集合从用户态空间拷贝到内核态空间，这在文件描述符数量较多时会导致性能下降。&lt;/li>
&lt;li>&lt;strong>文件描述符数量限制&lt;/strong>：&lt;code>select&lt;/code> 对文件描述符的数量有限制（通常是 1024），这在大量连接的场景下可能成为瓶颈。&lt;/li>
&lt;li>&lt;strong>返回的文件描述符集合需要遍历&lt;/strong>：&lt;code>select&lt;/code> 返回后，应用程序需要遍历整个文件描述符集合来检查哪些文件描述符准备好了，这在文件描述符数量较多时效率较低。&lt;/li>
&lt;/ol>
&lt;h3 id="poll">&lt;a href="#poll" class="header-anchor">&lt;/a>poll
&lt;/h3>&lt;p>后来为了解决 &lt;code>select&lt;/code> 的一些不足之处，出现了 &lt;code>poll&lt;/code>。&lt;code>poll&lt;/code> 的使用方式与 &lt;code>select&lt;/code> 类似，但它不再使用固定大小的文件描述符集合，而是使用一个数组来表示所有待监视的文件描述符。这使得 &lt;code>poll&lt;/code> 可以支持更多的文件描述符。但是，&lt;code>poll&lt;/code> 仍然需要在每次调用时遍历整个数组，性能上仍然不够理想。&lt;/p>
&lt;h3 id="epoll">&lt;a href="#epoll" class="header-anchor">&lt;/a>epoll
&lt;/h3>&lt;p>&lt;code>epoll&lt;/code> 是 Linux 2.6 开始支持的一种多路复用技术，它克服了 &lt;code>select&lt;/code> 和 &lt;code>poll&lt;/code> 的一些缺点。&lt;code>epoll&lt;/code> 使用事件通知机制，可以在文件描述符状态发生变化时立即通知应用程序，而不需要轮询。这使得 &lt;code>epoll&lt;/code> 在处理大量并发连接时具有更好的性能。&lt;/p>
&lt;p>缺点就是带来了更高的复杂性，使用起来相对较为复杂。&lt;/p>
&lt;p>&lt;a class="link" href="https://lqxhub.github.io/posts/91655bdf" >epoll server&lt;/a> 和 &lt;a class="link" href="https://lqxhub.github.io/posts/4f5e5c5f" >epoll 惊群问题&lt;/a> 这两篇文章详细介绍了 &lt;code>epoll&lt;/code> 的使用和注意事项。&lt;/p>
&lt;h3 id="kqueue">&lt;a href="#kqueue" class="header-anchor">&lt;/a>kqueue
&lt;/h3>&lt;p>&lt;code>kqueue&lt;/code> 是 BSD 系统特有的一种多路复用技术，它与 &lt;code>epoll&lt;/code> 类似，使用事件通知机制来提高性能。&lt;code>kqueue&lt;/code> 可以监视文件描述符、信号、定时器等多种事件，并在事件发生时通知应用程序。&lt;/p>
&lt;p>&lt;code>kqueue&lt;/code> 是 BSD 系统特有的技术，无法在 Linux 上使用。我平时主要在 Linux 上进行开发，所以就不在这里贴代码了。想要了解可以去看 redis 的源码，里面有使用 &lt;code>kqueue&lt;/code> 的例子。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/redis/redis/blob/d2c8a4b91e8c0e6aefd1f5bc0bf582cddbe046b7/src/ae_kqueue.c" target="_blank" rel="noopener"
>redis kqueue 源码&lt;/a>&lt;/p>
&lt;p>我之前为 kiwi 数据库写过一套跨平台的网络库，里面也有 &lt;code>kqueue&lt;/code> 的实现。
&lt;a class="link" href="https://github.com/arana-db/kiwi-cpp/blob/unstable/src/net/kqueue_event.cc" target="_blank" rel="noopener"
>kqueue&lt;/a>&lt;/p>
&lt;h3 id="不同多路复用区别">&lt;a href="#%e4%b8%8d%e5%90%8c%e5%a4%9a%e8%b7%af%e5%a4%8d%e7%94%a8%e5%8c%ba%e5%88%ab" class="header-anchor">&lt;/a>不同多路复用区别
&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>特性&lt;/th>
&lt;th>select&lt;/th>
&lt;th>poll&lt;/th>
&lt;th>epoll&lt;/th>
&lt;th>kqueue&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>fd 上限&lt;/td>
&lt;td>1024 (FD_SETSIZE)&lt;/td>
&lt;td>无固定上限&lt;/td>
&lt;td>无固定上限&lt;/td>
&lt;td>无固定上限&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>fd 集合管理&lt;/td>
&lt;td>位图，每次重置&lt;/td>
&lt;td>数组，每次重置&lt;/td>
&lt;td>内核维护红黑树&lt;/td>
&lt;td>内核维护&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>返回结果&lt;/td>
&lt;td>遍历所有 fd&lt;/td>
&lt;td>遍历所有 fd&lt;/td>
&lt;td>直接返回活跃 fd&lt;/td>
&lt;td>直接返回活跃 fd&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>时间复杂度&lt;/td>
&lt;td>O(n)&lt;/td>
&lt;td>O(n)&lt;/td>
&lt;td>O(活跃 fd)&lt;/td>
&lt;td>O(活跃 fd)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>触发方式&lt;/td>
&lt;td>水平触发&lt;/td>
&lt;td>水平触发&lt;/td>
&lt;td>水平 + 边缘触发&lt;/td>
&lt;td>水平 + 边缘触发&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;code>epoll&lt;/code>，&lt;code>kqueue&lt;/code> 比 &lt;code>select&lt;/code>，&lt;code>poll&lt;/code> 更加高效的原因。&lt;/p>
&lt;ol>
&lt;li>&lt;strong>事件驱动机制&lt;/strong>：&lt;code>epoll&lt;/code> 和 &lt;code>kqueue&lt;/code> 都是基于事件驱动的模型，内核会在事件发生时通知应用程序，而且只关注那些已经就绪的fd即可，而不是像 &lt;code>select&lt;/code> 和 &lt;code>poll&lt;/code> 每次都需要遍历所有 fd&lt;/li>
&lt;li>&lt;strong>避免频繁的数据拷贝&lt;/strong>：每次调用 select 或 poll 时，都需要将整个 fd 集合从用户态复制到内核态，调用结束后再将结果从内核态复制回用户态。这种频繁的数据拷贝在高并发场景下会带来较大的性能开销。epoll 和 kqueue 使用了内存映射，内核态和用户态可以访问同一块物理内存，避免了这种频繁的数据拷贝，提升了性能。&lt;/li>
&lt;li>&lt;strong>支持大规模并发&lt;/strong>：&lt;code>epoll&lt;/code> 和 &lt;code>kqueue&lt;/code> 都可以支持大量的并发连接，而 &lt;code>select&lt;/code> 和 &lt;code>poll&lt;/code> 在文件描述符数量较多时会出现性能瓶颈。&lt;/li>
&lt;li>&lt;strong>更灵活的触发方式&lt;/strong>：&lt;code>epoll&lt;/code> 和 &lt;code>kqueue&lt;/code> 支持水平触发和边缘触发，应用程序可以根据需要选择合适的触发方式，从而提高性能。&lt;/li>
&lt;/ol>
&lt;p>再来聊一下 &lt;strong>水平触发（LT）&lt;/strong> 和 &lt;strong>边缘触发（ET）&lt;/strong> 的区别。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>水平触发（LT）&lt;/strong>：当文件描述符的状态发生变化时，内核会通知应用程序。应用程序需要在每次调用时检查文件描述符的状态，如果状态仍然就绪，则会重复接收通知。这种方式简单易用，但在高并发场景下可能导致大量重复通知，浪费 CPU 资源。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>边缘触发（ET）&lt;/strong>：只有当文件描述符的状态发生变化时，内核才会通知应用程序。应用程序在接收到通知后，需要立即读取所有可用数据，直到返回 EAGAIN 错误。这种方式可以减少重复通知，提高性能，但实现起来相对复杂。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="总结">&lt;a href="#%e6%80%bb%e7%bb%93" class="header-anchor">&lt;/a>总结
&lt;/h2>&lt;p>以上就是对阻塞 I/O、非阻塞 I/O、同步 I/O、异步 I/O 和多路复用等概念的介绍。通过对比不同 I/O 模型的优缺点和适用场景，可以在实际开发中选择合适的 I/O 模型，以提高应用程序的性能和响应能力。&lt;/p>
&lt;p>没有万能的解决方案，只有最合适的选择，目前我了解到的，完全用异步 I/O 的服务端还是比较少，比较常用的还是 非阻塞 I/O+多路复用技术。&lt;/p>
&lt;p>以上都是用 C/C++ 编程时，自己手写的I/O操作示例。因为 C++ STL 没有提供网络库，IO库，所以需要手动实现这些功能。&lt;/p>
&lt;p>如果是使用 golang 这些新的语言，很多I/O操作都被封装好了，直接调用就行了。根本不用关心底层的实现细节。&lt;/p>
&lt;p>但是这些底层的知识多了解一点还是有用处的。&lt;/p></description></item><item><title>Linux下使用iouring实现一个tcp服务</title><link>https://lqxhub.github.io/posts/f0e9829c/</link><pubDate>Sun, 20 Oct 2024 17:31:37 +0800</pubDate><guid>https://lqxhub.github.io/posts/f0e9829c/</guid><description>&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/6a84474a44a97bccecbbc9c5a3b9f7aea2571c97.jpg" alt="Featured image of post Linux下使用iouring实现一个tcp服务" />&lt;p>今年一直没怎么写东西，看了一下上一篇文章，都过去半年了。前段时间一直想写一点redis的东西，但是一直没有时间去研读源码，所以就一直没有写。
最近有时间，看了一点 &lt;strong>iouring&lt;/strong> 的东西，就写了一篇文章，介绍了一下 &lt;strong>iouring&lt;/strong> 的基本使用，实现了一个简单的TCP server&lt;/p>
&lt;p>很早就听说过 &lt;strong>iouring&lt;/strong> ，但是一直没有时间学习。最近有时间就找了一些资料，学习了一下，写了一个简单的例子，实现了一个简单的tcp服务。&lt;/p>
&lt;p>这篇文章主要介绍了如何使用 &lt;strong>iouring&lt;/strong> 实现一个简单的 &lt;strong>tcp&lt;/strong> 服务，只是介绍了iouring的基本使用，没有涉及底层实现。
后面有时间再去学一下 &lt;strong>liburing&lt;/strong> 的源码，看看底层是如何实现的。&lt;/p>
&lt;p>先解释一下两个名词：&lt;strong>iouring&lt;/strong> 和 &lt;strong>liburing&lt;/strong>。
&lt;strong>iouring&lt;/strong> 是 &lt;strong>Linux&lt;/strong> 内核在 &lt;strong>5.1&lt;/strong> 版本引入的一个新的异步I/O接口。
&lt;strong>liburing&lt;/strong> 是 &lt;strong>iouring&lt;/strong> 的一个用户态库，封装了 &lt;strong>iouring&lt;/strong> 的接口，使得用户可以更方便的使用 &lt;strong>iouring&lt;/strong>。&lt;/p>
&lt;p>简单说就是 &lt;strong>io_uring&lt;/strong> 是linux内核的功能，对外提供了一套异步I/O的接口。因为直接使用 linux内核的 &lt;strong>io_uring&lt;/strong> 接口太麻烦了，
所以在就写了 &lt;strong>liburing&lt;/strong> 这个库，对内核的 &lt;strong>io_uring&lt;/strong> 封装，提供了一套更加友好的接口，使得用户可以更方便的使用 &lt;strong>io_uring&lt;/strong>。&lt;/p>
&lt;h2 id="什么是iouring">&lt;a href="#%e4%bb%80%e4%b9%88%e6%98%afiouring" class="header-anchor">&lt;/a>什么是iouring
&lt;/h2>&lt;p>io_uring是Linux内核在 &lt;strong>5.1&lt;/strong> 版本引入的一个新的异步I/O接口。
io_uring的目标是提供一个高效的、统一的异步I/O接口，以替代现有的异步I/O接口（如aio、epoll、eventfd等）。
io_uring的设计目标是提供一个简单的、高效的、统一的异步I/O接口，以便应用程序可以更容易地利用异步I/O的优势。&lt;/p>
&lt;p>虽然linux内核提供了很多异步I/O的接口，比如aio。
在linux上可以使用&lt;/p>
&lt;p>&lt;code>fcntl(sockfd, F_SETFL, fcntl(sockfd, F_GETFL, 0) | O_NONBLOCK);&lt;/code>&lt;/p>
&lt;p>来设置 &lt;strong>socket&lt;/strong> 为非阻塞模式，后续在读写 &lt;strong>socket&lt;/strong> 的 &lt;strong>fd&lt;/strong> 时，使用 &lt;code>read&lt;/code> 和 &lt;code>write&lt;/code> 函数 就是非阻塞的了。&lt;/p>
&lt;p>在调用 &lt;code>read&lt;/code> 和 &lt;code>write&lt;/code> 函数时，如果 &lt;strong>fd&lt;/strong> 没有数据，或者 &lt;strong>fd&lt;/strong> 的缓冲区满了，那么 &lt;code>read&lt;/code> 和 &lt;code>write&lt;/code> 函数会立即返回，
不会阻塞&lt;/p>
&lt;p>但是这种方式有一个问题，就是 &lt;strong>read&lt;/strong> 和 &lt;strong>write&lt;/strong> 函数的调用是阻塞的，虽然 &lt;strong>read&lt;/strong> 和 &lt;strong>write&lt;/strong> 函数会立即返回，但是 &lt;strong>read&lt;/strong> 和 &lt;strong>write&lt;/strong> 函数的调用是阻塞的，会占用 &lt;strong>CPU&lt;/strong> 的资源。&lt;/p>
&lt;p>因为之前的异步I/O接口不够好用，所以 &lt;strong>io_uring&lt;/strong> 就诞生了。&lt;/p>
&lt;p>&lt;strong>io_uring&lt;/strong> 的设计目标是提供一个简单的、高效的、统一的异步I/O接口，以便应用程序可以更容易地利用异步I/O的优势。
现在的 &lt;strong>io_uring&lt;/strong> 支持 &lt;strong>文件 I/O&lt;/strong>、&lt;strong>网络 I/O&lt;/strong>、&lt;strong>定时器&lt;/strong>、&lt;strong>信号&lt;/strong> 等。真正的统一了 &lt;strong>I/O&lt;/strong> 异步操作。&lt;/p>
&lt;p>说到异步I/O，就不得不提一下 &lt;strong>epoll&lt;/strong>。 &lt;strong>epoll&lt;/strong> 是 &lt;strong>Linux&lt;/strong> 内核提供的一种 &lt;strong>I/O&lt;/strong> 多路复用机制，可以同时监控多个 &lt;strong>fd&lt;/strong> 的 &lt;strong>I/O&lt;/strong> 事件。
&lt;strong>epoll&lt;/strong> 只是这个 多路复用机制，只是用来监控 &lt;strong>fd&lt;/strong> 的 &lt;strong>I/O&lt;/strong> 事件，当 &lt;strong>fd&lt;/strong> 有 &lt;strong>I/O&lt;/strong> 事件时（fd 可以被读写时）， &lt;strong>epoll&lt;/strong> 会通知应用程序。
真正的 &lt;strong>I/O&lt;/strong> 操作还是由 &lt;strong>read&lt;/strong> 和 &lt;strong>write&lt;/strong> 函数来完成的。
所以说 &lt;strong>epoll&lt;/strong> 并不是异步 &lt;strong>I/O&lt;/strong>，只是 &lt;strong>I/O&lt;/strong> 多路复用机制。&lt;/p>
&lt;h2 id="io_uring的基础概念">&lt;a href="#io_uring%e7%9a%84%e5%9f%ba%e7%a1%80%e6%a6%82%e5%bf%b5" class="header-anchor">&lt;/a>io_uring的基础概念
&lt;/h2>&lt;p>&lt;strong>io_uring&lt;/strong> 有两个重要的概念：&lt;strong>Submission Queue&lt;/strong> 和 &lt;strong>Completion Queue&lt;/strong>。 简称 &lt;strong>sq&lt;/strong> 和 &lt;strong>cq&lt;/strong>。&lt;/p>
&lt;p>&lt;strong>Submission Queue&lt;/strong> 是 &lt;strong>io_uring&lt;/strong> 的提交队列，用来提交 &lt;strong>I/O&lt;/strong> 请求。&lt;/p>
&lt;p>&lt;strong>Completion Queue&lt;/strong> 是 &lt;strong>io_uring&lt;/strong> 的完成队列，用来存放 &lt;strong>I/O&lt;/strong> 请求的完成状态。&lt;/p>
&lt;p>和 &lt;strong>sq&lt;/strong> 和 &lt;strong>cq&lt;/strong> 相对应的是 &lt;strong>sqe&lt;/strong> 和 &lt;strong>cqe&lt;/strong>。&lt;/p>
&lt;p>&lt;strong>sqe&lt;/strong> 是 &lt;strong>Submission Queue&lt;/strong> 的元素，用来描述一个 &lt;strong>I/O&lt;/strong> 请求。&lt;/p>
&lt;p>&lt;strong>cqe&lt;/strong> 是 &lt;strong>Completion Queue&lt;/strong> 的元素，用来描述一个 &lt;strong>I/O&lt;/strong> 请求的完成状态。&lt;/p>
&lt;p>放一张iouring的工作流程图：&lt;/p>
&lt;p>
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/359587e330204f8a868cf77c92197a417877ae15.png">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/359587e330204f8a868cf77c92197a417877ae15.png" alt="" />
&lt;/a>
&lt;/div>
&lt;/p>
&lt;p>io_uring中非常重要的两个数据结构 &lt;strong>sq&lt;/strong> 和 &lt;strong>cq&lt;/strong>。是用户空间和内核空间之间的通信桥梁。&lt;/p>
&lt;p>&lt;strong>io_uring&lt;/strong> 的工作流程如下：&lt;/p>
&lt;ol>
&lt;li>应用程序向 &lt;strong>Submission Queue&lt;/strong> 中提交 &lt;strong>I/O&lt;/strong> 请求。&lt;/li>
&lt;li>&lt;strong>io_uring&lt;/strong> 内核模块从 &lt;strong>Submission Queue&lt;/strong> 中取出 &lt;strong>I/O&lt;/strong> 请求，执行 &lt;strong>I/O&lt;/strong> 操作。&lt;/li>
&lt;li>&lt;strong>io_uring&lt;/strong> 内核模块将 &lt;strong>I/O&lt;/strong> 请求的完成状态写入 &lt;strong>Completion Queue&lt;/strong>。&lt;/li>
&lt;li>应用程序从 &lt;strong>Completion Queue&lt;/strong> 中读取 &lt;strong>I/O&lt;/strong> 请求的完成状态。&lt;/li>
&lt;li>应用程序处理 &lt;strong>I/O&lt;/strong> 请求的完成状态。&lt;/li>
&lt;/ol>
&lt;p>因为这次只是简单的介绍 &lt;strong>iouring&lt;/strong> 的基本使用，所以就不深入讲 &lt;strong>iouring&lt;/strong> 的原理了。&lt;/p>
&lt;h2 id="liburing的使用">&lt;a href="#liburing%e7%9a%84%e4%bd%bf%e7%94%a8" class="header-anchor">&lt;/a>liburing的使用
&lt;/h2>&lt;p>&lt;strong>liburing&lt;/strong> 是 &lt;strong>iouring&lt;/strong> 的一个用户态库，封装了 &lt;strong>iouring&lt;/strong> 的接口，使得用户可以更方便的使用 &lt;strong>iouring&lt;/strong>。&lt;/p>
&lt;p>liburing中封装了很多操作函数，这次也不会全部介绍，只介绍一些常用的函数。&lt;/p>
&lt;h3 id="liburing常用的函数">&lt;a href="#liburing%e5%b8%b8%e7%94%a8%e7%9a%84%e5%87%bd%e6%95%b0" class="header-anchor">&lt;/a>liburing常用的函数
&lt;/h3>&lt;h4 id="io_uring_queue_init">&lt;a href="#io_uring_queue_init" class="header-anchor">&lt;/a>io_uring_queue_init
&lt;/h4>&lt;p>初始化 &lt;strong>io_uring&lt;/strong> 对象。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">io_uring_queue_init&lt;/span>(&lt;span style="color:#8be9fd">unsigned&lt;/span> entries, &lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">io_uring&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>ring,&lt;span style="color:#8be9fd">unsigned&lt;/span> flags);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>有三个参数：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>entries&lt;/strong>： &lt;strong>Submission Queue&lt;/strong> 和 &lt;strong>Completion Queue&lt;/strong> 的大小。&lt;/li>
&lt;li>&lt;strong>ring&lt;/strong>： &lt;strong>io_uring&lt;/strong> 对象。&lt;/li>
&lt;li>&lt;strong>flags&lt;/strong>： 保留参数，传 &lt;strong>0&lt;/strong> 即可。&lt;/li>
&lt;/ol>
&lt;h4 id="io_uring_queue_exit">&lt;a href="#io_uring_queue_exit" class="header-anchor">&lt;/a>io_uring_queue_exit
&lt;/h4>&lt;p>销毁 &lt;strong>io_uring&lt;/strong> 对象。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">io_uring_queue_exit&lt;/span>(&lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">io_uring&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>ring);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>传入 &lt;strong>io_uring&lt;/strong> 对象即可。&lt;/p>
&lt;h4 id="io_uring_get_sqe">&lt;a href="#io_uring_get_sqe" class="header-anchor">&lt;/a>io_uring_get_sqe
&lt;/h4>&lt;p>获取 &lt;strong>Submission Queue&lt;/strong> 的元素。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">io_uring_sqe&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>&lt;span style="color:#50fa7b">io_uring_get_sqe&lt;/span>(&lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">io_uring&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>ring);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>传入 &lt;strong>io_uring&lt;/strong> 对象，返回一个 &lt;strong>sqe&lt;/strong> 对象，用来描述一个 &lt;strong>I/O&lt;/strong> 请求。&lt;/p>
&lt;h4 id="io_uring_submit">&lt;a href="#io_uring_submit" class="header-anchor">&lt;/a>io_uring_submit
&lt;/h4>&lt;p>提交 &lt;strong>I/O&lt;/strong> 请求。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">io_uring_submit&lt;/span>(&lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">io_uring&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>ring);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>传入 &lt;strong>io_uring&lt;/strong> 对象，提交 &lt;strong>I/O&lt;/strong> 请求。&lt;/p>
&lt;h4 id="io_uring_wait_cqe">&lt;a href="#io_uring_wait_cqe" class="header-anchor">&lt;/a>io_uring_wait_cqe
&lt;/h4>&lt;p>等待 &lt;strong>I/O&lt;/strong> 请求的完成状态。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">io_uring_wait_cqe&lt;/span>(&lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">io_uring&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>ring, &lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">io_uring_cqe&lt;/span> &lt;span style="color:#ff79c6">**&lt;/span>cqe_ptr);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>传入 &lt;strong>io_uring&lt;/strong> 对象，返回 &lt;strong>cqe&lt;/strong> 对象，用来描述一个 &lt;strong>I/O&lt;/strong> 请求的完成状态。&lt;/p>
&lt;h4 id="io_uring_submit_and_wait">&lt;a href="#io_uring_submit_and_wait" class="header-anchor">&lt;/a>io_uring_submit_and_wait
&lt;/h4>&lt;p>提交 &lt;strong>I/O&lt;/strong> 请求，并等待 &lt;strong>I/O&lt;/strong> 请求的完成状态。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">io_uring_submit_and_wait&lt;/span>(&lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">io_uring&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>ring, &lt;span style="color:#8be9fd">unsigned&lt;/span> wait_nr);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>传入 &lt;strong>io_uring&lt;/strong> 对象，提交 &lt;strong>I/O&lt;/strong> 请求，并等待 &lt;strong>I/O&lt;/strong> 请求的完成状态。&lt;/p>
&lt;p>可以看做是 &lt;strong>io_uring_submit&lt;/strong> 和 &lt;strong>io_uring_wait_cqe&lt;/strong> 的组合。&lt;/p>
&lt;h4 id="io_uring_prep_accept">&lt;a href="#io_uring_prep_accept" class="header-anchor">&lt;/a>io_uring_prep_accept
&lt;/h4>&lt;p>向 &lt;strong>Submission Queue&lt;/strong> 中添加一个 &lt;strong>accept&lt;/strong> 请求。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">io_uring_prep_accept&lt;/span>(&lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">io_uring_sqe&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>sqe, &lt;span style="color:#8be9fd">int&lt;/span> fd, &lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">sockaddr&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>addr, socklen_t &lt;span style="color:#ff79c6">*&lt;/span>addrlen, &lt;span style="color:#8be9fd">int&lt;/span> flags);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>有五个参数：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>sqe&lt;/strong>： &lt;strong>Submission Queue&lt;/strong> 的元素。&lt;/li>
&lt;li>&lt;strong>fd&lt;/strong>： &lt;strong>socket&lt;/strong> 的 &lt;strong>fd&lt;/strong>。&lt;/li>
&lt;li>&lt;strong>addr&lt;/strong>： &lt;strong>sockaddr&lt;/strong> 结构体。&lt;/li>
&lt;li>&lt;strong>addrlen&lt;/strong>： &lt;strong>sockaddr&lt;/strong> 结构体的长度。&lt;/li>
&lt;li>&lt;strong>flags&lt;/strong>： 保留参数，传 &lt;strong>0&lt;/strong> 即可。&lt;/li>
&lt;/ol>
&lt;h4 id="io_uring_prep_recv">&lt;a href="#io_uring_prep_recv" class="header-anchor">&lt;/a>io_uring_prep_recv
&lt;/h4>&lt;p>向 &lt;strong>Submission Queue&lt;/strong> 中添加一个 &lt;strong>recv&lt;/strong> 请求，也就是从fd中异步读取数据。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">io_uring_prep_recv&lt;/span>(&lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">io_uring_sqe&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>sqe, &lt;span style="color:#8be9fd">int&lt;/span> fd, &lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>buf, &lt;span style="color:#8be9fd">unsigned&lt;/span> nbytes, &lt;span style="color:#8be9fd">unsigned&lt;/span> flags);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>有五个参数：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>sqe&lt;/strong>： &lt;strong>Submission Queue&lt;/strong> 的元素。&lt;/li>
&lt;li>&lt;strong>fd&lt;/strong>： &lt;strong>socket&lt;/strong> 的 &lt;strong>fd&lt;/strong>。&lt;/li>
&lt;li>&lt;strong>buf&lt;/strong>： 接收数据的缓冲区,一般是 &lt;code>char&lt;/code> 数组的地址。&lt;/li>
&lt;li>&lt;strong>nbytes&lt;/strong>： 缓冲区的大小。&lt;/li>
&lt;li>&lt;strong>flags&lt;/strong>： 保留参数，传 &lt;strong>0&lt;/strong> 即可。&lt;/li>
&lt;/ol>
&lt;h4 id="io_uring_prep_send">&lt;a href="#io_uring_prep_send" class="header-anchor">&lt;/a>io_uring_prep_send
&lt;/h4>&lt;p>向 &lt;strong>Submission Queue&lt;/strong> 中添加一个 &lt;strong>send&lt;/strong> 请求，也就是向fd中异步写入数据。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">io_uring_prep_send&lt;/span>(&lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">io_uring_sqe&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>sqe, &lt;span style="color:#8be9fd">int&lt;/span> fd, &lt;span style="color:#ff79c6">const&lt;/span> &lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>buf, &lt;span style="color:#8be9fd">unsigned&lt;/span> nbytes, &lt;span style="color:#8be9fd">unsigned&lt;/span> flags);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>有五个参数：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>sqe&lt;/strong>： &lt;strong>Submission Queue&lt;/strong> 的元素。&lt;/li>
&lt;li>&lt;strong>fd&lt;/strong>： &lt;strong>socket&lt;/strong> 的 &lt;strong>fd&lt;/strong>。&lt;/li>
&lt;li>&lt;strong>buf&lt;/strong>： 发送数据的缓冲区，一般是 &lt;code>char&lt;/code> 指针的地址。&lt;/li>
&lt;li>&lt;strong>nbytes&lt;/strong>： 缓冲区的大小。&lt;/li>
&lt;li>&lt;strong>flags&lt;/strong>： 保留参数，传 &lt;strong>0&lt;/strong> 即可。&lt;/li>
&lt;/ol>
&lt;h4 id="io_uring_sqe_set_data">&lt;a href="#io_uring_sqe_set_data" class="header-anchor">&lt;/a>io_uring_sqe_set_data
&lt;/h4>&lt;p>设置 &lt;strong>sqe&lt;/strong> 的数据，把用户态的数据和内核绑定。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">io_uring_sqe_set_data&lt;/span>(&lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">io_uring_sqe&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>sqe, &lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>data);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>传入 &lt;strong>sqe&lt;/strong> 对象和用户态的数据，把用户态的数据和内核绑定。&lt;/p>
&lt;h4 id="io_uring_cqe_seen">&lt;a href="#io_uring_cqe_seen" class="header-anchor">&lt;/a>io_uring_cqe_seen
&lt;/h4>&lt;p>标记 &lt;strong>cqe&lt;/strong> 为已处理。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">io_uring_cqe_seen&lt;/span>(&lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">io_uring&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>ring, &lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">io_uring_cqe&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>cqe);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>传入 &lt;strong>io_uring&lt;/strong> 对象和 &lt;strong>cqe&lt;/strong> 对象，标记 &lt;strong>cqe&lt;/strong> 为已处理。&lt;/p>
&lt;h3 id="实现一个简单的tcp服务">&lt;a href="#%e5%ae%9e%e7%8e%b0%e4%b8%80%e4%b8%aa%e7%ae%80%e5%8d%95%e7%9a%84tcp%e6%9c%8d%e5%8a%a1" class="header-anchor">&lt;/a>实现一个简单的tcp服务
&lt;/h3>&lt;p>&lt;strong>io_uring&lt;/strong> 只能在 &lt;strong>linux&lt;/strong> 内核 &lt;strong>5.1&lt;/strong> 以上版本使用，所以在使用io_uring之前，需要先检查一下内核版本。
一般最新的 &lt;strong>ubuntu&lt;/strong> 和 &lt;strong>Debian&lt;/strong> 都是支持 &lt;strong>io_uring&lt;/strong> 的。&lt;/p>
&lt;p>使用 &lt;strong>liburing&lt;/strong> 需要安装 &lt;strong>liburing&lt;/strong> 库。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>sudo apt-get install liburing-dev
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>下面是一个简单的 &lt;strong>tcp&lt;/strong> 服务，功能是接收客户端的连接，然后向客户端发送一条消息。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>&lt;span style="color:#ff79c6">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;liburing.h&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;netinet/in.h&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;map&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span>&lt;span style="color:#ff79c6">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span>&lt;span style="color:#ff79c6">const&lt;/span> &lt;span style="color:#8be9fd">int&lt;/span> QUEUE_DEPTH &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">128&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span>&lt;span style="color:#ff79c6">const&lt;/span> &lt;span style="color:#8be9fd">int&lt;/span> BUFFER_SIZE &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">4096&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 10&lt;/span>&lt;span>&lt;span style="color:#ff79c6">enum&lt;/span> &lt;span style="color:#50fa7b">ConnectionType&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 11&lt;/span>&lt;span> ACCEPT,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 12&lt;/span>&lt;span> READ,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 13&lt;/span>&lt;span> WRITE,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 14&lt;/span>&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 15&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 16&lt;/span>&lt;span>&lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">Connection&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 17&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> fd;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 18&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> type{};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 19&lt;/span>&lt;span> &lt;span style="color:#8be9fd">char&lt;/span> readBuf[BUFFER_SIZE]{};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 20&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>string writeBuf;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 21&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 22&lt;/span>&lt;span> &lt;span style="color:#ff79c6">explicit&lt;/span> &lt;span style="color:#50fa7b">Connection&lt;/span>(&lt;span style="color:#8be9fd">int&lt;/span> _fd) { fd &lt;span style="color:#ff79c6">=&lt;/span> _fd; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 23&lt;/span>&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 24&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 25&lt;/span>&lt;span>std&lt;span style="color:#ff79c6">::&lt;/span>map&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>&lt;span style="color:#8be9fd">int&lt;/span>, Connection &lt;span style="color:#ff79c6">*&amp;gt;&lt;/span> connections;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 26&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 27&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">createListener&lt;/span>(sockaddr_in &lt;span style="color:#ff79c6">*&lt;/span>addr) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 28&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> listener &lt;span style="color:#ff79c6">=&lt;/span> socket(AF_INET, SOCK_STREAM, &lt;span style="color:#bd93f9">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 29&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (listener &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 30&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cerr &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;socket failed errno:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> errno &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 31&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 32&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 33&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 34&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> opt &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 35&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (setsockopt(listener, SOL_SOCKET, SO_REUSEADDR, &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>opt, &lt;span style="color:#ff79c6">sizeof&lt;/span>(opt)) &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 36&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cerr &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;setsockopt failed errno:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> errno &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 37&lt;/span>&lt;span> close(listener);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 38&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 39&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 40&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 41&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (bind(listener, &lt;span style="color:#ff79c6">reinterpret_cast&lt;/span>&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>sockaddr &lt;span style="color:#ff79c6">*&amp;gt;&lt;/span>(addr), &lt;span style="color:#ff79c6">sizeof&lt;/span>(&lt;span style="color:#ff79c6">*&lt;/span>addr)) &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 42&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cerr &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;bind failed errno:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> errno &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 43&lt;/span>&lt;span> close(listener);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 44&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 45&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 46&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 47&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (listen(listener, &lt;span style="color:#bd93f9">10&lt;/span>) &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 48&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cerr &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;listen failed errno:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> errno &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 49&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 50&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 51&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 52&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> listener;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 53&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 54&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 55&lt;/span>&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">acceptConnection&lt;/span>(io_uring &lt;span style="color:#ff79c6">*&lt;/span>ring, Connection &lt;span style="color:#ff79c6">*&lt;/span>conn, sockaddr &lt;span style="color:#ff79c6">*&lt;/span>addr, socklen_t &lt;span style="color:#ff79c6">*&lt;/span>clientLen) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 56&lt;/span>&lt;span> conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>type &lt;span style="color:#ff79c6">=&lt;/span> ACCEPT;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 57&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> sqe &lt;span style="color:#ff79c6">=&lt;/span> io_uring_get_sqe(ring);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 58&lt;/span>&lt;span> io_uring_prep_accept(sqe, conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>fd, addr, clientLen, &lt;span style="color:#bd93f9">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 59&lt;/span>&lt;span> io_uring_sqe_set_data(sqe, conn);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 60&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 61&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 62&lt;/span>&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">addSocketRead&lt;/span>(io_uring &lt;span style="color:#ff79c6">*&lt;/span>ring, Connection &lt;span style="color:#ff79c6">*&lt;/span>conn) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 63&lt;/span>&lt;span> conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>type &lt;span style="color:#ff79c6">=&lt;/span> READ;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 64&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> sqe &lt;span style="color:#ff79c6">=&lt;/span> io_uring_get_sqe(ring);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 65&lt;/span>&lt;span> io_uring_prep_recv(sqe, conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>fd, &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>readBuf, BUFFER_SIZE, &lt;span style="color:#bd93f9">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 66&lt;/span>&lt;span> io_uring_sqe_set_data(sqe, conn);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 67&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 68&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 69&lt;/span>&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">addSocketWrite&lt;/span>(io_uring &lt;span style="color:#ff79c6">*&lt;/span>ring, Connection &lt;span style="color:#ff79c6">*&lt;/span>conn) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 70&lt;/span>&lt;span> conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>type &lt;span style="color:#ff79c6">=&lt;/span> WRITE;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 71&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> sqe &lt;span style="color:#ff79c6">=&lt;/span> io_uring_get_sqe(ring);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 72&lt;/span>&lt;span> io_uring_prep_send(sqe, conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>fd, conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>writeBuf.data(), conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>writeBuf.size(), &lt;span style="color:#bd93f9">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 73&lt;/span>&lt;span> io_uring_sqe_set_data(sqe, conn);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 74&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 75&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 76&lt;/span>&lt;span>Connection &lt;span style="color:#ff79c6">*&lt;/span>&lt;span style="color:#50fa7b">newConn&lt;/span>(io_uring &lt;span style="color:#ff79c6">*&lt;/span>ring, &lt;span style="color:#8be9fd">int&lt;/span> fd) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 77&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> conn &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">new&lt;/span> Connection(fd);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 78&lt;/span>&lt;span> connections[fd] &lt;span style="color:#ff79c6">=&lt;/span> conn;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 79&lt;/span>&lt;span> addSocketRead(ring, conn);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 80&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> conn;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 81&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 82&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 83&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">uringRun&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 84&lt;/span>&lt;span> sockaddr_in addr{};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 85&lt;/span>&lt;span> addr.sin_family &lt;span style="color:#ff79c6">=&lt;/span> AF_INET;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 86&lt;/span>&lt;span> addr.sin_port &lt;span style="color:#ff79c6">=&lt;/span> htons(&lt;span style="color:#bd93f9">8088&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 87&lt;/span>&lt;span> addr.sin_addr.s_addr &lt;span style="color:#ff79c6">=&lt;/span> INADDR_ANY;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 88&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 89&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> listenFd &lt;span style="color:#ff79c6">=&lt;/span> createListener(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>addr);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 90&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (listenFd &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 91&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 92&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 93&lt;/span>&lt;span> socklen_t clientLen &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">sizeof&lt;/span>(addr);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 94&lt;/span>&lt;span> io_uring ring{};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 95&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (io_uring_queue_init(QUEUE_DEPTH, &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>ring, &lt;span style="color:#bd93f9">0&lt;/span>) &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 96&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cerr &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;io_uring_queue_init failed errno:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> errno &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 97&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 98&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 99&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> lConn &lt;span style="color:#ff79c6">=&lt;/span> newConn(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>ring, listenFd);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">100&lt;/span>&lt;span> acceptConnection(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>ring, lConn, &lt;span style="color:#ff79c6">reinterpret_cast&lt;/span>&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>sockaddr &lt;span style="color:#ff79c6">*&amp;gt;&lt;/span> (&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>addr), &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>clientLen);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">101&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (io_uring_submit(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>ring) &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">102&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cerr &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;io_uring_submit failed errno:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> errno &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">103&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">104&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">105&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">106&lt;/span>&lt;span> io_uring_cqe &lt;span style="color:#ff79c6">*&lt;/span>cqes[QUEUE_DEPTH];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">107&lt;/span>&lt;span> &lt;span style="color:#ff79c6">while&lt;/span> (&lt;span style="color:#8be9fd;font-style:italic">true&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">108&lt;/span>&lt;span> &lt;span style="color:#6272a4">//等待事件完成
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">109&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#8be9fd">int&lt;/span> ret &lt;span style="color:#ff79c6">=&lt;/span> io_uring_submit_and_wait(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>ring, &lt;span style="color:#bd93f9">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">110&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (ret &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">111&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cerr &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;io_uring_wait_cqe failed errno:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> errno &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">112&lt;/span>&lt;span> &lt;span style="color:#ff79c6">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">113&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">114&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">115&lt;/span>&lt;span> &lt;span style="color:#6272a4">//获取完成的事件
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">116&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#ff79c6">auto&lt;/span> num &lt;span style="color:#ff79c6">=&lt;/span> io_uring_peek_batch_cqe(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>ring, cqes, QUEUE_DEPTH);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">117&lt;/span>&lt;span> &lt;span style="color:#ff79c6">for&lt;/span> (&lt;span style="color:#8be9fd">int&lt;/span> i &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>; i &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> num; &lt;span style="color:#ff79c6">++&lt;/span>i) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">118&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> conn &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">reinterpret_cast&lt;/span>&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>Connection &lt;span style="color:#ff79c6">*&amp;gt;&lt;/span> (cqes[i]&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>user_data);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">119&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>type &lt;span style="color:#ff79c6">==&lt;/span> ACCEPT) {&lt;span style="color:#6272a4">//新连接
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">120&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#8be9fd">int&lt;/span> clientFd &lt;span style="color:#ff79c6">=&lt;/span> cqes[i]&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>res;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">121&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> newCLi &lt;span style="color:#ff79c6">=&lt;/span> newConn(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>ring, clientFd);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">122&lt;/span>&lt;span> addSocketRead(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>ring, newCLi);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">123&lt;/span>&lt;span> acceptConnection(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>ring, lConn, &lt;span style="color:#ff79c6">reinterpret_cast&lt;/span>&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>sockaddr &lt;span style="color:#ff79c6">*&amp;gt;&lt;/span> (&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>addr), &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>clientLen);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">124&lt;/span>&lt;span> } &lt;span style="color:#ff79c6">else&lt;/span> &lt;span style="color:#ff79c6">if&lt;/span> (conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>type &lt;span style="color:#ff79c6">==&lt;/span> READ) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">125&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> readSize &lt;span style="color:#ff79c6">=&lt;/span> cqes[i]&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>res;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">126&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (readSize &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {&lt;span style="color:#6272a4">//读取失败(比如客户端断开连接)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">127&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> shutdown(conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>fd, SHUT_RDWR);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">128&lt;/span>&lt;span> connections.erase(conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>fd);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">129&lt;/span>&lt;span> &lt;span style="color:#ff79c6">delete&lt;/span> conn;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">130&lt;/span>&lt;span> } &lt;span style="color:#ff79c6">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">131&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;read:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>readBuf &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">132&lt;/span>&lt;span> conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>writeBuf &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;hello client&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">133&lt;/span>&lt;span> addSocketWrite(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>ring, conn);&lt;span style="color:#6272a4">//向客户端写数据
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">134&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">135&lt;/span>&lt;span> } &lt;span style="color:#ff79c6">else&lt;/span> &lt;span style="color:#ff79c6">if&lt;/span> (conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>type &lt;span style="color:#ff79c6">==&lt;/span> WRITE) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">136&lt;/span>&lt;span> addSocketRead(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>ring, conn);&lt;span style="color:#6272a4">// 把这个连接加入读事件
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">137&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">138&lt;/span>&lt;span> io_uring_cqe_seen(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>ring, cqes[i]);&lt;span style="color:#6272a4">// mark the cqe as processed
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">139&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">140&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">141&lt;/span>&lt;span> io_uring_queue_exit(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>ring);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">142&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">143&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">144&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">145&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">146&lt;/span>&lt;span> uringRun();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">147&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">148&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>编译这段代码的时候，需要链接 &lt;strong>liburing&lt;/strong> 库。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>g++ -o server server.cpp -luring
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>createListener&lt;/code> 函数用来创建一个 &lt;strong>socket&lt;/strong> 监听 &lt;strong>8088&lt;/strong> 端口。这个函数没什么特别的，就是创建一个 &lt;strong>socket&lt;/strong>，然后绑定 &lt;strong>8088&lt;/strong> 端口，然后监听。&lt;/p>
&lt;p>&lt;code>acceptConnection&lt;/code> 函数用来接收客户端的连接。这个函数调用 &lt;strong>io_uring_prep_accept&lt;/strong> 函数，向 &lt;strong>Submission Queue&lt;/strong> 中添加一个 &lt;strong>accept&lt;/strong> 请求。&lt;/p>
&lt;p>&lt;code>addSocketRead&lt;/code> 函数用来向 &lt;strong>Submission Queue&lt;/strong> 中添加一个 &lt;strong>recv&lt;/strong> 请求，也就是从 &lt;strong>fd&lt;/strong> 中异步读取数据。&lt;/p>
&lt;p>&lt;code>addSocketWrite&lt;/code> 函数用来向 &lt;strong>Submission Queue&lt;/strong> 中添加一个 &lt;strong>send&lt;/strong> 请求，也就是向 &lt;strong>fd&lt;/strong> 中异步写入数据。&lt;/p>
&lt;p>&lt;code>newConn&lt;/code> 函数用来创建一个新的连接。这个函数会调用 &lt;code>addSocketRead&lt;/code> 函数，向 &lt;strong>Submission Queue&lt;/strong> 中添加一个 &lt;strong>recv&lt;/strong> 请求。&lt;/p>
&lt;p>&lt;code>uringRun&lt;/code> 函数是主函数。这个函数会创建一个 &lt;strong>io_uring&lt;/strong> 对象，然后调用 &lt;code>createListener&lt;/code> 函数创建一个监听 &lt;strong>socket&lt;/strong>，然后调用 &lt;code>newConn&lt;/code> 函数创建一个新的连接。&lt;/p>
&lt;p>有一个知识点需要注意一下，在 io_uring中，每次获取的 &lt;strong>cqe&lt;/strong> 在使用完之后，需要调用 &lt;code>io_uring_cqe_seen&lt;/code> 函数，标记 &lt;strong>cqe&lt;/strong> 为已处理。
同时处理的时候，也会把 这个 &lt;strong>cqe&lt;/strong> 从 &lt;strong>Completion Queue&lt;/strong> 中移除，对应的 &lt;code>fd&lt;/code> 也会从 &lt;strong>io_uring&lt;/strong> 中移除。
所以，为了保证后续能继续接收到 &lt;strong>fd&lt;/strong> 的 &lt;strong>I/O&lt;/strong> 事件，需要在处理完 &lt;strong>cqe&lt;/strong> 之后，再次调用 &lt;code>addSocketRead&lt;/code> 函数，向 &lt;strong>Submission Queue&lt;/strong> 中添加一个 &lt;strong>recv&lt;/strong> 请求。&lt;/p>
&lt;p>这些函数的内容都比较简单，就不再详细介绍了。主要看一下 &lt;strong>while&lt;/strong> 循环的内容。&lt;/p>
&lt;p>&lt;code>int ret = io_uring_submit_and_wait(&amp;amp;ring, 1);&lt;/code> 这个函数会提交 &lt;strong>I/O&lt;/strong> 请求，并等待 &lt;strong>I/O&lt;/strong> 请求的完成状态。这个函数会阻塞，直到有 1个 &lt;strong>I/O&lt;/strong> 请求完成。&lt;/p>
&lt;p>这里可以使用 &lt;code>io_uring_submit&lt;/code> 这个函数只提交 &lt;strong>I/O&lt;/strong> 请求，不等待 &lt;strong>I/O&lt;/strong> 请求的完成状态。但是这样的话，while循环会一直循环，不会阻塞，对应的表现就是 &lt;strong>CPU&lt;/strong> 占用率会很高。
这种情况适用于 &lt;strong>I/O&lt;/strong> 请求比较多的情况，比如 &lt;strong>nginx&lt;/strong> 这种 &lt;strong>web&lt;/strong> 服务器。&lt;/p>
&lt;p>一般情况下，使用 &lt;code>io_uring_submit_and_wait&lt;/code> 这个函数就可以了。&lt;/p>
&lt;p>如果 返回的 &lt;strong>ret&lt;/strong> 小于 &lt;strong>0&lt;/strong>，说明出错了，这里简单的打印一下错误信息，然后退出。&lt;/p>
&lt;p>&lt;code>auto num = io_uring_peek_batch_cqe(&amp;amp;ring, cqes, QUEUE_DEPTH);&lt;/code> 这个函数会获取 &lt;strong>Completion Queue&lt;/strong> 中的 &lt;strong>cqe&lt;/strong>，一次最多获取 &lt;strong>QUEUE_DEPTH&lt;/strong> 个 &lt;strong>cqe&lt;/strong>。&lt;/p>
&lt;p>这个函数有点类似于 &lt;strong>epoll&lt;/strong> 的 &lt;strong>epoll_wait&lt;/strong> 函数，会一次性获取多个 &lt;strong>cqe&lt;/strong>。&lt;/p>
&lt;p>然后遍历 &lt;strong>cqe&lt;/strong>，根据 &lt;strong>cqe&lt;/strong> 的 &lt;strong>type&lt;/strong> 来处理 &lt;strong>I/O&lt;/strong> 事件。在之前的submit的时候，指定了有 &lt;strong>ACCEPT&lt;/strong>、&lt;strong>READ&lt;/strong>、&lt;strong>WRITE&lt;/strong> 三种 &lt;strong>I/O&lt;/strong> 事件。&lt;/p>
&lt;p>因为之前的 &lt;strong>cqe&lt;/strong> 中的 &lt;strong>user_data&lt;/strong> 是 &lt;strong>Connection&lt;/strong> 对象的指针，所以可以根据 &lt;strong>cqe&lt;/strong> 的 &lt;strong>user_data&lt;/strong> 来获取 &lt;strong>Connection&lt;/strong> 对象，然后根据 &lt;strong>Connection&lt;/strong> 对象的 &lt;strong>type&lt;/strong> 来处理 &lt;strong>I/O&lt;/strong> 事件。
所以可以 &lt;code>reinterpret_cast&amp;lt;Connection *&amp;gt; (cqes[i]-&amp;gt;user_data);&lt;/code>强转来获取 &lt;strong>Connection&lt;/strong> 对象。&lt;/p>
&lt;p>如果 &lt;strong>type&lt;/strong> 是 &lt;strong>ACCEPT&lt;/strong>，说明是新的连接，就调用 &lt;code>newConn&lt;/code> 函数创建一个新的连接，然后调用 &lt;code>acceptConnection&lt;/code> 函数接收新的连接。
在接收新的连接之后，需要再次调用 &lt;code>acceptConnection&lt;/code> 函数，把listener的socket放回io_uring中，后面才能继续工作。&lt;/p>
&lt;p>如果 &lt;strong>type&lt;/strong> 是 &lt;strong>READ&lt;/strong>，说明是读事件，就读取 &lt;strong>cqe&lt;/strong> 的 &lt;strong>res&lt;/strong> 字段，如果小于 &lt;strong>0&lt;/strong>，说明读取失败，比如客户端断开连接，就关闭 &lt;strong>fd&lt;/strong>，然后从 &lt;strong>connections&lt;/strong> 中移除这个 &lt;strong>fd&lt;/strong>，然后释放 &lt;strong>Connection&lt;/strong> 对象。
如果读取成功，就打印读取的数据，然后向客户端发送一条消息。&lt;/p>
&lt;p>如果 &lt;strong>type&lt;/strong> 是 &lt;strong>WRITE&lt;/strong>，说明是写事件，在这里就是向客户端写数据完成了。
调用 &lt;code>addSocketRead&lt;/code> 函数，向 &lt;strong>Submission Queue&lt;/strong> 中添加一个 读的请求，然后这个 &lt;strong>fd&lt;/strong> 就会继续接收 &lt;strong>I/O&lt;/strong> 事件。&lt;/p>
&lt;p>最后调用 &lt;code>io_uring_cqe_seen&lt;/code> 函数，标记 &lt;strong>cqe&lt;/strong> 为已处理。&lt;/p>
&lt;p>这样一个简单的 &lt;strong>tcp&lt;/strong> 服务就实现了。这个服务只是一个简单的例子，没法用在生产环境中，只是用来学习 &lt;strong>iouring&lt;/strong> 的基本使用。&lt;/p>
&lt;p>像是中间的错误处理，连接的超时等问题都没有处理，这些问题需要根据实际情况来处理。&lt;/p>
&lt;p>这个例子中，一个 &lt;strong>socket&lt;/strong> 同时只能读或者写，不能同时读写，这个问题也需要根据实际情况来处理。&lt;/p>
&lt;h2 id="总结">&lt;a href="#%e6%80%bb%e7%bb%93" class="header-anchor">&lt;/a>总结
&lt;/h2>&lt;p>这篇文章主要介绍了 &lt;strong>iouring&lt;/strong> 的基本使用，实现了一个简单的 &lt;strong>tcp&lt;/strong> 服务。只是介绍了 &lt;strong>iouring&lt;/strong> 的基本使用，没有涉及底层实现。
后面有时间再去学一下 &lt;strong>liburing&lt;/strong> 的源码，看看底层是如何实现的。&lt;/p>
&lt;p>其实 &lt;strong>iouring&lt;/strong> 最主要的两个操作是提交 &lt;strong>I/O&lt;/strong> 请求到 &lt;strong>sq&lt;/strong> ，然后等待 &lt;strong>I/O&lt;/strong> 请求的完成后,从 &lt;strong>cq&lt;/strong> 获取然后处理。&lt;/p>
&lt;p>看很多人都说 &lt;strong>iouring&lt;/strong> 性能很高，尤其是在 &lt;strong>I/O&lt;/strong> 密集型的场景下，性能提升很明显。这部分内容还没有验证，后面有时间再去验证一下。&lt;/p>
&lt;p>因为也是初学 &lt;strong>iouring&lt;/strong>，所以文章中可能有错误，欢迎批评指正。&lt;/p>
&lt;hr>
&lt;h2 id="追更">&lt;a href="#%e8%bf%bd%e6%9b%b4" class="header-anchor">&lt;/a>追更
&lt;/h2>&lt;p>&lt;strong>2024-10-23&lt;/strong>&lt;/p>
&lt;p>在服务端加了一点代码，写了一个简单的 &lt;strong>HTTP&lt;/strong> 服务器，可以通过浏览器访问，然后找了一个 HTTP 压测工具，测试了一下性能。&lt;/p>
&lt;p>HTTP 服务器返回的内容：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>writeBuf &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;HTTP/1.1 200 OK&lt;/span>&lt;span style="color:#f1fa8c">\r\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;Content-Length: 55&lt;/span>&lt;span style="color:#f1fa8c">\r\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;Content-Type: text/html&lt;/span>&lt;span style="color:#f1fa8c">\r\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;Connection: keep-alive&lt;/span>&lt;span style="color:#f1fa8c">\r\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;Date: Mon, 23 Oct 2024 13:24:24 GMT&lt;/span>&lt;span style="color:#f1fa8c">\r\n\r\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;&amp;lt;h1&amp;gt;hello&amp;lt;/h1&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>同样的，使用 &lt;strong>epoll&lt;/strong> 也实现了一个 &lt;strong>HTTP&lt;/strong> 服务器，返回了同样的内容。&lt;/p>
&lt;p>几轮测试下来，发现 &lt;strong>epoll&lt;/strong> 的性能要比 &lt;strong>iouring&lt;/strong> 高一点。至于原因还在研究中。&lt;/p>
&lt;p>猜测的原因可能是 在数据量很小的时候， &lt;strong>iouring&lt;/strong> 的性能发挥不出来，甚至效果更差了。
还有一个原因可能是我使用的方法有问题，这个等后面继续研究。&lt;/p></description></item><item><title>C++中动态加载共享库，使用.so/dll文件。详细讲解编译时链接与运行时动态加载的区别</title><link>https://lqxhub.github.io/posts/b810e905/</link><pubDate>Sat, 22 Jul 2023 21:56:18 +0000</pubDate><guid>https://lqxhub.github.io/posts/b810e905/</guid><description>&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/7e0d79d47f0173b9b7a0c351c5d719303aa0f0e8.png" alt="Featured image of post C++中动态加载共享库，使用.so/dll文件。详细讲解编译时链接与运行时动态加载的区别" />&lt;p>在C++使用动态库，(linux下是&lt;code>.so&lt;/code>，windows下是&lt;code>.dll&lt;/code>) 比较常见的方式是在编译时，直接连接到程序中。但是除了这种方式外，还可以使用的动态加载的方式去使用动态库。&lt;/p>
&lt;h2 id="两种方式的区别">&lt;a href="#%e4%b8%a4%e7%a7%8d%e6%96%b9%e5%bc%8f%e7%9a%84%e5%8c%ba%e5%88%ab" class="header-anchor">&lt;/a>两种方式的区别
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>在编译时把库连接到程序：这种方式是在编译的时候，就确定了要链接的库文件，然后通过编译参数在链接时直接把动态库的地址空间等等信息连接到程序中。程序在运行时，可以直接根据路径去寻找动态库，然后加载到程序中，然后运行，这种方式在日常开发中用的比较多。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在程序运行时动态加载库：这种方式是在程序运行时，通过调用系统函数，把动态库加载到程序中，然后执行动态库中的代码。这种方式和编译时链接的优势是可以在程序运行的过程中动态加载和卸载库。可以在不修改源程序的前提下，使用新的库。这种方式，比较常见的应用是程序的插件系统。还有一个就是服务器的热更可以用这个来实现。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>在编译时使用动态库的例子&lt;a class="link" href="https://lqxhub.github.io/posts/a20c5e48/" target="_blank" rel="noopener"
>传送门&lt;/a>&lt;/p>
&lt;h2 id="动态加载库">&lt;a href="#%e5%8a%a8%e6%80%81%e5%8a%a0%e8%bd%bd%e5%ba%93" class="header-anchor">&lt;/a>动态加载库
&lt;/h2>&lt;p>不废话了，直接开始上代码&lt;/p>
&lt;p>在程序运行的过程中动态加载库，需要依赖操作系统，所以在不同的系统上有不同的系统调用函数。&lt;/p>
&lt;p>在&lt;code>linux&lt;/code> 上需要用到 &lt;code>dlopen&lt;/code> 函数加载库，&lt;code>dlclose&lt;/code> 函数释放库，&lt;code>dlsym&lt;/code> 函数 查找库函数
需要的头文件 &lt;code>#include &amp;lt;dlfcn.h&amp;gt;&lt;/code>&lt;/p>
&lt;p>在&lt;code>windows&lt;/code> 上需要 &lt;code>LoadLibrary&lt;/code> 宏加载库，&lt;code>FreeLibrary&lt;/code> 宏释放库，&lt;code>GetProcAddress&lt;/code> 函数查找库函数
需要的头文件 &lt;code>#include &amp;lt;windows.h&amp;gt;&lt;/code>&lt;/p>
&lt;h3 id="基类功能">&lt;a href="#%e5%9f%ba%e7%b1%bb%e5%8a%9f%e8%83%bd" class="header-anchor">&lt;/a>基类功能
&lt;/h3>&lt;p>在C++中可以通过定义一个抽象类来作为所有库的基类，所有的库文件都实现这个基类，然后重写基类的纯虚函数。可以在加载到所有库后，都可以把库里的类作为抽象类的派生类。&lt;/p>
&lt;p>先定义一个基类 base.h&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C++" data-lang="C++">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#ifndef DLOAD_BASE_H
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#define DLOAD_BASE_H
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span>&lt;span style="color:#ff79c6">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span>&lt;span style="color:#6272a4">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span>&lt;span style="color:#6272a4"> * 必须实现 moduleName_create 函数,来初始化对象
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span>&lt;span style="color:#6272a4"> * extern &amp;#34;C&amp;#34; Base *module1_create() {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span>&lt;span style="color:#6272a4"> * return new Module;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span>&lt;span style="color:#6272a4"> * }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span>&lt;span style="color:#6272a4"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span>&lt;span style="color:#6272a4"> * //必须实现 moduleName_destroy 函数,来回收对象
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span>&lt;span style="color:#6272a4"> * extern &amp;#34;C&amp;#34; void module1_destroy(Base *obj) {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span>&lt;span style="color:#6272a4"> * delete obj;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span>&lt;span style="color:#6272a4"> * }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span>&lt;span style="color:#6272a4"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span>&lt;span style="color:#ff79c6">class&lt;/span> &lt;span style="color:#50fa7b">Base&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span> &lt;span style="color:#ff79c6">public&lt;/span>&lt;span style="color:#ff79c6">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>&lt;span> &lt;span style="color:#ff79c6">virtual&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>string readLine(&lt;span style="color:#ff79c6">const&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>string &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>) &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21&lt;/span>&lt;span> &lt;span style="color:#ff79c6">virtual&lt;/span> &lt;span style="color:#ff79c6">~&lt;/span>Base() &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">default&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22&lt;/span>&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#endif &lt;/span>&lt;span style="color:#6272a4">//DLOAD_BASE_H
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个基类的功能很简单，只有一个纯虚函数&lt;code>readLine&lt;/code> 这个函数会传入一个字符串，然后返回一个字符串&lt;/p>
&lt;p>注释中的哪两个函数，后面会有详细的介绍&lt;/p>
&lt;h3 id="实现一个模块">&lt;a href="#%e5%ae%9e%e7%8e%b0%e4%b8%80%e4%b8%aa%e6%a8%a1%e5%9d%97" class="header-anchor">&lt;/a>实现一个模块
&lt;/h3>&lt;p>可以把一个库看做是一个模块，现在实现一个模块&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C++" data-lang="C++">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#6272a4">//简单的模块 例子
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>&lt;span style="color:#6272a4">//转大写
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;algorithm&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;string&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;#34;../base.h&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span>&lt;span style="color:#ff79c6">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span>&lt;span style="color:#ff79c6">class&lt;/span> &lt;span style="color:#50fa7b">Module1&lt;/span> &lt;span style="color:#ff79c6">:&lt;/span> &lt;span style="color:#ff79c6">public&lt;/span> Base {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>string readLine(&lt;span style="color:#ff79c6">const&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>string &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>str) &lt;span style="color:#ff79c6">override&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>string str2(str);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>transform(str.begin(), str.end(), str2.begin(), &lt;span style="color:#ff79c6">::&lt;/span>toupper);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> str2;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span>&lt;span style="color:#6272a4">//必须实现 moduleName_create 函数,来初始化对象
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>&lt;span style="color:#ff79c6">extern&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;C&amp;#34;&lt;/span> Base &lt;span style="color:#ff79c6">*&lt;/span>module1_create() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#ff79c6">new&lt;/span> Module1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21&lt;/span>&lt;span>&lt;span style="color:#6272a4">//必须实现 moduleName_destroy 函数,来回收对象
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>&lt;span style="color:#ff79c6">extern&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;C&amp;#34;&lt;/span> &lt;span style="color:#8be9fd">void&lt;/span> module1_destroy(Base &lt;span style="color:#ff79c6">*&lt;/span>obj) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23&lt;/span>&lt;span> &lt;span style="color:#ff79c6">delete&lt;/span> obj;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个功能非常简单，把传入的字符串转成大写，然后返回&lt;/p>
&lt;ol>
&lt;li>&lt;strong>为什么需要 &lt;code>Base *module1_create()&lt;/code> 和 &lt;code>void module1_destroy(Base *obj)&lt;/code> 这两个函数&lt;/strong>&lt;/li>
&lt;/ol>
&lt;p>因为在把库加载完成后，需要使用库里的函数，但是不能直接查找C++的类，然后再初始化对象，只能在库里完成C++对象的初始化，然后返回对象的指针。&lt;/p>
&lt;p>所以需要在库里有对应的函数来初始化对象和回收对象，所以就有了这两个函数。&lt;/p>
&lt;ol start="2">
&lt;li>&lt;strong>为什么要 &lt;code>extern &amp;quot;C&amp;quot;&lt;/code>&lt;/strong>&lt;/li>
&lt;/ol>
&lt;p>因为C++有函数重载的功能，所以编译器在编译代码的时候，会对函数重命名。但是对函数重命名的规则，没有统一的标准，不同编译器有不同的规则。像 &lt;code>module1_create&lt;/code> 这个函数可能就被重命名成 &lt;code>_Z14module1_create&lt;/code>这样的字符串。这样后面使用 &lt;code>dlsym&lt;/code> 或者 &lt;code>GetProcAddress&lt;/code> 函数查找库里的函数时，就没法找到对应的函数了。所以使用&lt;code>extern &amp;quot;C&amp;quot;&lt;/code> 让编译器使用C的规则来编译这段函数&lt;/p>
&lt;p>至于这两个函数的名字 &lt;code>module1_create&lt;/code> 和 &lt;code>module1_destroy&lt;/code> 没有强制的要求，但是要有一定的规范。否则在加载到库后，没法根据函数名查找到对应的函数。这里用到的规则是 &lt;code>模块名_create&lt;/code> 和 &lt;code>模块名_destroy&lt;/code>&lt;/p>
&lt;h3 id="加载库">&lt;a href="#%e5%8a%a0%e8%bd%bd%e5%ba%93" class="header-anchor">&lt;/a>加载库
&lt;/h3>&lt;p>下面开始加载库，因为在同的系统下，加载库调用的函数不同，所以使用 宏来完成不用系统下的条件编译，最终完成加载库&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C++" data-lang="C++">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#6272a4">//声明创建对象的函数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>&lt;span style="color:#ff79c6">typedef&lt;/span> Base &lt;span style="color:#ff79c6">*&lt;/span>(&lt;span style="color:#ff79c6">*&lt;/span>create)();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span>&lt;span style="color:#6272a4">//声明回收对象的函数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>&lt;span style="color:#ff79c6">typedef&lt;/span> &lt;span style="color:#50fa7b">void&lt;/span> (&lt;span style="color:#ff79c6">*&lt;/span>destroy)(Base &lt;span style="color:#ff79c6">*&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span>&lt;span style="color:#6272a4">//调用系统函数,加载动态库
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#ifdef _WIN32
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span>&lt;span style="color:#ff79c6">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span>HINSTANCE &lt;span style="color:#50fa7b">loadLib&lt;/span>(Base &lt;span style="color:#ff79c6">**&lt;/span>base, &lt;span style="color:#ff79c6">const&lt;/span> &lt;span style="color:#8be9fd">char&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>path, &lt;span style="color:#ff79c6">const&lt;/span> &lt;span style="color:#8be9fd">char&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>funName) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> handle &lt;span style="color:#ff79c6">=&lt;/span> LoadLibrary(path);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (&lt;span style="color:#ff79c6">!&lt;/span>handle) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#ff79c6">nullptr&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> cr &lt;span style="color:#ff79c6">=&lt;/span> (create) GetProcAddress(handle, funName);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (cr) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span> &lt;span style="color:#ff79c6">*&lt;/span>base &lt;span style="color:#ff79c6">=&lt;/span> cr();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> handle;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23&lt;/span>&lt;span>&lt;span style="color:#6272a4">//调用系统函数,卸载动态库
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">freeLib&lt;/span>(HINSTANCE handle, Base &lt;span style="color:#ff79c6">*&lt;/span>obj, &lt;span style="color:#ff79c6">const&lt;/span> &lt;span style="color:#8be9fd">char&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>funName) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> free &lt;span style="color:#ff79c6">=&lt;/span> (destroy) GetProcAddress(handle, funName);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (free) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27&lt;/span>&lt;span> free(obj);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29&lt;/span>&lt;span> FreeLibrary(handle);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#else
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33&lt;/span>&lt;span>&lt;span style="color:#ff79c6">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34&lt;/span>&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>&lt;span style="color:#50fa7b">loadLib&lt;/span>(Base &lt;span style="color:#ff79c6">**&lt;/span>base, &lt;span style="color:#ff79c6">const&lt;/span> &lt;span style="color:#8be9fd">char&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>path, &lt;span style="color:#ff79c6">const&lt;/span> &lt;span style="color:#8be9fd">char&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>funName) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> handle &lt;span style="color:#ff79c6">=&lt;/span> dlopen(path, RTLD_LAZY);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (&lt;span style="color:#ff79c6">!&lt;/span>handle) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#ff79c6">nullptr&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> cr &lt;span style="color:#ff79c6">=&lt;/span> (create) dlsym(handle, funName);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (cr) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41&lt;/span>&lt;span> &lt;span style="color:#ff79c6">*&lt;/span>base &lt;span style="color:#ff79c6">=&lt;/span> cr();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> handle;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">44&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">45&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">46&lt;/span>&lt;span>&lt;span style="color:#6272a4">//调用系统函数,卸载动态库
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">47&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">freeLib&lt;/span>(&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>handle, Base &lt;span style="color:#ff79c6">*&lt;/span>obj, &lt;span style="color:#ff79c6">const&lt;/span> &lt;span style="color:#8be9fd">char&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>funName) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">48&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> free &lt;span style="color:#ff79c6">=&lt;/span> (destroy) dlsym(handle, funName);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">49&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (free) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">50&lt;/span>&lt;span> free(obj);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">51&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">52&lt;/span>&lt;span> dlclose(handle);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">53&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">54&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">55&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#endif
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在代码最开始的位置，通过 &lt;code>typedef&lt;/code> 声明了两个函数的指针，在查找到函数后，把函数强转成对应的类型，才能在后面使用&lt;/p>
&lt;h3 id="使用库">&lt;a href="#%e4%bd%bf%e7%94%a8%e5%ba%93" class="header-anchor">&lt;/a>使用库
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C++" data-lang="C++">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>string libPath;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#ifdef _WIN32
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span>&lt;span style="color:#ff79c6">&lt;/span> libPath &lt;span style="color:#ff79c6">=&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>string(&lt;span style="color:#f1fa8c">&amp;#34;./module/libmodule1&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">+&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;.dll&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#else
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span>&lt;span style="color:#ff79c6">&lt;/span> libPath &lt;span style="color:#ff79c6">=&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>string(&lt;span style="color:#f1fa8c">&amp;#34;./module/libmodule1&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">+&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;.so&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#endif
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span>&lt;span style="color:#ff79c6">&lt;/span> Base &lt;span style="color:#ff79c6">*&lt;/span>module &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">nullptr&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> handle &lt;span style="color:#ff79c6">=&lt;/span> loadLib(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>module, libPath.c_str(), std&lt;span style="color:#ff79c6">::&lt;/span>string(&lt;span style="color:#f1fa8c">&amp;#34;module1_create&amp;#34;&lt;/span>).c_str());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (&lt;span style="color:#ff79c6">!&lt;/span>module) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;load lib module1&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34; fail&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> module&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>readLine(&lt;span style="color:#f1fa8c">&amp;#34;abc&amp;#34;&lt;/span>) &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>现在基本就完成了一个动态库的动态加载过程。如果想要拓展，只要再按照这个规则，写一个新的模块然后加载上来就可以了。&lt;/p>
&lt;p>最后放一个相对完整的动态加载的demo，&lt;a class="link" href="https://github.com/lqxhub/dynamic-loading-lib" target="_blank" rel="noopener"
>github&lt;/a>&lt;/p></description></item><item><title>debian11 升级到 debian12</title><link>https://lqxhub.github.io/posts/39fad342/</link><pubDate>Sun, 14 May 2023 14:12:12 +0000</pubDate><guid>https://lqxhub.github.io/posts/39fad342/</guid><description>&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/debian-12-banner.jpg" alt="Featured image of post debian11 升级到 debian12" />&lt;p>根据debian官方发布的公告，debian12的发布日期是2023年6月10日。
我原本以为要等到那天才能更新呢，去网站看了一下，现在就可以更新了，那还用说了，直接冲。&lt;/p>
&lt;p>其实更新方式也非常简单，只需要把 &lt;strong>apt&lt;/strong> 的源换成 debian12的，然后执行 &lt;code>apt full-upgrade&lt;/code>
就可以了&lt;/p>
&lt;p>在国内，不建议使用官方的源，网速慢，国内有很多镜像，找一下替换一下就行。&lt;/p>
&lt;p>我用的是清华大学的镜像，&lt;/p>
&lt;p>&lt;a class="link" href="https://mirrors.tuna.tsinghua.edu.cn/help/debian/" target="_blank" rel="noopener"
>地址&lt;/a>&lt;/p>
&lt;p>选择对应的debian版本，如图中&lt;/p>
&lt;p>
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/tsinghua.png">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/tsinghua.png" alt="" />
&lt;/a>
&lt;/div>
&lt;/p>
&lt;p>回到linux中，在升级12前，建议把关键数据做一次备份，出问题了还有回头路。 我使用的虚拟机，在升级前创建了一个快照&lt;/p>
&lt;p>在升级前 先把11的所有包都更新到最新&lt;/p>
&lt;ol>
&lt;li>&lt;code>sudo apt update&lt;/code>&lt;/li>
&lt;li>&lt;code>sudo apt upgrade&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>将 &lt;code>/etc/apt/sources.list&lt;/code> 所有的配置删掉，把debian12 的复制进去&lt;/p>
&lt;p>然后执行&lt;/p>
&lt;ol>
&lt;li>&lt;code>sudo apt update&lt;/code>&lt;/li>
&lt;li>&lt;code>sudo apt full-upgrade&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>等待下载完成后会自动安装。如果你有更改过一些包的配置，在重新安装的时候会询问你使用默认的配置还是修改后的配置&lt;/p>
&lt;p>一般情况下选择自己修改后的配置就可以了。&lt;/p>
&lt;p>等全部完成后 重启进入系统，整个升级就完成了&lt;/p>
&lt;p>系统升级后，如果使用的是gnome桌面，因为gnome从3升级到了4，所以原来的一些插件就不能用了，这时候只需要把旧的插件卸载 换成新的就可以&lt;/p>
&lt;p>如果这个插件没有兼容gnome4的，那就没法了 0.0&lt;/p>
&lt;p>我升级后只有一个插件不能用了，换成最新版的就可以，原来软件都能正常使用，已经用了两天了，完全没有问题&lt;/p></description></item><item><title>tcp loopbcak与unix domain区别与性能对比，在Linux系统中如何使用这两种网络通信方式，展示Unix套接字的使用方法</title><link>https://lqxhub.github.io/posts/afb2aaad/</link><pubDate>Sun, 23 Oct 2022 17:35:05 +0000</pubDate><guid>https://lqxhub.github.io/posts/afb2aaad/</guid><description>&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/8025.jpg_wh860.jpg" alt="Featured image of post tcp loopbcak与unix domain区别与性能对比，在Linux系统中如何使用这两种网络通信方式，展示Unix套接字的使用方法" />&lt;h2 id="访问本机网络的方式">&lt;a href="#%e8%ae%bf%e9%97%ae%e6%9c%ac%e6%9c%ba%e7%bd%91%e7%bb%9c%e7%9a%84%e6%96%b9%e5%bc%8f" class="header-anchor">&lt;/a>访问本机网络的方式
&lt;/h2>&lt;p>访问同一台电脑上的网络，一般用的地址是 &lt;code>localhost&lt;/code> 或者 &lt;code>127.0.0.1&lt;/code>这两种方式，比如本机有一个Nginx服务器，想要访问本机Nginx，在浏览器中输入&lt;code>localhost&lt;/code> 或者 &lt;code>127.0.0.1&lt;/code>就能访问到Nginx的首页。如果要连接到本机的mysql， 在连接的时候，把地址填&lt;code>127.0.0.1&lt;/code>就好了&lt;/p>
&lt;h2 id="tcp-本地回环">&lt;a href="#tcp-%e6%9c%ac%e5%9c%b0%e5%9b%9e%e7%8e%af" class="header-anchor">&lt;/a>tcp 本地回环
&lt;/h2>&lt;p>为什么使用&lt;code>localhost&lt;/code>或者&lt;code>1270.0.1&lt;/code>就能访问本机的网络或者程序呢，是因为在每台电脑上都有一个特殊的网络，这个网络就是本地回环（local loopback）。&lt;code>localhost&lt;/code>可以看做是 127.0.0.1 的域名。一般在hosts文件中都会有一条配置，使 &lt;code>localhost&lt;/code> 映射到&lt;code>1270.0.0.1&lt;/code>&lt;/p>
&lt;p>在linux系统(debin 11)中, 使用 &lt;code>ip a&lt;/code>命令可以查看本机的网络&lt;/p>
&lt;p>
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-c3a8b53e75c2b3d6.webp">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-c3a8b53e75c2b3d6.webp" alt="" />
&lt;/a>
&lt;/div>
&lt;/p>
&lt;p>可以看到，第一个网络就是本地回环（loopback），他的 ip 地址就是就是 &lt;code>127.0.0.1&lt;/code>&lt;/p>
&lt;p>本地回环也是网络，是一个特殊的虚拟网卡。使用本地回环网络时，数据也会经过网络栈的封包和解包。&lt;/p>
&lt;p>
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-69e2bb8bc11cc8d3.webp">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-69e2bb8bc11cc8d3.webp" alt="" />
&lt;/a>
&lt;/div>
&lt;/p>
&lt;p>可以看到，tcp属于运输层（传输层）协议，所以在本机发送数据时，也会经过&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>传输层-&amp;gt;网络层-&amp;gt;lookback-&amp;gt;网络层-&amp;gt;传输层
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样一个过程。&lt;/p>
&lt;h2 id="unix-domain">&lt;a href="#unix-domain" class="header-anchor">&lt;/a>unix domain
&lt;/h2>&lt;p>上面说了什么是 tcp 本地回环，那什么是 &lt;code>unix domain&lt;/code> 呢。unix domain 严格来说不是网络，是&lt;code>unix&lt;/code> 和 &lt;code>linux&lt;/code>系统提供的一个进程间通信的方式，有点类似管道。看名字也知道，unix domain 只支持&lt;code>unix&lt;/code>类的系统中，&lt;code>windows&lt;/code>系统是不支持的。unix 的使用方式和 tcp很像，但是底层的工作原理差别却很大。&lt;/p>
&lt;p>unix domain 中的数据传输 就不需要网络栈了，可以看做是操作系统做了一次内存中的一个数据复制。&lt;/p>
&lt;h2 id="使用-unix-domain">&lt;a href="#%e4%bd%bf%e7%94%a8-unix-domain" class="header-anchor">&lt;/a>使用 unix domain
&lt;/h2>&lt;p>如何使用tcp 相信都很熟了，就不上demo了。只上 unix domain 的代码吧。因为 unix domain 不支持 windows系统，所以要在linux或者unix系统中测试，下面会使用go在debin中测试一下&lt;/p>
&lt;p>unix domain 和tcp 一样 也是分 &lt;code>服务器&lt;/code> 和 &lt;code>客户端&lt;/code> 的&lt;/p>
&lt;p>&lt;code>unix domain 服务器 &lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">package&lt;/span> main
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span>&lt;span style="color:#ff79c6">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;io&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;net&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">func&lt;/span> &lt;span style="color:#50fa7b">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span> listen, err &lt;span style="color:#ff79c6">:=&lt;/span> &lt;span style="color:#50fa7b">GetUnixListen&lt;/span>(&lt;span style="color:#f1fa8c">&amp;#34;/tmp/test_server.sock&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> err &lt;span style="color:#ff79c6">!=&lt;/span> &lt;span style="color:#ff79c6">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span> &lt;span style="color:#8be9fd;font-style:italic">panic&lt;/span>(err)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span> &lt;span style="color:#ff79c6">defer&lt;/span> listen.&lt;span style="color:#50fa7b">Close&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span> &lt;span style="color:#ff79c6">for&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span> conn, err &lt;span style="color:#ff79c6">:=&lt;/span> listen.&lt;span style="color:#50fa7b">Accept&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> err &lt;span style="color:#ff79c6">!=&lt;/span> &lt;span style="color:#ff79c6">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>&lt;span> &lt;span style="color:#8be9fd;font-style:italic">panic&lt;/span>(err)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22&lt;/span>&lt;span> buf &lt;span style="color:#ff79c6">:=&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">make&lt;/span>([]&lt;span style="color:#8be9fd">byte&lt;/span>, &lt;span style="color:#bd93f9">1024&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23&lt;/span>&lt;span> &lt;span style="color:#6272a4">//读数据
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> n, err &lt;span style="color:#ff79c6">:=&lt;/span> conn.&lt;span style="color:#50fa7b">Read&lt;/span>(buf)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> err &lt;span style="color:#ff79c6">!=&lt;/span> &lt;span style="color:#ff79c6">nil&lt;/span> &lt;span style="color:#ff79c6">&amp;amp;&amp;amp;&lt;/span> err &lt;span style="color:#ff79c6">!=&lt;/span> io.EOF {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26&lt;/span>&lt;span> &lt;span style="color:#8be9fd;font-style:italic">panic&lt;/span>(err)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28&lt;/span>&lt;span> fmt.&lt;span style="color:#50fa7b">Printf&lt;/span>(&lt;span style="color:#f1fa8c">&amp;#34;%s\n&amp;#34;&lt;/span>, buf[:n])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30&lt;/span>&lt;span> &lt;span style="color:#6272a4">//写数据
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> _, err = conn.&lt;span style="color:#50fa7b">Write&lt;/span>([]&lt;span style="color:#8be9fd;font-style:italic">byte&lt;/span>(&lt;span style="color:#f1fa8c">&amp;#34;hello&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32&lt;/span>&lt;span> &lt;span style="color:#8be9fd;font-style:italic">panic&lt;/span>(err)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">func&lt;/span> &lt;span style="color:#50fa7b">GetUnixListen&lt;/span>(addr &lt;span style="color:#8be9fd">string&lt;/span>) (net.Listener, &lt;span style="color:#8be9fd">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37&lt;/span>&lt;span> listen, err &lt;span style="color:#ff79c6">:=&lt;/span> net.&lt;span style="color:#50fa7b">Listen&lt;/span>(&lt;span style="color:#f1fa8c">&amp;#34;unix&amp;#34;&lt;/span>, addr)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> err &lt;span style="color:#ff79c6">!=&lt;/span> &lt;span style="color:#ff79c6">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#ff79c6">nil&lt;/span>, err
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> listen, &lt;span style="color:#ff79c6">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>unix domain&lt;/code> 客户端&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">package&lt;/span> main
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span>&lt;span style="color:#ff79c6">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;io&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;net&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">func&lt;/span> &lt;span style="color:#50fa7b">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span> conn, err &lt;span style="color:#ff79c6">:=&lt;/span> &lt;span style="color:#50fa7b">GetUnixConn&lt;/span>(&lt;span style="color:#f1fa8c">&amp;#34;/tmp/test_server.sock&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> err &lt;span style="color:#ff79c6">!=&lt;/span> &lt;span style="color:#ff79c6">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span> &lt;span style="color:#8be9fd;font-style:italic">panic&lt;/span>(err)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span> buff &lt;span style="color:#ff79c6">:=&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">make&lt;/span>([]&lt;span style="color:#8be9fd">byte&lt;/span>, &lt;span style="color:#bd93f9">1024&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span> n, err &lt;span style="color:#ff79c6">:=&lt;/span> conn.&lt;span style="color:#50fa7b">Read&lt;/span>(buff)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> err &lt;span style="color:#ff79c6">!=&lt;/span> &lt;span style="color:#ff79c6">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> err &lt;span style="color:#ff79c6">!=&lt;/span> io.EOF {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>&lt;span> &lt;span style="color:#8be9fd;font-style:italic">panic&lt;/span>(err)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22&lt;/span>&lt;span> fmt.&lt;span style="color:#50fa7b">Printf&lt;/span>(&lt;span style="color:#f1fa8c">&amp;#34;%s\n&amp;#34;&lt;/span>, buff[:n])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24&lt;/span>&lt;span> conn.&lt;span style="color:#50fa7b">Write&lt;/span>([]&lt;span style="color:#8be9fd;font-style:italic">byte&lt;/span>(&lt;span style="color:#f1fa8c">&amp;#34;ok&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">func&lt;/span> &lt;span style="color:#50fa7b">GetUnixConn&lt;/span>(addr &lt;span style="color:#8be9fd">string&lt;/span>) (net.Conn, &lt;span style="color:#8be9fd">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28&lt;/span>&lt;span> conn, err &lt;span style="color:#ff79c6">:=&lt;/span> net.&lt;span style="color:#50fa7b">Dial&lt;/span>(&lt;span style="color:#f1fa8c">&amp;#34;unix&amp;#34;&lt;/span>, addr)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> err &lt;span style="color:#ff79c6">!=&lt;/span> &lt;span style="color:#ff79c6">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#ff79c6">nil&lt;/span>, err
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> conn, &lt;span style="color:#ff79c6">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到，在go中使用 unix domain的api 和tcp基本没有区别。有区别的地方是在监听和连接的地方。&lt;/p>
&lt;p>tcp 通过 &lt;code>IP&lt;/code>+&lt;code>端口&lt;/code>的方式来确定地址的，而unix domain 同时一个文件符 来确定地址。&lt;/p>
&lt;p>当unix domain开启监听后，会在目录中创建一个文件。在上面的例子中，就会在 &lt;code>/tmp&lt;/code> 目录中创建一个&lt;code>test_server.sock&lt;/code> 文件。
这是一个特殊的文件通过 &lt;code>file&lt;/code>命令可以看到&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>file test_server.sock
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span>test_server.sock: socket
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果在同一个目录下有一个同名的文件，unix domain 的监听就会失败。就像一个端口默认只能被监听一次一样。&lt;/p>
&lt;h2 id="unix-domain-和-tcp-loopback-性能对比">&lt;a href="#unix-domain-%e5%92%8c-tcp-loopback-%e6%80%a7%e8%83%bd%e5%af%b9%e6%af%94" class="header-anchor">&lt;/a>unix domain 和 tcp loopback 性能对比
&lt;/h2>&lt;p>我没有过严格的性能测试，只是写了一些简单的测试看了一下，在发送小的数据包时，unix domain 的性能会好于 tcp。当发送大的数据包时，两者的性能差距可以忽略不计了。&lt;/p>
&lt;p>这个也是符合预期的，小的数据包时，tcp会经过网络协议栈，当数据量变大时，网络协议栈的影响可以忽略不计了。&lt;/p>
&lt;h2 id="总结">&lt;a href="#%e6%80%bb%e7%bb%93" class="header-anchor">&lt;/a>总结
&lt;/h2>&lt;ol>
&lt;li>tcp look back&lt;/li>
&lt;/ol>
&lt;p>可以在多个平台使用，通过本机的虚拟网卡完成数据传输，需要经过网络协议栈，性能开销相对大一些。&lt;/p>
&lt;ol start="2">
&lt;li>unix domain&lt;/li>
&lt;/ol>
&lt;p>只能在unix类系统中使用，是操作系统提供的一种进程间通信方式。不需要经过网络协议栈，性能相对高一些。&lt;/p></description></item><item><title>linux 多线程或多进程 epoll处理 accept 导致惊群</title><link>https://lqxhub.github.io/posts/4926d2f3/</link><pubDate>Sun, 22 Aug 2021 00:10:33 +0000</pubDate><guid>https://lqxhub.github.io/posts/4926d2f3/</guid><description>&lt;p>
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-75bcac218baeff46.webp">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-75bcac218baeff46.webp" alt="" />
&lt;/a>
&lt;/div>
&lt;/p>
&lt;h2 id="什么是惊群">&lt;a href="#%e4%bb%80%e4%b9%88%e6%98%af%e6%83%8a%e7%be%a4" class="header-anchor">&lt;/a>什么是惊群
&lt;/h2>&lt;p>简单说，惊群是因为多进程（多线程）在同时阻塞等待同一个事件的时候（休眠状态），当事件发生时，就会唤醒所有等待的（休眠的）进程（线程）。但是事件只能被一个进程或线程处理，而其他进程（线程）获取失败，只能重新进入休眠状态，这种现象和性能浪费就叫做惊群。&lt;a class="link" href="https://zh.wikipedia.org/wiki/%E6%83%8A%E7%BE%A4%E9%97%AE%E9%A2%98" target="_blank" rel="noopener"
>维基百科-惊群&lt;/a>&lt;/p>
&lt;h2 id="产生惊群的条件">&lt;a href="#%e4%ba%a7%e7%94%9f%e6%83%8a%e7%be%a4%e7%9a%84%e6%9d%a1%e4%bb%b6" class="header-anchor">&lt;/a>产生惊群的条件
&lt;/h2>&lt;ol>
&lt;li>多个进程或者多个线程&lt;/li>
&lt;li>同时等待处理一个事件&lt;/li>
&lt;/ol>
&lt;h2 id="具体场景复现">&lt;a href="#%e5%85%b7%e4%bd%93%e5%9c%ba%e6%99%af%e5%a4%8d%e7%8e%b0" class="header-anchor">&lt;/a>具体场景复现
&lt;/h2>&lt;p>测试环境 :&lt;/p>
&lt;ol>
&lt;li>debian11&lt;/li>
&lt;li>内核5.10.0-8&lt;/li>
&lt;li>编译器 clang11&lt;/li>
&lt;/ol>
&lt;p>多线程和多进程在惊群问题上差不多，为了少些一点，下文中没有特殊说明，多线程 也包含了多进程&lt;/p>
&lt;p>在linux中，使用C/C++ 编写 tcp server时，会依次调用 &lt;code>socket()&lt;/code> &lt;code>bind()&lt;/code> &lt;code>listen()&lt;/code> &lt;code>accept()&lt;/code> 这几个函数，这几个函数会打开socket，绑定ip和端口，开始监听端口，accept函数会阻塞当前进程，等待客户端连接。&lt;/p>
&lt;p>如果在单线程中，只有一个accept函数在等待客户端连接，当客户端来连接的时候，只会有一个accept函数来处理，所以也不会存在惊群问题了。&lt;/p>
&lt;p>在多线模型中，多个线程分别accept同一个socket，当有客户端连接时，内核会通知所有的线程来处理这个请求，但是呢，请求只能被一个线程处理，其他的线程的不到这个事件，只能白白被唤醒。&lt;/p>
&lt;p>这是最简单的一种惊群，这种情况在linux2.6以后就不会产生了。因为在Linux 2.6 版本之后，通过引入一个标记位 WQ_FLAG_EXCLUSIVE，解决掉了 Accept 惊群效应。我原本还想在centos3.9（内核版本是2.5）中去复现这种情况，但是折腾了好久，也没能在centos上编译也运行C++程序，遂放弃。
不废话了，上代码，测试第一种情况&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;netinet/in.h&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;sys/epoll.h&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;thread&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;mutex&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;condition_variable&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span>&lt;span style="color:#ff79c6">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#define WORKER_THREAD 4
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span>&lt;span style="color:#ff79c6">&lt;/span>&lt;span style="color:#6272a4">//创建socket，并返回fd
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">createSocket&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> fd &lt;span style="color:#ff79c6">=&lt;/span> socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (fd &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;create socket error&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span> sockaddr_in sockAddr{};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>&lt;span> sockAddr.sin_port &lt;span style="color:#ff79c6">=&lt;/span> htons(PORT);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20&lt;/span>&lt;span> sockAddr.sin_family &lt;span style="color:#ff79c6">=&lt;/span> AF_INET;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21&lt;/span>&lt;span> sockAddr.sin_addr.s_addr &lt;span style="color:#ff79c6">=&lt;/span> htons(INADDR_ANY);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (bind(fd, (sockaddr &lt;span style="color:#ff79c6">*&lt;/span>) &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>sockAddr, &lt;span style="color:#ff79c6">sizeof&lt;/span>(sockAddr)) &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;bind socket error, port:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> PORT &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (listen(fd, &lt;span style="color:#bd93f9">100&lt;/span>) &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;listen port error&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> fd;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35&lt;/span>&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">Worker1&lt;/span>(&lt;span style="color:#8be9fd">int&lt;/span> socketFd, &lt;span style="color:#8be9fd">int&lt;/span> k) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34; Worker&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> k &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34; run &amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37&lt;/span>&lt;span> &lt;span style="color:#ff79c6">while&lt;/span> (&lt;span style="color:#8be9fd;font-style:italic">true&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> tfd &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39&lt;/span>&lt;span> sockaddr_in cli_addr{};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40&lt;/span>&lt;span> socklen_t length &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">sizeof&lt;/span>(cli_addr);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41&lt;/span>&lt;span> tfd &lt;span style="color:#ff79c6">=&lt;/span> accept(socketFd, (sockaddr &lt;span style="color:#ff79c6">*&lt;/span>) &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>cli_addr, &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>length);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;worker&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> k &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34; in &amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (tfd &lt;span style="color:#ff79c6">&amp;lt;=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">44&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;accept error&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">45&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">46&lt;/span>&lt;span> } &lt;span style="color:#ff79c6">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">47&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;worker&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> k &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34; accept &amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">48&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">49&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">50&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">51&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">52&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">53&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>mutex mutex;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">54&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>unique_lock&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>std&lt;span style="color:#ff79c6">::&lt;/span>mutex&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> lck(mutex);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">55&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>condition_variable cv;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">56&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">57&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> fd &lt;span style="color:#ff79c6">=&lt;/span> createSocket();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">58&lt;/span>&lt;span> &lt;span style="color:#6272a4">//第一种,多个线程不使用多路复用,accept同一个socket
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">59&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#ff79c6">for&lt;/span> (&lt;span style="color:#8be9fd">int&lt;/span> i &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>; i &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> WORKER_THREAD; &lt;span style="color:#ff79c6">++&lt;/span>i) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">60&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>&lt;span style="color:#ff79c6">thread&lt;/span> th(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>Worker1, fd, i &lt;span style="color:#ff79c6">+&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">61&lt;/span>&lt;span> th.detach();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">62&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">63&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">64&lt;/span>&lt;span> cv.wait(lck);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">65&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">66&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这代码可以用C写，但是习惯用C++了，就用C++写吧。代码也比较简单，&lt;code>createSocket()&lt;/code>创建了一个socket，然后4个线程分别去accept这个socket。
下面是运行结果：
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-c48c3f0cd5d7d843.webp">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-c48c3f0cd5d7d843.webp" alt="" />
&lt;/a>
&lt;/div>
&lt;/p>
&lt;p>可以看到，4个线程都在运行，并且accept，但是当连接来的时候，只有个线程能得到事件。&lt;/p>
&lt;p>既然linux内核已经帮我们处理了惊群，那我们还考虑这些干啥，直接用不就完了。&lt;/p>
&lt;p>但是，我们在写代码的时候一般不会直接阻塞accept的，都是使用多路复用来帮我们处理连接阻塞的是多路复用函数。目前综合性能比较好的IO多路复用是epoll。当在多线程中使用epoll时，惊群问题就会出现了。
先代码和结果，然后再解释&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;netinet/in.h&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;sys/epoll.h&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;thread&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;mutex&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;condition_variable&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span>&lt;span style="color:#ff79c6">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#define WORKER_THREAD 4
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span>&lt;span style="color:#ff79c6">&lt;/span>&lt;span style="color:#6272a4">//创建socket，并返回fd
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">createSocket&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> fd &lt;span style="color:#ff79c6">=&lt;/span> socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (fd &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;create socket error&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span> sockaddr_in sockAddr{};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>&lt;span> sockAddr.sin_port &lt;span style="color:#ff79c6">=&lt;/span> htons(PORT);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20&lt;/span>&lt;span> sockAddr.sin_family &lt;span style="color:#ff79c6">=&lt;/span> AF_INET;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21&lt;/span>&lt;span> sockAddr.sin_addr.s_addr &lt;span style="color:#ff79c6">=&lt;/span> htons(INADDR_ANY);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (bind(fd, (sockaddr &lt;span style="color:#ff79c6">*&lt;/span>) &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>sockAddr, &lt;span style="color:#ff79c6">sizeof&lt;/span>(sockAddr)) &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;bind socket error, port:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> PORT &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (listen(fd, &lt;span style="color:#bd93f9">100&lt;/span>) &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;listen port error&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> fd;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35&lt;/span>&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">Worker2&lt;/span>(&lt;span style="color:#8be9fd">int&lt;/span> socketFd, &lt;span style="color:#8be9fd">int&lt;/span> k) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34; Worker&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> k &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34; run &amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> eFd &lt;span style="color:#ff79c6">=&lt;/span> epoll_create(&lt;span style="color:#bd93f9">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (eFd &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;create epoll fail&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43&lt;/span>&lt;span> epoll_event epev_{};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">44&lt;/span>&lt;span> epev_.events &lt;span style="color:#ff79c6">=&lt;/span> EPOLLIN;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">45&lt;/span>&lt;span> epev_.data.fd &lt;span style="color:#ff79c6">=&lt;/span> socketFd;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">46&lt;/span>&lt;span> epoll_ctl(eFd, EPOLL_CTL_ADD, socketFd, &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>epev_);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">47&lt;/span>&lt;span> epoll_event events[EVENT_NUM];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">48&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">49&lt;/span>&lt;span> &lt;span style="color:#ff79c6">while&lt;/span> (&lt;span style="color:#8be9fd;font-style:italic">true&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">50&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> eNum &lt;span style="color:#ff79c6">=&lt;/span> epoll_wait(eFd, events, EVENT_NUM, &lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">51&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (eNum &lt;span style="color:#ff79c6">==&lt;/span> &lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">52&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;epoll error&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">53&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">54&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">55&lt;/span>&lt;span> &lt;span style="color:#6272a4">//一定要加上这句,防止事件被瞬间处理,导致看不到结果
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">56&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>this_thread&lt;span style="color:#ff79c6">::&lt;/span>sleep_for((std&lt;span style="color:#ff79c6">::&lt;/span>chrono&lt;span style="color:#ff79c6">::&lt;/span>seconds (&lt;span style="color:#bd93f9">1&lt;/span>)));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">57&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;worker&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> k &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34; in &amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">58&lt;/span>&lt;span> &lt;span style="color:#ff79c6">for&lt;/span> (&lt;span style="color:#8be9fd">int&lt;/span> i &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>; i &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> eNum; &lt;span style="color:#ff79c6">++&lt;/span>i) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">59&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (events[i].data.fd &lt;span style="color:#ff79c6">==&lt;/span> socketFd) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">60&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> tfd &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">61&lt;/span>&lt;span> sockaddr_in cli_addr{};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">62&lt;/span>&lt;span> socklen_t length &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">sizeof&lt;/span>(cli_addr);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">63&lt;/span>&lt;span> tfd &lt;span style="color:#ff79c6">=&lt;/span> accept(socketFd, (sockaddr &lt;span style="color:#ff79c6">*&lt;/span>) &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>cli_addr, &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>length);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">64&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (tfd &lt;span style="color:#ff79c6">&amp;lt;=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">65&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;accept error&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">66&lt;/span>&lt;span> } &lt;span style="color:#ff79c6">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">67&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;worker&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> k &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34; accept &amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">68&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">69&lt;/span>&lt;span> } &lt;span style="color:#ff79c6">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">70&lt;/span>&lt;span> &lt;span style="color:#6272a4">//处理正常的socket读写事件,这里可以忽略,不是这次关注的点
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">71&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">72&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">73&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">74&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">75&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">76&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">77&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>mutex mutex;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">78&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>unique_lock&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>std&lt;span style="color:#ff79c6">::&lt;/span>mutex&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> lck(mutex);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">79&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>condition_variable cv;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">80&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> fd &lt;span style="color:#ff79c6">=&lt;/span> createSocket();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">81&lt;/span>&lt;span> &lt;span style="color:#6272a4">//第二种,多个线程使用epoll多路复用,accept同一个socket
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">82&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#ff79c6">for&lt;/span> (&lt;span style="color:#8be9fd">int&lt;/span> i &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>; i &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> WORKER_THREAD; &lt;span style="color:#ff79c6">++&lt;/span>i) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">83&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>&lt;span style="color:#ff79c6">thread&lt;/span> th(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>Worker2, fd, i &lt;span style="color:#ff79c6">+&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">84&lt;/span>&lt;span> th.detach();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">85&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">86&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>结果
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-7e95cb7234b64dc1.webp">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-7e95cb7234b64dc1.webp" alt="" />
&lt;/a>
&lt;/div>
这里可以看到，当有客户端来连接的时候，4个线程都被唤醒了，但是只有workr2 线程成功获取了事件，其余的3个线程都白白唤醒浪费了性能&lt;/p>
&lt;p>为啥内核已经处理了第一种情景下的惊群问题，第二种情景下的惊群问题为啥就不处理了呢？&lt;/p>
&lt;p>我的猜想不一定正确，如果有错误，请指出：&lt;/p>
&lt;blockquote>
&lt;p>accept 只能是被一个进程调用成功（连接事件只会处理一次嘛），所以内核就直接处理了（一个accept只会唤醒一个进程）。但 epoll 不一样，epoll中管理了很多连接，不止socket这一个，除了可能后续被 accept 调用外，还有可能是其他网络 IO 事件的，而其他 IO 事件是否只能由一个进程处理，是不一定的，这是一个由用户决定的事情，例如可能一个文件会由多个进程来读写。所以，对 epoll 默认对于多进程监听同一文件不会设置互斥，所以就导致了epoll惊群问题。&lt;/p>
&lt;/blockquote>
&lt;p>在linux4.5内核之后给epoll添加了一个 &lt;code>EPOLLEXCLUSIVE&lt;/code>的标志位，如果设置了这个标志位，那epoll将进程挂到等待队列时将会设置一下互斥标志位，这时实现跟内核原生accept一样的特性，只会唤醒队列中的一个进程。&lt;a class="link" href="https://segmentfault.com/a/1190000039676522" target="_blank" rel="noopener"
>参考资料&lt;/a> 感谢这位大神的文章&lt;/p>
&lt;p>修改一下worker2函数:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">Worker2&lt;/span>(&lt;span style="color:#8be9fd">int&lt;/span> socketFd, &lt;span style="color:#8be9fd">int&lt;/span> k) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34; Worker&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> k &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34; run &amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> eFd &lt;span style="color:#ff79c6">=&lt;/span> epoll_create(&lt;span style="color:#bd93f9">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (eFd &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;create epoll fail&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span> epoll_event epev_{};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span> &lt;span style="color:#6272a4">//给epoll加上 互斥标志
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> epev_.events &lt;span style="color:#ff79c6">=&lt;/span> EPOLLIN &lt;span style="color:#ff79c6">|&lt;/span> EPOLLEXCLUSIVE;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span> epev_.data.fd &lt;span style="color:#ff79c6">=&lt;/span> socketFd;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span> epoll_ctl(eFd, EPOLL_CTL_ADD, socketFd, &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>epev_);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span> epoll_event events[EVENT_NUM];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span> &lt;span style="color:#ff79c6">while&lt;/span> (&lt;span style="color:#8be9fd;font-style:italic">true&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> eNum &lt;span style="color:#ff79c6">=&lt;/span> epoll_wait(eFd, events, EVENT_NUM, &lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (eNum &lt;span style="color:#ff79c6">==&lt;/span> &lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;epoll error&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22&lt;/span>&lt;span> &lt;span style="color:#6272a4">//一定要加上这句,防止事件被瞬间处理,导致看不到结果
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>this_thread&lt;span style="color:#ff79c6">::&lt;/span>sleep_for((std&lt;span style="color:#ff79c6">::&lt;/span>chrono&lt;span style="color:#ff79c6">::&lt;/span>seconds(&lt;span style="color:#bd93f9">1&lt;/span>)));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;worker&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> k &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34; in &amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25&lt;/span>&lt;span> &lt;span style="color:#ff79c6">for&lt;/span> (&lt;span style="color:#8be9fd">int&lt;/span> i &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>; i &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> eNum; &lt;span style="color:#ff79c6">++&lt;/span>i) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (events[i].data.fd &lt;span style="color:#ff79c6">==&lt;/span> socketFd) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> tfd &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28&lt;/span>&lt;span> sockaddr_in cli_addr{};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29&lt;/span>&lt;span> socklen_t length &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">sizeof&lt;/span>(cli_addr);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30&lt;/span>&lt;span> tfd &lt;span style="color:#ff79c6">=&lt;/span> accept(socketFd, (sockaddr &lt;span style="color:#ff79c6">*&lt;/span>) &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>cli_addr, &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>length);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (tfd &lt;span style="color:#ff79c6">&amp;lt;=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;accept error&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33&lt;/span>&lt;span> } &lt;span style="color:#ff79c6">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;worker&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> k &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34; accept &amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36&lt;/span>&lt;span> } &lt;span style="color:#ff79c6">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37&lt;/span>&lt;span> &lt;span style="color:#6272a4">//处理正常的socket读写事件,这里可以忽略,不是这次关注的点
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>现在来测试一下
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-5b7fb90f54f0e9d8.webp">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-5b7fb90f54f0e9d8.webp" alt="" />
&lt;/a>
&lt;/div>
现在的epoll已经不会有惊群问题了&lt;/p>
&lt;h2 id="另一种方式">&lt;a href="#%e5%8f%a6%e4%b8%80%e7%a7%8d%e6%96%b9%e5%bc%8f" class="header-anchor">&lt;/a>另一种方式
&lt;/h2>&lt;p>其实解决多线程使用epoll等多路复用导致的惊群问题，还有一个更彻底解决方法，让每个线程分别打开一个socket，并且这些socket绑定在同一个端口，然后accept这个socket。这就像第一种情景那样，内核直接帮我们做了惊群处理。这里会使用到 linux 3.9后 socket提供&lt;code>SO_REUSEPORT&lt;/code>标志。使用这个标志后，会允许多个socket绑定和监听同一个端口。
代码如下&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;netinet/in.h&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;sys/epoll.h&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;thread&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;mutex&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;condition_variable&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span>&lt;span style="color:#ff79c6">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#define WORKER_THREAD 4
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span>&lt;span style="color:#ff79c6">&lt;/span>&lt;span style="color:#6272a4">//创建socket，并返回fd
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">createSocket2&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> fd &lt;span style="color:#ff79c6">=&lt;/span> socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (fd &lt;span style="color:#ff79c6">==&lt;/span> &lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;create socket error&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> on &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (setsockopt(fd, SOL_SOCKET, SO_REUSEPORT, (&lt;span style="color:#ff79c6">const&lt;/span> &lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>) &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>on, &lt;span style="color:#ff79c6">sizeof&lt;/span>(on)) &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;set opt error, ret:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23&lt;/span>&lt;span> sockaddr_in sockAddr{};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24&lt;/span>&lt;span> sockAddr.sin_port &lt;span style="color:#ff79c6">=&lt;/span> htons(PORT);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25&lt;/span>&lt;span> sockAddr.sin_family &lt;span style="color:#ff79c6">=&lt;/span> AF_INET;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26&lt;/span>&lt;span> sockAddr.sin_addr.s_addr &lt;span style="color:#ff79c6">=&lt;/span> htons(INADDR_ANY);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (bind(fd, (sockaddr &lt;span style="color:#ff79c6">*&lt;/span>) &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>sockAddr, &lt;span style="color:#ff79c6">sizeof&lt;/span>(sockAddr)) &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;bind socket error, port:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> PORT &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (listen(fd, &lt;span style="color:#bd93f9">100&lt;/span>) &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;listen port error&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> fd;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40&lt;/span>&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">Worker3&lt;/span>(&lt;span style="color:#8be9fd">int&lt;/span> k) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34; Worker&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> k &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34; run &amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> socketFd &lt;span style="color:#ff79c6">=&lt;/span> createSocket2();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">44&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> eFd &lt;span style="color:#ff79c6">=&lt;/span> epoll_create(&lt;span style="color:#bd93f9">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">45&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (eFd &lt;span style="color:#ff79c6">==&lt;/span> &lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">46&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;create epoll fail&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">47&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">48&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">49&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">50&lt;/span>&lt;span> epoll_event epev_{};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">51&lt;/span>&lt;span> epev_.events &lt;span style="color:#ff79c6">=&lt;/span> EPOLLIN;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">52&lt;/span>&lt;span> epev_.data.fd &lt;span style="color:#ff79c6">=&lt;/span> socketFd;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">53&lt;/span>&lt;span> epoll_ctl(eFd, EPOLL_CTL_ADD, socketFd, &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>epev_);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">54&lt;/span>&lt;span> epoll_event events[EVENT_NUM];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">55&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">56&lt;/span>&lt;span> &lt;span style="color:#ff79c6">while&lt;/span> (&lt;span style="color:#8be9fd;font-style:italic">true&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">57&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> eNum &lt;span style="color:#ff79c6">=&lt;/span> epoll_wait(eFd, events, EVENT_NUM, &lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">58&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (eNum &lt;span style="color:#ff79c6">==&lt;/span> &lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">59&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;epoll error&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">60&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">61&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">62&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>this_thread&lt;span style="color:#ff79c6">::&lt;/span>sleep_for((std&lt;span style="color:#ff79c6">::&lt;/span>chrono&lt;span style="color:#ff79c6">::&lt;/span>seconds(&lt;span style="color:#bd93f9">1&lt;/span>)));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">63&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;worker&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> k &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34; in &amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">64&lt;/span>&lt;span> &lt;span style="color:#ff79c6">for&lt;/span> (&lt;span style="color:#8be9fd">int&lt;/span> i &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>; i &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> eNum; &lt;span style="color:#ff79c6">++&lt;/span>i) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">65&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (events[i].data.fd &lt;span style="color:#ff79c6">==&lt;/span> socketFd) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">66&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> tfd &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">67&lt;/span>&lt;span> sockaddr_in cli_addr{};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">68&lt;/span>&lt;span> socklen_t length &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">sizeof&lt;/span>(cli_addr);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">69&lt;/span>&lt;span> tfd &lt;span style="color:#ff79c6">=&lt;/span> accept(socketFd, (sockaddr &lt;span style="color:#ff79c6">*&lt;/span>) &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>cli_addr, &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>length);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">70&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (tfd &lt;span style="color:#ff79c6">&amp;lt;=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">71&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;accept error&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">72&lt;/span>&lt;span> } &lt;span style="color:#ff79c6">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">73&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;worker&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> k &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34; accept &amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">74&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">75&lt;/span>&lt;span> } &lt;span style="color:#ff79c6">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">76&lt;/span>&lt;span> &lt;span style="color:#6272a4">//处理正常的socket读写事件
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">77&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">78&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">79&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">80&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">81&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">82&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">83&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>mutex mutex;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">84&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>unique_lock&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>std&lt;span style="color:#ff79c6">::&lt;/span>mutex&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> lck(mutex);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">85&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>condition_variable cv;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">86&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">87&lt;/span>&lt;span> &lt;span style="color:#6272a4">//第三种,多个线程使用epoll多路复用,每个线程分别bind,listen 同一个端口, accept各自的socket
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">88&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#ff79c6">for&lt;/span> (&lt;span style="color:#8be9fd">int&lt;/span> i &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>; i &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> WORKER_THREAD; &lt;span style="color:#ff79c6">++&lt;/span>i) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">89&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>&lt;span style="color:#ff79c6">thread&lt;/span> th(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>Worker3, i &lt;span style="color:#ff79c6">+&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">90&lt;/span>&lt;span> th.detach();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">91&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">92&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">93&lt;/span>&lt;span> cv.wait(lck);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">94&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">95&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>结果
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-a210ececf944df66.webp">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-a210ececf944df66.webp" alt="" />
&lt;/a>
&lt;/div>
&lt;/p>
&lt;p>也是没有问题的，多个连接来的时候，只会有一个线程被唤醒，相当于在内核级别中实现了一个负载均衡&lt;/p>
&lt;h2 id="总结">&lt;a href="#%e6%80%bb%e7%bb%93" class="header-anchor">&lt;/a>总结
&lt;/h2>&lt;p>简单总结一下，当多个线程或者进程同时阻塞同一个事件的时候，会出现惊群现象，如果不适用epoll等多路复用技术，在linux2.6 以后内核已经帮我们处理了惊群问题。&lt;/p>
&lt;p>如果使用了epoll，就需要额外处理epoll导致的惊群问题，有两种方式&lt;/p>
&lt;ol>
&lt;li>linux4.5内核之后，epoll有一个&lt;code>EPOLLEXCLUSIVE&lt;/code>特性，可以防止epoll惊群出现&lt;/li>
&lt;li>linux 3.9内核之后给 socket 提供&lt;code>SO_REUSEPORT&lt;/code>特性，可以允许多个socket绑定在同一个端口上，相当于每个线程都有一个socket，在处理accept时，内核会自动处理惊群问题&lt;/li>
&lt;/ol>
&lt;p>1和2两种方式都能有效解决惊群问题，但是目前使用 socket的 &lt;code>SO_REUSEPORT&lt;/code> 是最好的方式.。&lt;/p>
&lt;p>我通过查资料得到 &lt;code> EPOLLEXCLUSIVE&lt;/code> 标识会保证一个事件发生时候只有一个线程会被唤醒，来避免多惊群问题。不过任一时候只能有一个Worker调用 accept，限制了真正并行的吞吐量。
这个有待验证，等我有时间再去深入了解一下。&lt;/p>
&lt;p>&lt;a class="link" href="https://gitee.com/lqxlucky/linux_socket_test1" target="_blank" rel="noopener"
>测试demo&lt;/a>&lt;/p></description></item><item><title>linux下 C++ 使用 epoll 多路复用 实现高性能的tcpserver</title><link>https://lqxhub.github.io/posts/91655bdf/</link><pubDate>Sun, 14 Mar 2021 13:58:35 +0000</pubDate><guid>https://lqxhub.github.io/posts/91655bdf/</guid><description>&lt;p>linux系统中，实现socket多路复用的技术有&lt;strong>select&lt;/strong> 、&lt;strong>poll&lt;/strong> 、&lt;strong>epoll&lt;/strong> 等多种方式。这些不同方式个有优缺点和适用场景，这不是本文讨论的重点，又兴趣的可以自己搜索学习一下。但是在高并发场景下， &lt;strong>epoll&lt;/strong> 性能是最高的， &lt;strong>Nginx&lt;/strong> 都听说过吧，大名鼎鼎的&lt;strong>Nginx&lt;/strong> 底层用的就是 &lt;strong>epoll&lt;/strong>。&lt;/p>
&lt;p>这篇文章主要是写怎么用 epoll，而不是原理分析。这篇文章不是最全的，也不是最深入的，但是绝对是一篇能让普通人看懂的，看完能自己用epoll写出一个tcpserver的文章。全废话不多说，直接开始搞&lt;/p>
&lt;p>首先明确一点，epoll 是linux系统提供的系统调用，也就说，epoll 在Windows系统上是没法使用的，相应的代码也是没法编译的。如果有人知道怎么在Windows中编译，请赐教。&lt;/p>
&lt;h2 id="工具">&lt;a href="#%e5%b7%a5%e5%85%b7" class="header-anchor">&lt;/a>工具
&lt;/h2>&lt;p>文中使用的开发环境&lt;/p>
&lt;ol>
&lt;li>系统: &lt;code>Debian GNU/Linux 10 (buster)&lt;/code>&lt;/li>
&lt;li>linux内核: &lt;code>4.19.0-14&lt;/code>&lt;/li>
&lt;li>gcc版本: &lt;code>8.3.0&lt;/code>&lt;/li>
&lt;/ol>
&lt;h2 id="准备知识">&lt;a href="#%e5%87%86%e5%a4%87%e7%9f%a5%e8%af%86" class="header-anchor">&lt;/a>准备知识
&lt;/h2>&lt;p>epoll是linux内核提供的功能，这个功能对外提供系统调用，在C/C++中通过三个函数对用户提供功能&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;code>epoll_create(int __size)&lt;/code> 创建一个epoll，&lt;strong>_size&lt;/strong> 参数在linux2.6内核之后就没有什么作用了, 但是要&amp;gt;0，一般直接填 &lt;strong>1&lt;/strong> 就好了。函数返回创建的epoll的文件描述符，如果创建失败，会返回 -1。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>epoll_ctl(nt __epfd, int __op, int __fd,struct epoll_event *__event)&lt;/code> 操作已有的epoll,&lt;strong>epfd&lt;/strong>epoll的文件描述符；&lt;strong>op&lt;/strong>操作方式，有添加、删除、修改等等；&lt;strong>_fd&lt;/strong> 要操作对象的描述符，如果是操作tcp连接，也会就是这个连接的描述符。&lt;strong>_event&lt;/strong> epoll 的响应事件，当epoll管理的tcp连接有事件发生时，会通过 _event 这个对象传递出来，所以在添加连接时，要把这个连接包装成一个 &lt;strong>epoll_event&lt;/strong> 对象 &lt;/br>&lt;/p>
&lt;ul>
&lt;li>op 类型&lt;/li>
&lt;li>&lt;strong>EPOLL_CTL_ADD&lt;/strong> 添加一个描述符&lt;/li>
&lt;li>&lt;strong>EPOLL_CTL_DEL&lt;/strong> 删除一个描述符&lt;/li>
&lt;li>&lt;strong>EPOLL_CTL_MOD&lt;/strong> 修改一个描述符&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>epoll_wait(int __epfd, struct epoll_event *__events,int __maxevents, int __timeout)&lt;/code> 当epoll管理的连接中有响应事件发生时,会回调这个函数。&lt;strong>epfd&lt;/strong>epoll的文件描述符；&lt;strong>__events&lt;/strong> 可以操作的连接数组；&lt;strong>__maxevents&lt;/strong> 一个可以处理的最大事件数量；&lt;strong>__timeout&lt;/strong> 超时时间（单位毫秒），如果填-1，会直到有可操作事件发生时才会返回，因为C++不支持函数多返回值，像Go可以直接返回所有事件和数量了 (╥╯^╰╥)。&lt;br>&lt;/p>
&lt;p>events 中的常用的类型：&lt;br>&lt;/p>
&lt;ul>
&lt;li>EPOLLIN ：表示对应的文件描述符可以读（SOCKET正常关闭）&lt;/li>
&lt;li>EPOLLOUT：表示对应的文件描述符可以写&lt;/li>
&lt;li>EPOLLPRI：表示对应的文件描述符有紧急的数据可读（表示有带外数据到来）&lt;/li>
&lt;li>EPOLLERR：表示对应的文件描述符发生错误(默认注册)&lt;/li>
&lt;li>EPOLLHUP：表示对应的文件描述符被挂断(默认注册)&lt;/li>
&lt;li>EPOLLET： 将EPOLL设为边缘触发(Edge Triggered)模式，这是相对于水平触发(Level Triggered)来说的&lt;/li>
&lt;li>EPOLLONESHOT：只监听一次事件，当监听完这次事件之后，如果还需要继续监听这个socket的话，需要再次把这个socket加入到EPOLL队列里
是不是很惊奇，这么牛逼的epoll就三个函数，第一次看到的时候我也觉得很奇怪，三个函数就能搞定那么复杂的事情。不过想想也是，把复杂的东西简化，才能体现出大神的实力&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="epoll的两种模式">&lt;a href="#epoll%e7%9a%84%e4%b8%a4%e7%a7%8d%e6%a8%a1%e5%bc%8f" class="header-anchor">&lt;/a>epoll的两种模式
&lt;/h3>&lt;p>epoll 事件有两种模型 &lt;strong>Level Triggered&lt;/strong> (LT) 和 &lt;strong>Edge Triggered&lt;/strong> (ET)：&lt;/br>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>LT(level triggered，水平触发模式)是默认的工作方式，并且同时支持 block 和 non-block socket。在这种做法中，内核告诉你一个文件描述符是否就绪了，然后你可以对这个就绪的fd进行IO操作。如果你不作任何操作，内核还是会继续通知你的，所以，这种模式编程出错误可能性要小一点。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ET(edge-triggered，边缘触发模式)是高速工作方式，只支持no-block socket。在这种模式下，当描述符从未就绪变为就绪时，内核通过epoll告诉你。然后它会假设你知道文件描述符已经就绪，并且不会再为那个文件描述符发送更多的就绪通知，等到下次有新的数据进来的时候才会再次出发就绪事件。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>把socket设置为非阻塞模式的方法&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> flags &lt;span style="color:#ff79c6">=&lt;/span> fcntl(fd, F_GETFL, &lt;span style="color:#bd93f9">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span>fcntl(fd, F_SETFL, flags &lt;span style="color:#ff79c6">|&lt;/span> O_NONBLOCK);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>需要的头文件 &lt;code>#include &amp;lt;fcntl.h&amp;gt;&lt;/code>&lt;/p>
&lt;h2 id="epoll原理">&lt;a href="#epoll%e5%8e%9f%e7%90%86" class="header-anchor">&lt;/a>epoll原理
&lt;/h2>&lt;p>简单通过画图解释一下epoll的工作原理
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-cb78a80f112544ea.webp">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-cb78a80f112544ea.webp" alt="" />
&lt;/a>
&lt;/div>
&lt;/p>
&lt;p>这里没有涉及太底层的东西，因为太底层的我也没研究过，不敢乱讲。知之为知之，不知为不知。&lt;/br>
epoll可以看做是一个由操作系统提供的容器，这个容器管理了一些 &lt;strong>epoll_event&lt;/strong> （图中我画成单向链表了，实际上用的是红黑树，因为画树太麻烦了），这个event是我们添加进去的，event中设置了要响应的事件类型，当epoll 检测到具体的 event 有对应的事件发生时，会通过&lt;strong>epoll_wait()&lt;/strong> 通知。&lt;/p>
&lt;h2 id="简单的epoll实现">&lt;a href="#%e7%ae%80%e5%8d%95%e7%9a%84epoll%e5%ae%9e%e7%8e%b0" class="header-anchor">&lt;/a>简单的epoll实现
&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#6272a4">//控制台输出
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;sys/socket.h&amp;gt;&lt;/span>&lt;span style="color:#6272a4">//创建socket
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;netinet/in.h&amp;gt;&lt;/span>&lt;span style="color:#6272a4">//socket addr
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;sys/epoll.h&amp;gt;&lt;/span>&lt;span style="color:#6272a4">//epoll
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span style="color:#6272a4">//close函数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;fcntl.h&amp;gt;&lt;/span>&lt;span style="color:#6272a4">//设置非阻塞
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span>&lt;span style="color:#ff79c6">using&lt;/span> &lt;span style="color:#ff79c6">namespace&lt;/span> std;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 10&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 11&lt;/span>&lt;span> &lt;span style="color:#ff79c6">const&lt;/span> &lt;span style="color:#8be9fd">int&lt;/span> EVENTS_SIZE &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">20&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 12&lt;/span>&lt;span> &lt;span style="color:#6272a4">//读socket的数组
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 13&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#8be9fd">char&lt;/span> buff[&lt;span style="color:#bd93f9">1024&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 14&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 15&lt;/span>&lt;span> &lt;span style="color:#6272a4">//创建一个tcp socket
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 16&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#8be9fd">int&lt;/span> socketFd &lt;span style="color:#ff79c6">=&lt;/span> socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 17&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 18&lt;/span>&lt;span> &lt;span style="color:#6272a4">//设置socket监听的地址和端口
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 19&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> sockaddr_in sockAddr{};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 20&lt;/span>&lt;span> sockAddr.sin_port &lt;span style="color:#ff79c6">=&lt;/span> htons(&lt;span style="color:#bd93f9">8088&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 21&lt;/span>&lt;span> sockAddr.sin_family &lt;span style="color:#ff79c6">=&lt;/span> AF_INET;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 22&lt;/span>&lt;span> sockAddr.sin_addr.s_addr &lt;span style="color:#ff79c6">=&lt;/span> htons(INADDR_ANY);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 23&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 24&lt;/span>&lt;span> &lt;span style="color:#6272a4">//将socket和地址绑定
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 25&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#ff79c6">if&lt;/span> (bind(socketFd, (sockaddr &lt;span style="color:#ff79c6">*&lt;/span>) &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>sockAddr, &lt;span style="color:#ff79c6">sizeof&lt;/span>(sockAddr)) &lt;span style="color:#ff79c6">==&lt;/span> &lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 26&lt;/span>&lt;span> cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;bind error&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 27&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 28&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 29&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 30&lt;/span>&lt;span> &lt;span style="color:#6272a4">//开始监听socket,当调用listen之后,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 31&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#6272a4">//进程就可以调用accept来接受一个外来的请求
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 32&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#6272a4">//第二个参数,请求队列的长度
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 33&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#ff79c6">if&lt;/span> (listen(socketFd, &lt;span style="color:#bd93f9">10&lt;/span>) &lt;span style="color:#ff79c6">==&lt;/span> &lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 34&lt;/span>&lt;span> cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;listen error&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 35&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 36&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 37&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 38&lt;/span>&lt;span> &lt;span style="color:#6272a4">//创建一个epoll,size已经不起作用了,一般填1就好了
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 39&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#8be9fd">int&lt;/span> eFd &lt;span style="color:#ff79c6">=&lt;/span> epoll_create(&lt;span style="color:#bd93f9">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 40&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 41&lt;/span>&lt;span> &lt;span style="color:#6272a4">//把socket包装成一个epoll_event对象
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 42&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#6272a4">//并添加到epoll中
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 43&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> epoll_event epev{};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 44&lt;/span>&lt;span> epev.events &lt;span style="color:#ff79c6">=&lt;/span> EPOLLIN;&lt;span style="color:#6272a4">//可以响应的事件,这里只响应可读就可以了
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 45&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> epev.data.fd &lt;span style="color:#ff79c6">=&lt;/span> socketFd;&lt;span style="color:#6272a4">//socket的文件描述符
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 46&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> epoll_ctl(eFd, EPOLL_CTL_ADD, socketFd, &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>epev);&lt;span style="color:#6272a4">//添加到epoll中
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 47&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 48&lt;/span>&lt;span> &lt;span style="color:#6272a4">//回调事件的数组,当epoll中有响应事件时,通过这个数组返回
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 49&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> epoll_event events[EVENTS_SIZE];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 50&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 51&lt;/span>&lt;span> &lt;span style="color:#6272a4">//整个epoll_wait 处理都要在一个死循环中处理
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 52&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#ff79c6">while&lt;/span> (&lt;span style="color:#8be9fd;font-style:italic">true&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 53&lt;/span>&lt;span> &lt;span style="color:#6272a4">//这个函数会阻塞,直到超时或者有响应事件发生
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 54&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#8be9fd">int&lt;/span> eNum &lt;span style="color:#ff79c6">=&lt;/span> epoll_wait(eFd, events, EVENTS_SIZE, &lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 55&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 56&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (eNum &lt;span style="color:#ff79c6">==&lt;/span> &lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 57&lt;/span>&lt;span> cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;epoll_wait&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 58&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 59&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 60&lt;/span>&lt;span> &lt;span style="color:#6272a4">//遍历所有的事件
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 61&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#ff79c6">for&lt;/span> (&lt;span style="color:#8be9fd">int&lt;/span> i &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>; i &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> eNum; i&lt;span style="color:#ff79c6">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 62&lt;/span>&lt;span> &lt;span style="color:#6272a4">//判断这次是不是socket可读(是不是有新的连接)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 63&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#ff79c6">if&lt;/span> (events[i].data.fd &lt;span style="color:#ff79c6">==&lt;/span> socketFd) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 64&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (events[i].events &lt;span style="color:#ff79c6">&amp;amp;&lt;/span> EPOLLIN) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 65&lt;/span>&lt;span> sockaddr_in cli_addr{};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 66&lt;/span>&lt;span> socklen_t length &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">sizeof&lt;/span>(cli_addr);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 67&lt;/span>&lt;span> &lt;span style="color:#6272a4">//接受来自socket连接
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 68&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#8be9fd">int&lt;/span> fd &lt;span style="color:#ff79c6">=&lt;/span> accept(socketFd, (sockaddr &lt;span style="color:#ff79c6">*&lt;/span>) &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>cli_addr, &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>length);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 69&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (fd &lt;span style="color:#ff79c6">&amp;gt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 70&lt;/span>&lt;span> &lt;span style="color:#6272a4">//设置响应事件,设置可读和边缘(ET)模式
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 71&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#6272a4">//很多人会把可写事件(EPOLLOUT)也注册了,后面会解释
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 72&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> epev.events &lt;span style="color:#ff79c6">=&lt;/span> EPOLLIN &lt;span style="color:#ff79c6">|&lt;/span> EPOLLET;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 73&lt;/span>&lt;span> epev.data.fd &lt;span style="color:#ff79c6">=&lt;/span> fd;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 74&lt;/span>&lt;span> &lt;span style="color:#6272a4">//设置连接为非阻塞模式
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 75&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#8be9fd">int&lt;/span> flags &lt;span style="color:#ff79c6">=&lt;/span> fcntl(fd, F_GETFL, &lt;span style="color:#bd93f9">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 76&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (flags &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 77&lt;/span>&lt;span> cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;set no block error, fd:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> fd &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 78&lt;/span>&lt;span> &lt;span style="color:#ff79c6">continue&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 79&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 80&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (fcntl(fd, F_SETFL, flags &lt;span style="color:#ff79c6">|&lt;/span> O_NONBLOCK) &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 81&lt;/span>&lt;span> cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;set no block error, fd:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> fd &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 82&lt;/span>&lt;span> &lt;span style="color:#ff79c6">continue&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 83&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 84&lt;/span>&lt;span> &lt;span style="color:#6272a4">//将新的连接添加到epoll中
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 85&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> epoll_ctl(eFd, EPOLL_CTL_ADD, fd, &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>epev);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 86&lt;/span>&lt;span> cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;client on line fd:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> fd &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 87&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 88&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 89&lt;/span>&lt;span> } &lt;span style="color:#ff79c6">else&lt;/span> {&lt;span style="color:#6272a4">//不是socket的响应事件
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 90&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 91&lt;/span>&lt;span> &lt;span style="color:#6272a4">//判断是不是断开和连接出错
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 92&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#6272a4">//因为连接断开和出错时,也会响应`EPOLLIN`事件
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 93&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#ff79c6">if&lt;/span> (events[i].events &lt;span style="color:#ff79c6">&amp;amp;&lt;/span> EPOLLERR &lt;span style="color:#ff79c6">||&lt;/span> events[i].events &lt;span style="color:#ff79c6">&amp;amp;&lt;/span> EPOLLHUP) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 94&lt;/span>&lt;span> &lt;span style="color:#6272a4">//出错时,从epoll中删除对应的连接
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 95&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#6272a4">//第一个是要操作的epoll的描述符
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 96&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#6272a4">//因为是删除,所有event参数天null就可以了
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 97&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> epoll_ctl(eFd, EPOLL_CTL_DEL, events[i].data.fd, &lt;span style="color:#ff79c6">nullptr&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 98&lt;/span>&lt;span> cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;client out fd:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> events[i].data.fd &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 99&lt;/span>&lt;span> close(events[i].data.fd);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">100&lt;/span>&lt;span> } &lt;span style="color:#ff79c6">else&lt;/span> &lt;span style="color:#ff79c6">if&lt;/span> (events[i].events &lt;span style="color:#ff79c6">&amp;amp;&lt;/span> EPOLLIN) {&lt;span style="color:#6272a4">//如果是可读事件
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">101&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">102&lt;/span>&lt;span> &lt;span style="color:#6272a4">//如果在windows中,读socket中的数据要用recv()函数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">103&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#8be9fd">int&lt;/span> len &lt;span style="color:#ff79c6">=&lt;/span> read(events[i].data.fd, buff, &lt;span style="color:#ff79c6">sizeof&lt;/span>(buff));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">104&lt;/span>&lt;span> &lt;span style="color:#6272a4">//如果读取数据出错,关闭并从epoll中删除连接
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">105&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#ff79c6">if&lt;/span> (len &lt;span style="color:#ff79c6">==&lt;/span> &lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">106&lt;/span>&lt;span> epoll_ctl(eFd, EPOLL_CTL_DEL, events[i].data.fd, &lt;span style="color:#ff79c6">nullptr&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">107&lt;/span>&lt;span> cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;client out fd:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> events[i].data.fd &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">108&lt;/span>&lt;span> close(events[i].data.fd);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">109&lt;/span>&lt;span> } &lt;span style="color:#ff79c6">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">110&lt;/span>&lt;span> &lt;span style="color:#6272a4">//正常读取,打印读到的数据
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">111&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> buff &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">112&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">113&lt;/span>&lt;span> &lt;span style="color:#6272a4">//向客户端发数据
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">114&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#8be9fd">char&lt;/span> a[] &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;123456&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">115&lt;/span>&lt;span> &lt;span style="color:#6272a4">//如果在windows中,向socket中写数据要用send()函数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">116&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> write(events[i].data.fd, a, &lt;span style="color:#ff79c6">sizeof&lt;/span>(a));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">117&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">118&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">119&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">120&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">121&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">122&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>常见的问题和注意事项在注释中，就单解释一下新连接注册事件的问题吧，很多文章中都会把可写事件也注册进去，像这样&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C++" data-lang="C++">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>sockaddr_in cli_addr{};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>socklen_t length &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">sizeof&lt;/span>(cli_addr);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span>&lt;span style="color:#6272a4">//接受来自socket连接
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>&lt;span style="color:#8be9fd">int&lt;/span> fd &lt;span style="color:#ff79c6">=&lt;/span> accept(socketFd, (sockaddr &lt;span style="color:#ff79c6">*&lt;/span>) &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>cli_addr, &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>length);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span>&lt;span style="color:#ff79c6">if&lt;/span> (fd &lt;span style="color:#ff79c6">&amp;gt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span> epev.events &lt;span style="color:#ff79c6">=&lt;/span> EPOLLIN &lt;span style="color:#ff79c6">|&lt;/span> EPOLLET &lt;span style="color:#ff79c6">|&lt;/span> EPOLLOUT;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span> epev.data.fd &lt;span style="color:#ff79c6">=&lt;/span> fd;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span> epoll_ctl(eFd, EPOLL_CTL_ADD, fd, &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>epev);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span> cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;client on line fd:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> fd &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>但是经过测试，不注册可写事件，直接往socket中写也是可以的&lt;br>
经过查资料得知:&lt;br>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>EPOLLIN&lt;/strong> : 如果状态改变了(比如 从无到有)，只要输入缓冲区可读就会触发&lt;/li>
&lt;li>&lt;strong>EPOLLOUT&lt;/strong> : 如果状态改变了(比如 从满到不满)，只要输出缓冲区可写就会触
如果把可写也注册上，会频繁回调，这里会有很多无用的回调，导致性能下降。
有一种思路，当向socket写失败后（write函数返回值 == -1），注册上 &lt;strong>EPOLLOUT&lt;/strong> 当响应了可写事件后，重新往socket中写数据，写成功后，再取消掉 &lt;strong>EPOLLOUT&lt;/strong>。 这里就不给出示例了&lt;/li>
&lt;/ul>
&lt;h2 id="客户端测试">&lt;a href="#%e5%ae%a2%e6%88%b7%e7%ab%af%e6%b5%8b%e8%af%95" class="header-anchor">&lt;/a>客户端测试
&lt;/h2>&lt;p>这次关注的是服务端实现，客户端就不用C++写了，用Go写了一个client（没别的原因，只是因为Go写起了简单）&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">package&lt;/span> main
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span>&lt;span style="color:#ff79c6">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;net&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;sync&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;time&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">const&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span> MAX_CONN = &lt;span style="color:#bd93f9">10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">func&lt;/span> &lt;span style="color:#50fa7b">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span> &lt;span style="color:#8be9fd;font-style:italic">var&lt;/span> wg sync.WaitGroup
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span> wg.&lt;span style="color:#50fa7b">Add&lt;/span>(&lt;span style="color:#bd93f9">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span> &lt;span style="color:#ff79c6">for&lt;/span> i &lt;span style="color:#ff79c6">:=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>; i &amp;lt; MAX_CONN; i&lt;span style="color:#ff79c6">++&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span> &lt;span style="color:#ff79c6">go&lt;/span> &lt;span style="color:#50fa7b">Conn&lt;/span>(&lt;span style="color:#f1fa8c">&amp;#34;192.168.199.164:8088&amp;#34;&lt;/span>, i)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>&lt;span> time.&lt;span style="color:#50fa7b">Sleep&lt;/span>(time.Millisecond &lt;span style="color:#ff79c6">*&lt;/span> &lt;span style="color:#bd93f9">100&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21&lt;/span>&lt;span> wg.&lt;span style="color:#50fa7b">Wait&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">func&lt;/span> &lt;span style="color:#50fa7b">Conn&lt;/span>(addr &lt;span style="color:#8be9fd">string&lt;/span>, id &lt;span style="color:#8be9fd">int&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25&lt;/span>&lt;span> conn, err &lt;span style="color:#ff79c6">:=&lt;/span> net.&lt;span style="color:#50fa7b">Dial&lt;/span>(&lt;span style="color:#f1fa8c">&amp;#34;tcp&amp;#34;&lt;/span>, addr)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> err &lt;span style="color:#ff79c6">!=&lt;/span> &lt;span style="color:#ff79c6">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27&lt;/span>&lt;span> fmt.&lt;span style="color:#50fa7b">Println&lt;/span>(err)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30&lt;/span>&lt;span> fmt.&lt;span style="color:#50fa7b">Println&lt;/span>(&lt;span style="color:#f1fa8c">&amp;#34;connect &amp;#34;&lt;/span>, id)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31&lt;/span>&lt;span> &lt;span style="color:#ff79c6">go&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">func&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32&lt;/span>&lt;span> buf &lt;span style="color:#ff79c6">:=&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">make&lt;/span>([]&lt;span style="color:#8be9fd">byte&lt;/span>, &lt;span style="color:#bd93f9">1024&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33&lt;/span>&lt;span> &lt;span style="color:#ff79c6">for&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34&lt;/span>&lt;span> n, err &lt;span style="color:#ff79c6">:=&lt;/span> conn.&lt;span style="color:#50fa7b">Read&lt;/span>(buf)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> err &lt;span style="color:#ff79c6">!=&lt;/span> &lt;span style="color:#ff79c6">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36&lt;/span>&lt;span> &lt;span style="color:#ff79c6">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38&lt;/span>&lt;span> fmt.&lt;span style="color:#50fa7b">Println&lt;/span>(id, &lt;span style="color:#f1fa8c">&amp;#34;read: &amp;#34;&lt;/span>, &lt;span style="color:#8be9fd;font-style:italic">string&lt;/span>(buf[:n]))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40&lt;/span>&lt;span> }()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41&lt;/span>&lt;span> time.&lt;span style="color:#50fa7b">Sleep&lt;/span>(time.Second &lt;span style="color:#ff79c6">*&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42&lt;/span>&lt;span> &lt;span style="color:#ff79c6">for&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43&lt;/span>&lt;span> _, err &lt;span style="color:#ff79c6">:=&lt;/span> conn.&lt;span style="color:#50fa7b">Write&lt;/span>([]&lt;span style="color:#8be9fd;font-style:italic">byte&lt;/span>(&lt;span style="color:#f1fa8c">&amp;#34;hello&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">44&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> err &lt;span style="color:#ff79c6">!=&lt;/span> &lt;span style="color:#ff79c6">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">45&lt;/span>&lt;span> &lt;span style="color:#ff79c6">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">46&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">47&lt;/span>&lt;span> time.&lt;span style="color:#50fa7b">Sleep&lt;/span>(time.Second &lt;span style="color:#ff79c6">*&lt;/span> &lt;span style="color:#bd93f9">10&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">48&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">49&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这只是一个测试用的，写的很粗糙，但是不影响使用&lt;/p>
&lt;p>服务端打印信息
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-8fb0e898063f3db7.webp">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-8fb0e898063f3db7.webp" alt="服务端" />
&lt;/a>
&lt;/div>
&lt;/p>
&lt;p>客户端打印信息
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-42cda40faa00d188.webp">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-42cda40faa00d188.webp" alt="客户端" />
&lt;/a>
&lt;/div>
&lt;/p>
&lt;h2 id="总结">&lt;a href="#%e6%80%bb%e7%bb%93" class="header-anchor">&lt;/a>总结
&lt;/h2>&lt;ol>
&lt;li>epoll是socket多路复用技术的一种，还有select和poll&lt;/li>
&lt;li>epoll 只能在linux使用(Windows下怎么用我没找到,如果说错了请指正)&lt;/li>
&lt;li>epoll 事件有 Level Triggered (LT) 和 Edge Triggered (ET) 两种模型，LT是默认模式，ET是高性能模式&lt;/li>
&lt;/ol>
&lt;p>另外，我使用面向对象的方式封装了一个epoll的tcpserver 代码有点多，就不贴在这了，已经上传
&lt;a class="link" href="https://github.com/lqxhub/epoll_server" target="_blank" rel="noopener"
>github&lt;/a>
&lt;a class="link" href="https://gitee.com/lqxlucky/epoll_server" target="_blank" rel="noopener"
>码云&lt;/a>&lt;/p>
&lt;p>欢迎给点个star ヾ(o◕∀◕)ﾉヾ&lt;/p></description></item><item><title>linux下通过rpath解决cmake动态编译后找不到动态链接库问题</title><link>https://lqxhub.github.io/posts/497a7ebf/</link><pubDate>Sat, 13 Mar 2021 17:48:50 +0000</pubDate><guid>https://lqxhub.github.io/posts/497a7ebf/</guid><description>&lt;p>这次书接上回，前段时间写了一篇《使用cmake构建C/C++项目和动态库》的文章， &lt;a class="link" href="https://lqxhub.github.io/posts/a20c5e48/" >传送门&lt;/a>。
但是直接通过cmake编译链接后，会有一个问题，那就是需要的.so文件不能更改目录，一旦.so文件目录变了,整个程序就没法运行了，这肯定是不行的。&lt;/p>
&lt;h2 id="原因">&lt;a href="#%e5%8e%9f%e5%9b%a0" class="header-anchor">&lt;/a>原因
&lt;/h2>&lt;p>后来我查一下一下，linux系统中，程序加载运行需要的.so文件是有顺序的&lt;/p>
&lt;ol>
&lt;li>环境变量LD_LIBRARY_PATH指定的路径&lt;/li>
&lt;li>gcc 编译时指定的运行时库路径-rpath&lt;/li>
&lt;li>ldconfig 配置文件ld.so.conf指定的路径&lt;/li>
&lt;li>系统默认库位置 /lib, /usr/lib&lt;/li>
&lt;/ol>
&lt;p>如果没有指定so的位置，gcc会自动把当前so所在的目录作为so的连接目录。知道原因了，问题就好解决了&lt;/p>
&lt;h2 id="解决办法">&lt;a href="#%e8%a7%a3%e5%86%b3%e5%8a%9e%e6%b3%95" class="header-anchor">&lt;/a>解决办法
&lt;/h2>&lt;p>先看一下现在的 &lt;strong>CMakeLists.txt&lt;/strong>文件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cmake" data-lang="cmake">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">cmake_minimum_required&lt;/span>(&lt;span style="color:#f1fa8c">VERSION&lt;/span> &lt;span style="color:#f1fa8c">3.13.3&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">project&lt;/span>(&lt;span style="color:#f1fa8c">project1&lt;/span> &lt;span style="color:#f1fa8c">C&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">set&lt;/span>(&lt;span style="color:#f1fa8c">CMAKE_C_STANDARD&lt;/span> &lt;span style="color:#f1fa8c">99&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">add_library&lt;/span>(&lt;span style="color:#f1fa8c">shared&lt;/span> &lt;span style="color:#f1fa8c">SHARED&lt;/span> &lt;span style="color:#f1fa8c">library.h&lt;/span> &lt;span style="color:#f1fa8c">library.c&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">set&lt;/span>(&lt;span style="color:#f1fa8c">LIBRARY_OUTPUT_PATH&lt;/span> &lt;span style="color:#ff79c6">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">PROJECT_SOURCE_DIR&lt;/span>&lt;span style="color:#ff79c6">}&lt;/span>&lt;span style="color:#f1fa8c">/lib&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">add_executable&lt;/span>(&lt;span style="color:#f1fa8c">project1&lt;/span> &lt;span style="color:#f1fa8c">main.c&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">target_link_libraries&lt;/span>(&lt;span style="color:#f1fa8c">project1&lt;/span> &lt;span style="color:#f1fa8c">shared&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我实验了两种办法，一是把.so 文件放到&lt;code>/lib&lt;/code> 或者 &lt;code>/usr/lib&lt;/code>中，这也是在安装很多软件时的做法，当使用包管理器安装软件时，需要的.so文件大多是安装到这两个目录下。在一种就是在编译时指定 &lt;code>rpath&lt;/code>的目录，使用相对目录，这样在复制文件的时候，把.so一起复制就可以了。&lt;/p>
&lt;h3 id="先用最简单的办法把so目录放到系统目录下">&lt;a href="#%e5%85%88%e7%94%a8%e6%9c%80%e7%ae%80%e5%8d%95%e7%9a%84%e5%8a%9e%e6%b3%95%e6%8a%8aso%e7%9b%ae%e5%bd%95%e6%94%be%e5%88%b0%e7%b3%bb%e7%bb%9f%e7%9b%ae%e5%bd%95%e4%b8%8b" class="header-anchor">&lt;/a>先用最简单的办法，把so目录放到系统目录下
&lt;/h3>&lt;p>
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-243a1ebb13296817.webp">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-243a1ebb13296817.webp" alt="" />
&lt;/a>
&lt;/div>
&lt;/p>
&lt;p>现在的目录结构如下，程序依赖的&lt;strong>libshared.so&lt;/strong> 在 &lt;strong>lib&lt;/strong> 目录下，现在把 &lt;strong>libshared.so&lt;/strong> 复制到 &lt;strong>/lib&lt;/strong> 目录下。这里有个要注意的地方，复制完后要执行 &lt;code>ldconfig&lt;/code> 命令，重新生成缓存，要不然程序依然找不到对应的.so文件
命令如下&lt;/p>
&lt;ol>
&lt;li>&lt;code>sudo mv lib/libshared.so /lib&lt;/code>&lt;/li>
&lt;li>&lt;code>sudo ldconfig &lt;/code>&lt;/li>
&lt;/ol>
&lt;p>这时候在运行 &lt;strong>project1&lt;/strong> 不会报错&lt;/p>
&lt;h3 id="编译时指定-rpath目录">&lt;a href="#%e7%bc%96%e8%af%91%e6%97%b6%e6%8c%87%e5%ae%9a-rpath%e7%9b%ae%e5%bd%95" class="header-anchor">&lt;/a>编译时指定 rpath目录
&lt;/h3>&lt;p>设置 &lt;strong>rpaht&lt;/strong> 有两种方式&lt;/p>
&lt;p>方式1&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cmake" data-lang="cmake">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">set&lt;/span>(&lt;span style="color:#f1fa8c">CMAKE_SKIP_BUILD_RPATH&lt;/span> &lt;span style="color:#f1fa8c">FALSE&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">set&lt;/span>(&lt;span style="color:#f1fa8c">CMAKE_BUILD_WITH_INSTALL_RPATH&lt;/span> &lt;span style="color:#f1fa8c">TRUE&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">set&lt;/span>(&lt;span style="color:#f1fa8c">CMAKE_INSTALL_RPATH&lt;/span> $&lt;span style="color:#f1fa8c">ORIGIN&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过修改编译后的 install 路径, 让程序在运行时通过程序的相对目录加载.so文件，其中 &lt;strong>$ORIGIN&lt;/strong> 变量是程序的当前目录&lt;/p>
&lt;p>方式2&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cmake" data-lang="cmake">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">set_target_properties&lt;/span>(&lt;span style="color:#f1fa8c">project1&lt;/span> &lt;span style="color:#f1fa8c">PROPERTIES&lt;/span> &lt;span style="color:#f1fa8c">LINK_FLAGS&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;-Wl,-rpath,./&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>方式2更粗暴，直接设置gcc的编译参数，指定&lt;strong>rpaht&lt;/strong> 是当前目录&lt;/p>
&lt;p>修改 &lt;strong>CMakeLists.txt&lt;/strong>文件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cmake" data-lang="cmake">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">cmake_minimum_required&lt;/span>(&lt;span style="color:#f1fa8c">VERSION&lt;/span> &lt;span style="color:#f1fa8c">3.13.3&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">project&lt;/span>(&lt;span style="color:#f1fa8c">project1&lt;/span> &lt;span style="color:#f1fa8c">C&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">set&lt;/span>(&lt;span style="color:#f1fa8c">CMAKE_C_STANDARD&lt;/span> &lt;span style="color:#f1fa8c">99&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">add_library&lt;/span>(&lt;span style="color:#f1fa8c">shared&lt;/span> &lt;span style="color:#f1fa8c">SHARED&lt;/span> &lt;span style="color:#f1fa8c">library.h&lt;/span> &lt;span style="color:#f1fa8c">library.c&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">set&lt;/span>(&lt;span style="color:#f1fa8c">LIBRARY_OUTPUT_PATH&lt;/span> &lt;span style="color:#ff79c6">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">PROJECT_SOURCE_DIR&lt;/span>&lt;span style="color:#ff79c6">}&lt;/span>&lt;span style="color:#f1fa8c">/lib&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span>&lt;span style="color:#6272a4">#方式1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">set&lt;/span>(&lt;span style="color:#f1fa8c">CMAKE_SKIP_BUILD_RPATH&lt;/span> &lt;span style="color:#f1fa8c">FALSE&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">set&lt;/span>(&lt;span style="color:#f1fa8c">CMAKE_BUILD_WITH_INSTALL_RPATH&lt;/span> &lt;span style="color:#f1fa8c">TRUE&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">set&lt;/span>(&lt;span style="color:#f1fa8c">CMAKE_INSTALL_RPATH&lt;/span> $&lt;span style="color:#f1fa8c">ORIGIN&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">add_executable&lt;/span>(&lt;span style="color:#f1fa8c">project1&lt;/span> &lt;span style="color:#f1fa8c">main.c&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span>&lt;span style="color:#6272a4">#方式2
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span>&lt;span style="color:#6272a4">#set_target_properties(project1 PROPERTIES LINK_FLAGS &amp;#34;-Wl,-rpath,./&amp;#34;)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">target_link_libraries&lt;/span>(&lt;span style="color:#f1fa8c">project1&lt;/span> &lt;span style="color:#f1fa8c">shared&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>重新生成 &lt;strong>MakeFile&lt;/strong> 文件, 然后编译&lt;/p>
&lt;p>编译生成的 &lt;strong>libshared.so&lt;/strong> 还是在 &lt;strong>lib&lt;/strong>目录下，先移动到可执行文件的同级目录下
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-74af9cfab32e95a7.webp">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-74af9cfab32e95a7.webp" alt="" />
&lt;/a>
&lt;/div>
&lt;/p>
&lt;p>最终目录如图，现在无论怎么复制文件，只要可执行文件和动态库在一个目录下，都以运行了&lt;/p>
&lt;h2 id="总结">&lt;a href="#%e6%80%bb%e7%bb%93" class="header-anchor">&lt;/a>总结
&lt;/h2>&lt;p>解决linux下 动态编译的程序找不到动态库的问题，有多种解决办法，这次用了两种&lt;/p>
&lt;ol>
&lt;li>把需要的.so文件放到 &lt;strong>/lib&lt;/strong> 或者 &lt;strong>/usr/lib&lt;/strong> 下， 然后执行 &lt;code> ldconfig&lt;/code>命令&lt;/li>
&lt;li>通过指定 &lt;strong>rpath&lt;/strong> 来决定加载 .so的目录&lt;/li>
&lt;/ol></description></item><item><title>使用cmake构建C/C++项目和动态库</title><link>https://lqxhub.github.io/posts/a20c5e48/</link><pubDate>Sat, 13 Mar 2021 17:45:45 +0000</pubDate><guid>https://lqxhub.github.io/posts/a20c5e48/</guid><description>&lt;p>编译C/C++文件时，很多时候都是直接使用像 &lt;code>gcc main.c&lt;/code> 或者 &lt;code>g++ main.cpp&lt;/code> 这样的命令编译的。但是代码文件多了后，这样编译就很困难了。这时候 就出现了&lt;code>MakeFile&lt;/code> 这个工具。&lt;/p>
&lt;p>MakeFile 解决了多个文件编译难的问题，有了MakeFile，只需要在MakeFile的目录中 运行一下&lt;code>make&lt;/code> 命令， 编译就会自动完成。但是编写MakeFile又很啰嗦，于是聪明的程序员们有开发了一个工具，自动生成MakeFile 文件，&lt;code>cmake&lt;/code> 的作用就是自动生成MakeFile。毕竟写cmake要比写MakeFile要简单很多&lt;/p>
&lt;p>也许你会说，现在都是用IDE写代码，IDE都会自动自动编译和运行，我还学这些干啥。但是有时候需要服务器上编译项目，或者在没有IDE的机器上编译项目，这时候MakeFile就很有用了。其实很多IDE也是使用cmake完成编译的，比如 &lt;strong>clion&lt;/strong>&lt;/p>
&lt;h2 id="cmake-安装">&lt;a href="#cmake-%e5%ae%89%e8%a3%85" class="header-anchor">&lt;/a>cmake 安装
&lt;/h2>&lt;p>在linux上可以使用源码安装和包管理安装，一般直接用包管理安装就好了
Ubuntu和Debian
&lt;code>sudo apt-get install cmake&lt;/code>&lt;/p>
&lt;p>CentOS
&lt;code>sudo yum install cmake&lt;/code>&lt;/p>
&lt;p>因为cmake只是生成MakeFile，最终组织编译的还是MakeFile，所以还有安装&lt;code>make&lt;/code>&lt;/p>
&lt;p>make 一般都会预装，为了保险，还是装一下&lt;/p>
&lt;p>Ubuntu和Debian
&lt;code>sudo apt-get install make&lt;/code>&lt;/p>
&lt;p>CentOS
&lt;code>sudo yum install make&lt;/code>&lt;/p>
&lt;h2 id="cmake基本规则">&lt;a href="#cmake%e5%9f%ba%e6%9c%ac%e8%a7%84%e5%88%99" class="header-anchor">&lt;/a>cmake基本规则
&lt;/h2>&lt;p>cmake 也没啥神秘的，本质上也是根据一定的规则自动生成MakeFile的，也是有语法的&lt;/p>
&lt;p>&lt;code>#&lt;/code> 是注释符号&lt;/p>
&lt;h3 id="预定义变量">&lt;a href="#%e9%a2%84%e5%ae%9a%e4%b9%89%e5%8f%98%e9%87%8f" class="header-anchor">&lt;/a>预定义变量
&lt;/h3>&lt;p>&lt;code>PROJECT_NAME&lt;/code>项目名称
&lt;code>PROJECT_SOURCE_DIR&lt;/code>工程的根目录
&lt;code>PROJECT_BINARY_DIR&lt;/code> 执行cmake命令的目录
&lt;code>PROJECT_BINARY_DIR&lt;/code> 执行cmake命令的目录
&lt;code>CMAKE_CURRENT_SOURCE_DIR &lt;/code>当前CMakeLists.txt文件所在目录
&lt;code>CMAKE_C_FLAGS&lt;/code>设置C编译选项
&lt;code>CMAKE_CXX_FLAGS&lt;/code>设置C++编译选项
&lt;code>CMAKE_C_COMPILER&lt;/code>设置C编译器
&lt;code>CMAKE_CXX_COMPILER&lt;/code>设置C++编译器
&lt;code>EXECUTABLE_OUTPUT_PATH&lt;/code>设置编译后可执行文件目录
&lt;code>LIBRARY_OUTPUT_PATH&lt;/code>设置生成的库文件目录&lt;/p>
&lt;h3 id="常用规则">&lt;a href="#%e5%b8%b8%e7%94%a8%e8%a7%84%e5%88%99" class="header-anchor">&lt;/a>常用规则
&lt;/h3>&lt;p>&lt;code>cmake_minimum_required(VERSION 3.16)&lt;/code> 指令cmake 版本
&lt;code>project(hello_world)&lt;/code> 设置工程名
&lt;code>include_directories(${PROJECT_SOURCE_DIR}/include)&lt;/code> 添加头文件路径
&lt;code>link_directories(${PROJECT_SOURCE_DIR}/lib)&lt;/code> 添加链接库的路径
&lt;code>add_subdirectory(module)&lt;/code>添加 module 子目录, 此目录下也要有CMakeLists.txt文件
&lt;code>add_executable(project1 main.c)&lt;/code>指定编译的可执行文件
&lt;code>add_library(lib1 SHARED library.c library.h)&lt;/code>指定生成的库文件，&lt;strong>SHARED&lt;/strong>是生成动态库，&lt;strong>STATIC&lt;/strong>后生成静态库
&lt;code>add_compile_options()&lt;/code> 添加编译选项
&lt;code>target_link_libraries()&lt;/code>指定动态链接库
&lt;code>install()&lt;/code>指定make install的目录&lt;/p>
&lt;p>&lt;code>set(XXXX YYYYYY)&lt;/code>用于设置和修改变量
&lt;code>${XXXX}&lt;/code> 使用变量&lt;/p>
&lt;h2 id="构建一个简单的项目">&lt;a href="#%e6%9e%84%e5%bb%ba%e4%b8%80%e4%b8%aa%e7%ae%80%e5%8d%95%e7%9a%84%e9%a1%b9%e7%9b%ae" class="header-anchor">&lt;/a>构建一个简单的项目
&lt;/h2>&lt;p>只有一个 &lt;code>main.c&lt;/code> 文件&lt;/p>
&lt;p>CMakeList.txt&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cmake" data-lang="cmake">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">cmake_minimum_required&lt;/span>(&lt;span style="color:#f1fa8c">VERSION&lt;/span> &lt;span style="color:#f1fa8c">3.15&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">project&lt;/span>(&lt;span style="color:#f1fa8c">project1&lt;/span> &lt;span style="color:#f1fa8c">C&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">set&lt;/span>(&lt;span style="color:#f1fa8c">CMAKE_C_STANDARD&lt;/span> &lt;span style="color:#f1fa8c">99&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">add_executable&lt;/span>(&lt;span style="color:#f1fa8c">project1&lt;/span> &lt;span style="color:#f1fa8c">main.c&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>main.c&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C" data-lang="C">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span>&lt;span style="color:#ff79c6">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4&lt;/span>&lt;span> &lt;span style="color:#50fa7b">printf&lt;/span>(&lt;span style="color:#f1fa8c">&amp;#34;Hello, CMakeList!&lt;/span>&lt;span style="color:#f1fa8c">\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="编译一个debug版本">&lt;a href="#%e7%bc%96%e8%af%91%e4%b8%80%e4%b8%aadebug%e7%89%88%e6%9c%ac" class="header-anchor">&lt;/a>编译一个debug版本
&lt;/h3>&lt;ol>
&lt;li>&lt;code>mkdir debug&lt;/code> 新建debug目录&lt;/li>
&lt;li>&lt;code>cd debug&lt;/code> 进入debug目录&lt;/li>
&lt;li>&lt;code>cmake -DCMAKE_BUILD_TYPR=debug ..&lt;/code> 指定编译模式为debug&lt;/li>
&lt;li>&lt;code>make&lt;/code> 生成可执行文件&lt;/li>
&lt;/ol>
&lt;p>此时会生成&lt;code>project1&lt;/code>文件&lt;/p>
&lt;p>步骤 3 中 &lt;code>cmake -DCMAKE_BUILD_TYPE=release ..&lt;/code> 指定编译模式为release&lt;/p>
&lt;h2 id="构建一个生成动态库的项目">&lt;a href="#%e6%9e%84%e5%bb%ba%e4%b8%80%e4%b8%aa%e7%94%9f%e6%88%90%e5%8a%a8%e6%80%81%e5%ba%93%e7%9a%84%e9%a1%b9%e7%9b%ae" class="header-anchor">&lt;/a>构建一个生成动态库的项目
&lt;/h2>&lt;p>有两个文件&lt;code>library.h&lt;/code>和&lt;code>library.c&lt;/code>
CMakeList.txt&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cmake" data-lang="cmake">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">cmake_minimum_required&lt;/span>(&lt;span style="color:#f1fa8c">VERSION&lt;/span> &lt;span style="color:#f1fa8c">3.15&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">project&lt;/span>(&lt;span style="color:#f1fa8c">shared&lt;/span> &lt;span style="color:#f1fa8c">C&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">set&lt;/span>(&lt;span style="color:#f1fa8c">CMAKE_C_STANDARD&lt;/span> &lt;span style="color:#f1fa8c">99&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">add_library&lt;/span>(&lt;span style="color:#f1fa8c">shared&lt;/span> &lt;span style="color:#f1fa8c">SHARED&lt;/span> &lt;span style="color:#f1fa8c">library.c&lt;/span> &lt;span style="color:#f1fa8c">library.h&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>library.h&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">add&lt;/span>(&lt;span style="color:#8be9fd">int&lt;/span> a, &lt;span style="color:#8be9fd">int&lt;/span> b);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>library.c&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">add&lt;/span>(&lt;span style="color:#8be9fd">int&lt;/span> a, &lt;span style="color:#8be9fd">int&lt;/span> b) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> a &lt;span style="color:#ff79c6">+&lt;/span> b;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="生成动态库">&lt;a href="#%e7%94%9f%e6%88%90%e5%8a%a8%e6%80%81%e5%ba%93" class="header-anchor">&lt;/a>生成动态库
&lt;/h3>&lt;ol>
&lt;li>&lt;code>mkdir lib&lt;/code> 新建lib目录&lt;/li>
&lt;li>&lt;code>cd lib&lt;/code> 进入lib目录&lt;/li>
&lt;li>&lt;code>cmake -DCMAKE_BUILD_TYPE=debug ..&lt;/code> 指定编译模式为debug&lt;/li>
&lt;li>&lt;code>make&lt;/code> 生成可执行文件
此时会生成 &lt;code>libshared.so&lt;/code>文件&lt;/li>
&lt;/ol>
&lt;h2 id="在第一个项目中使用动态库">&lt;a href="#%e5%9c%a8%e7%ac%ac%e4%b8%80%e4%b8%aa%e9%a1%b9%e7%9b%ae%e4%b8%ad%e4%bd%bf%e7%94%a8%e5%8a%a8%e6%80%81%e5%ba%93" class="header-anchor">&lt;/a>在第一个项目中使用动态库
&lt;/h2>&lt;p>首先把 &lt;code>libshared.so&lt;/code>文件和&lt;code>library.h&lt;/code>文件复制到第一个项目中&lt;/p>
&lt;p>修改 CMakeList.txt&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cmake" data-lang="cmake">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">cmake_minimum_required&lt;/span>(&lt;span style="color:#f1fa8c">VERSION&lt;/span> &lt;span style="color:#f1fa8c">3.15&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">project&lt;/span>(&lt;span style="color:#f1fa8c">project1&lt;/span> &lt;span style="color:#f1fa8c">C&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">set&lt;/span>(&lt;span style="color:#f1fa8c">CMAKE_C_STANDARD&lt;/span> &lt;span style="color:#f1fa8c">99&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">add_executable&lt;/span>(&lt;span style="color:#f1fa8c">project1&lt;/span> &lt;span style="color:#f1fa8c">main.c&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">target_link_libraries&lt;/span>(&lt;span style="color:#f1fa8c">project1&lt;/span> &lt;span style="color:#ff79c6">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">PROJECT_SOURCE_DIR&lt;/span>&lt;span style="color:#ff79c6">}&lt;/span>&lt;span style="color:#f1fa8c">/libshared.so&lt;/span>)&lt;span style="color:#6272a4">#指定动态库文件
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>&lt;code>mkdir debug&lt;/code> 新建debug目录&lt;/li>
&lt;li>&lt;code>cd debug&lt;/code> 进入debug目录&lt;/li>
&lt;li>&lt;code>cmake -DCMAKE_BUILD_TYPE=debug ..&lt;/code> 指定编译模式为debug&lt;/li>
&lt;li>&lt;code>make&lt;/code> 生成可执行文件&lt;/li>
&lt;/ol>
&lt;p>最终目录如图
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-74e036182d3b091d.webp">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-74e036182d3b091d.webp" alt="" />
&lt;/a>
&lt;/div>
&lt;/p>
&lt;h2 id="把两个项目合成一个">&lt;a href="#%e6%8a%8a%e4%b8%a4%e4%b8%aa%e9%a1%b9%e7%9b%ae%e5%90%88%e6%88%90%e4%b8%80%e4%b8%aa" class="header-anchor">&lt;/a>把两个项目合成一个
&lt;/h2>&lt;p>能不能在一个项目中生成动态库并在这个项目中使用呢，当然是可以的。&lt;/p>
&lt;p>也就是在这个项目中部分文件编译成动态库 .so 文件， 部分文件编译成 可执行文件&lt;/p>
&lt;p>修改 CMakeList.txt&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cmake" data-lang="cmake">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">cmake_minimum_required&lt;/span>(&lt;span style="color:#f1fa8c">VERSION&lt;/span> &lt;span style="color:#f1fa8c">3.13.3&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">project&lt;/span>(&lt;span style="color:#f1fa8c">project1&lt;/span> &lt;span style="color:#f1fa8c">C&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">set&lt;/span>(&lt;span style="color:#f1fa8c">CMAKE_C_STANDARD&lt;/span> &lt;span style="color:#f1fa8c">99&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">add_library&lt;/span>(&lt;span style="color:#f1fa8c">shared&lt;/span> &lt;span style="color:#f1fa8c">SHARED&lt;/span> &lt;span style="color:#f1fa8c">library.h&lt;/span> &lt;span style="color:#f1fa8c">library.c&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">set&lt;/span>(&lt;span style="color:#f1fa8c">LIBRARY_OUTPUT_PATH&lt;/span> &lt;span style="color:#ff79c6">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">PROJECT_SOURCE_DIR&lt;/span>&lt;span style="color:#ff79c6">}&lt;/span>&lt;span style="color:#f1fa8c">/lib&lt;/span>)&lt;span style="color:#6272a4">#设置动态库输出目录
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">add_executable&lt;/span>(&lt;span style="color:#f1fa8c">project1&lt;/span> &lt;span style="color:#f1fa8c">main.c&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">target_link_libraries&lt;/span>(&lt;span style="color:#f1fa8c">project1&lt;/span> &lt;span style="color:#f1fa8c">shared&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>&lt;code>mkdir debug&lt;/code> 新建debug目录&lt;/li>
&lt;li>&lt;code>cd debug&lt;/code> 进入debug目录&lt;/li>
&lt;li>&lt;code>cmake -DCMAKE_BUILD_TYPE=debug ..&lt;/code> 指定编译模式为debug&lt;/li>
&lt;li>&lt;code>make&lt;/code> 生成可执行文件&lt;/li>
&lt;/ol>
&lt;p>最终目录如图&lt;/p>
&lt;p>
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-ef708a45de2bc055.webp">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-ef708a45de2bc055.webp" alt="" />
&lt;/a>
&lt;/div>
&lt;/p>
&lt;h2 id="最后">&lt;a href="#%e6%9c%80%e5%90%8e" class="header-anchor">&lt;/a>最后
&lt;/h2>&lt;p>通过几个简单的例子，介绍了一下cmake的基本使用，文中是使用cmake构建的C项目，换成C++基本没什么区别，就不展示了&lt;/p>
&lt;p>cmake的功能远不止这些，还需要在实战中多学习，多总结&lt;/p>
&lt;p>&lt;strong>2021-03-06 补充&lt;/strong>
通过上面的方式可以编译运行，但是会有一个问题，就是 &lt;strong>.so&lt;/strong> 文件不能更改目录，一旦动态库目录变了，程序就没法加载，程序也就没法运行了。为此又找资料学习一番，另写了一篇，{% post_link linux下cmake动态编译后找不到动态链接库 [传送门] %}&lt;/p></description></item><item><title>linux shell 脚本 常用的if判断条件</title><link>https://lqxhub.github.io/posts/6cd27815/</link><pubDate>Sat, 13 Mar 2021 11:27:54 +0000</pubDate><guid>https://lqxhub.github.io/posts/6cd27815/</guid><description>&lt;p>工作中经常需要写shell脚本来处理一些重复的东西，使用脚本自动编译，使用脚本多机器传输文件。&lt;/p>
&lt;p>因为不是天天写shell，只是用到的时候写一个，再加上脚本中的if的判断条件有点多，容易忘记，所以做个备忘录，以备不时之需&lt;/p>
&lt;h2 id="先说一下-if-表达式的基本语法">&lt;a href="#%e5%85%88%e8%af%b4%e4%b8%80%e4%b8%8b-if-%e8%a1%a8%e8%be%be%e5%bc%8f%e7%9a%84%e5%9f%ba%e6%9c%ac%e8%af%ad%e6%b3%95" class="header-anchor">&lt;/a>先说一下 if 表达式的基本语法
&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">if&lt;/span> &lt;span style="color:#ff79c6">[&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">command&lt;/span> &lt;span style="color:#ff79c6">]&lt;/span>; &lt;span style="color:#ff79c6">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span> 符合该条件执行的语句
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3&lt;/span>&lt;span>&lt;span style="color:#ff79c6">fi&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">if&lt;/span> &lt;span style="color:#ff79c6">[&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">command&lt;/span> &lt;span style="color:#ff79c6">]&lt;/span>;&lt;span style="color:#ff79c6">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span> 符合该条件执行的语句
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3&lt;/span>&lt;span>&lt;span style="color:#ff79c6">elif&lt;/span> &lt;span style="color:#ff79c6">[&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">command&lt;/span> &lt;span style="color:#ff79c6">]&lt;/span>;&lt;span style="color:#ff79c6">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4&lt;/span>&lt;span> 符合该条件执行的语句
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5&lt;/span>&lt;span>&lt;span style="color:#ff79c6">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6&lt;/span>&lt;span> 符合该条件执行的语句
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7&lt;/span>&lt;span>&lt;span style="color:#ff79c6">fi&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>注意：&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>if 条件 要以 &lt;code>fi&lt;/code> 结束&lt;/li>
&lt;li>&lt;code>[]&lt;/code> if语句中 和 表达式要注意空格&lt;/li>
&lt;li>&lt;code>then&lt;/code> 和 &lt;code>fi&lt;/code> 是分开的语句。如果要在同一行里面输入，则需要用分号将他们隔开&lt;/li>
&lt;li>使用 &lt;code>-z&lt;/code> 或者 &lt;code>-n&lt;/code> 来检查长度的时候，没有定义的变量也为0&lt;/li>
&lt;/ol>
&lt;h2 id="下面是常用表达式">&lt;a href="#%e4%b8%8b%e9%9d%a2%e6%98%af%e5%b8%b8%e7%94%a8%e8%a1%a8%e8%be%be%e5%bc%8f" class="header-anchor">&lt;/a>下面是常用表达式
&lt;/h2>&lt;h3 id="数字判断">&lt;a href="#%e6%95%b0%e5%ad%97%e5%88%a4%e6%96%ad" class="header-anchor">&lt;/a>数字判断
&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>表达式&lt;/th>
&lt;th>含义&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>int1 -eq int2&lt;/td>
&lt;td>两数相等为真&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>int1 -ne int2&lt;/td>
&lt;td>两数不等为真&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>int1 -gt int2&lt;/td>
&lt;td>int1大于int2为真&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>int1 -ge int2&lt;/td>
&lt;td>int1大于等于int2为真&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>int1 -lt int2&lt;/td>
&lt;td>int1小于int2为真&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>int1 -le int2&lt;/td>
&lt;td>int1小于等于int2为真&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="逻辑相关">&lt;a href="#%e9%80%bb%e8%be%91%e7%9b%b8%e5%85%b3" class="header-anchor">&lt;/a>逻辑相关
&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>表达式&lt;/th>
&lt;th>含义&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>-a&lt;/td>
&lt;td>与&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-o　&lt;/td>
&lt;td>或&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>!&lt;/td>
&lt;td>　非&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="字符串相关">&lt;a href="#%e5%ad%97%e7%ac%a6%e4%b8%b2%e7%9b%b8%e5%85%b3" class="header-anchor">&lt;/a>字符串相关
&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>表达式&lt;/th>
&lt;th>含义&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>STRING　&lt;/td>
&lt;td>当串str1为非空时为真&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-z STRING&lt;/td>
&lt;td>“STRING” 的长度为零则为真&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-n STRING&lt;/td>
&lt;td>“STRING” 的长度为非零 non-zero则为真&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>STRING1 == STRING2&lt;/td>
&lt;td>如果2个字符串相同则为真&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>STRING1 != STRING2&lt;/td>
&lt;td>如果字符串不相等则为&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="文件相关">&lt;a href="#%e6%96%87%e4%bb%b6%e7%9b%b8%e5%85%b3" class="header-anchor">&lt;/a>文件相关
&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>表达式&lt;/th>
&lt;th>含义&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>-a FILE&lt;/td>
&lt;td>如果 FILE 存在则为真&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-b FILE&lt;/td>
&lt;td>如果 FILE 存在且是一个块特殊文件则为真&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-c FILE&lt;/td>
&lt;td>如果 FILE 存在且是一个字特殊文件则为真&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-d FILE&lt;/td>
&lt;td>如果 FILE 存在且是一个目录则为真&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-e FILE&lt;/td>
&lt;td>如果 FILE 存在则为真&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-f FILE&lt;/td>
&lt;td>如果 FILE 存在且是一个普通文件则为真&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-g FILE&lt;/td>
&lt;td>如果 FILE 存在且已经设置了SGID则为真&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-h FILE&lt;/td>
&lt;td>如果 FILE 存在且是一个符号连接则为真&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-k FILE&lt;/td>
&lt;td>如果 FILE 存在且已经设置了粘制位则为真&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-p FILE&lt;/td>
&lt;td>如果 FILE 存在且是一个名字管道(F如果O)则为真&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-r FILE&lt;/td>
&lt;td>如果 FILE 存在且是可读的则为真&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-s FILE&lt;/td>
&lt;td>如果 FILE 存在且大小不为0则为真&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-t FD&lt;/td>
&lt;td>如果文件描述符 FD 打开且指向一个终端则为真&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-u FILE&lt;/td>
&lt;td>如果 FILE 存在且设置了SUID (set user ID)则为真&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-w FILE&lt;/td>
&lt;td>如果 FILE 如果 FILE 存在且是可写的则为真&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-x FILE&lt;/td>
&lt;td>如果 FILE 存在且是可执行的则为真&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-O FILE&lt;/td>
&lt;td>如果 FILE 存在且属有效用户ID则为真&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-G FILE&lt;/td>
&lt;td>如果 FILE 存在且属有效用户组则为真&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-L FILE&lt;/td>
&lt;td>如果 FILE 存在且是一个符号连接则为真&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-S FILE&lt;/td>
&lt;td>如果 FILE 存在且是一个套接字则为真&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>FILE1 -ot FILE2&lt;/td>
&lt;td>如果 FILE1 比 FILE2 要老, 或者 FILE2 存在且 FILE1 不存在则为真&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>FILE1 -ef FILE2&lt;/td>
&lt;td>如果 FILE1 和 FILE2 指向相同的设备和节点号则为真&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-o OPTIONNAME&lt;/td>
&lt;td>如果 shell选项 “OPTIONNAME” 开启则为真&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>ansible 在参数中传入密码</title><link>https://lqxhub.github.io/posts/f6596db0/</link><pubDate>Sat, 13 Jun 2020 17:06:53 +0000</pubDate><guid>https://lqxhub.github.io/posts/f6596db0/</guid><description>&lt;p>ansible是一个基于python开发自动化的运维工具，这个工具强大的地方是，被操作的机器上不需要安装任何软件，只需要在发起操作的机器上安装就可以使用了。
而且ansible支持很多模块，还可以基于ansible二次开发，添加自己的功能&lt;/p>
&lt;p>ansible功能和模块很多，这次我们只讲其中的一个。在命令行中，直接把要操作主机的用户名和密码传入。别的东西等以后有时间会继续写的，毕竟996太累了&lt;/p>
&lt;p>正常使用ansible一般都是 在 &lt;code>/ect/ansible/hosts&lt;/code> 中配置远程主机的用户和密码
一般写法&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>[test]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span>one ansible_ssh_host=192.168.199.209 ansible_ssh_port=22 ansible_ssh_user=root ansible_ssh_pass=123456
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后使用命令行
&lt;code>ansible test -m ping&lt;/code>
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-cfb7e759ab9cb508.webp">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-cfb7e759ab9cb508.webp" alt="" />
&lt;/a>
&lt;/div>
&lt;/p>
&lt;p>看到截图，说明已经ping通，说明配置是没问题的&lt;/p>
&lt;p>有时候，需要单独指定连接一台主机，或者只是临时连接一次，这时候没必要在&lt;strong>hosts&lt;/strong>文件中配置，可以直接在命令行中传入主机ip和连接用户名和密码
&lt;code>ansible all -i &amp;quot;192.168.199.209:22,&amp;quot; -m ping -e&amp;quot;ansible_user=root ansible_password=123456&amp;quot;&lt;/code>
&lt;strong>注意&lt;/strong>：ip后面一定要有一个&amp;quot;,&amp;quot;
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-e2301bcfad8e9e6a.webp">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-e2301bcfad8e9e6a.webp" alt="" />
&lt;/a>
&lt;/div>
&lt;/p>
&lt;p>截图中，说明没问题&lt;/p>
&lt;p>好了先写这些，ansible模块跟多，功能很多。尤其是playbook这个东西，更是牛逼，以后有时间继续写&lt;/p></description></item><item><title>修改Ubuntu和win10双系统启动顺序</title><link>https://lqxhub.github.io/posts/fcd83655/</link><pubDate>Sun, 25 Mar 2018 12:39:52 +0000</pubDate><guid>https://lqxhub.github.io/posts/fcd83655/</guid><description>&lt;p>因为想玩Linux，遂装了Ubuntu和win10的双系统，安装还好，一切顺利，两个系统都能正常启动，但是有一点让我非常不爽。就是启动的时候Ubuntu是默认启动项，开电脑一不注意就进Ubuntu了。额，重启吧&amp;hellip;&amp;hellip;&lt;/p>
&lt;p>默认的启动项顺序(图片是我盗的，因为我的已经改了)
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-7c02264608790c89.webp">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-7c02264608790c89.webp" alt="grub" />
&lt;/a>
&lt;/div>
&lt;/p>
&lt;p>有没有办法能改一下启动顺序呢？方法当然有了。因为用的是grub2引导，所以上网查了这方面的资料，没找到合适的，要不就是grub1的资料，要不就是治标不治本。所以本着大不了重装系统的心态，自己捣鼓&lt;/p>
&lt;h1 id="第一种方法只更改默认选项">&lt;a href="#%e7%ac%ac%e4%b8%80%e7%a7%8d%e6%96%b9%e6%b3%95%e5%8f%aa%e6%9b%b4%e6%94%b9%e9%bb%98%e8%ae%a4%e9%80%89%e9%a1%b9" class="header-anchor">&lt;/a>第一种方法，只更改默认选项
&lt;/h1>&lt;blockquote>
&lt;p>首先进入 &lt;em>/etc/default&lt;/em> 目录，执行&lt;code>sudo vim grub&lt;/code>
正常的话你看到的是这个
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-23b903b0e3106d73.webp">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-23b903b0e3106d73.webp" alt="grub.png" />
&lt;/a>
&lt;/div>
&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span> 6 GRUB_DEFAULT=&amp;#34;0&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span> 7 #GRUB_HIDDEN_TIMEOUT=&amp;#34;0&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3&lt;/span>&lt;span> 8 GRUB_HIDDEN_TIMEOUT_QUIET=&amp;#34;true&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4&lt;/span>&lt;span> 9 GRUB_TIMEOUT=&amp;#34;10&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5&lt;/span>&lt;span> 10 GRUB_DISTRIBUTOR=&amp;#34;`lsb_release -i -s 2&amp;gt; /dev/null || echo Debian`&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6&lt;/span>&lt;span> 11 GRUB_CMDLINE_LINUX_DEFAULT=&amp;#34;quiet splash&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7&lt;/span>&lt;span> 12 GRUB_CMDLINE_LINUX=&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>这是我们关注的内容，只需要把第6行的&lt;code>GRUB_DEFAULT=&amp;quot;0&amp;quot;&lt;/code>改成你想要默认选中的序号减去1就行，比如第一张图中，想要默认选中&lt;code>Windows boot manger&lt;/code>，修改&lt;code>GRUB_DEFAULT=&amp;quot;2&amp;quot;&lt;/code>保存，退出
&lt;strong>然后执行关键的一步&lt;code>sudo update-grub&lt;/code>&lt;/strong>
这样，下次开机的时候默认选中的启动项就是Windows了。&lt;/p>
&lt;/blockquote>
&lt;p>这样的操作对于我这种强迫症晚期的人来说是绝对不能忍的。必须把Windows boot manger 放到第一位，下面就是第二种方法&lt;/p>
&lt;h1 id="第二种方法彻底解决">&lt;a href="#%e7%ac%ac%e4%ba%8c%e7%a7%8d%e6%96%b9%e6%b3%95%e5%bd%bb%e5%ba%95%e8%a7%a3%e5%86%b3" class="header-anchor">&lt;/a>第二种方法，彻底解决
&lt;/h1>&lt;blockquote>
&lt;p>首先进入*/boot/grub&lt;em>目录，先把&lt;/em>grub.cfg文件复制一份出来，以免搞坏了没法恢复。&lt;em>然后查看 &lt;em>grub.cfg&lt;/em>文件的读写权限，默认是只读的。先给&lt;/em>grub.cfg&lt;em>文件加上可写的权限。
执行&lt;code>sudo chmod u+w grub.cfg&lt;/code> 这样能修改这个文件了。
然后&lt;code>sudo vim grub.cfg&lt;/code>打开这个文件。然后你会发现这个文件有300多行，这怎么修改，不要慌在vim里搜索&lt;/em>menuentry* (搜索menuentry的命令是“/menuentry”)
我的在134行。上图
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-1f808bc27f28213e.webp">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-1f808bc27f28213e.webp" alt="menuenty.png" />
&lt;/a>
&lt;/div>
&lt;/p>
&lt;/blockquote>
&lt;p>这时候再往下找直到找到&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#bd93f9">276&lt;/span> menuentry &lt;span style="color:#f1fa8c">&amp;#39;Windows Boot Manager (on /dev/sda1)&amp;#39;&lt;/span> &lt;span style="color:#ff79c6">--&lt;/span>&lt;span style="color:#ff79c6">class&lt;/span> windows &lt;span style="color:#ff79c6">--&lt;/span>&lt;span style="color:#ff79c6">class&lt;/span> os &lt;span style="color:#ff79c6">$&lt;/span>menuentry_id_option &lt;span style="color:#f1fa8c">&amp;#39;osprober-efi-78EE-BE29&amp;#39;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>&lt;span style="color:#bd93f9">277&lt;/span> insmod part_gpt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span>&lt;span style="color:#bd93f9">278&lt;/span> insmod fat
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span>&lt;span style="color:#bd93f9">279&lt;/span> set root&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#39;hd0,gpt1&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span>&lt;span style="color:#bd93f9">280&lt;/span> &lt;span style="color:#ff79c6">if&lt;/span> [ x&lt;span style="color:#ff79c6">$&lt;/span>feature_platform_search_hint &lt;span style="color:#ff79c6">=&lt;/span> xy ]; then
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span>&lt;span style="color:#bd93f9">281&lt;/span> search &lt;span style="color:#ff79c6">--&lt;/span>no&lt;span style="color:#ff79c6">-&lt;/span>floppy &lt;span style="color:#ff79c6">--&lt;/span>fs&lt;span style="color:#ff79c6">-&lt;/span>uuid &lt;span style="color:#ff79c6">--&lt;/span>set&lt;span style="color:#ff79c6">=&lt;/span>root &lt;span style="color:#ff79c6">--&lt;/span>hint&lt;span style="color:#ff79c6">-&lt;/span>bios&lt;span style="color:#ff79c6">=&lt;/span>hd0,gpt1 &lt;span style="color:#ff79c6">--&lt;/span>hint&lt;span style="color:#ff79c6">-&lt;/span>efi&lt;span style="color:#ff79c6">=&lt;/span>hd0,gpt1 &lt;span style="color:#ff79c6">--&lt;/span>hint&lt;span style="color:#ff79c6">-&lt;/span>baremetal&lt;span style="color:#ff79c6">=&lt;/span>ahci0,gpt1 &lt;span style="color:#bd93f9">78&lt;/span>EE&lt;span style="color:#ff79c6">-&lt;/span>BE29
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span>&lt;span style="color:#bd93f9">282&lt;/span> &lt;span style="color:#ff79c6">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span>&lt;span style="color:#bd93f9">283&lt;/span> search &lt;span style="color:#ff79c6">--&lt;/span>no&lt;span style="color:#ff79c6">-&lt;/span>floppy &lt;span style="color:#ff79c6">--&lt;/span>fs&lt;span style="color:#ff79c6">-&lt;/span>uuid &lt;span style="color:#ff79c6">--&lt;/span>set&lt;span style="color:#ff79c6">=&lt;/span>root &lt;span style="color:#bd93f9">78&lt;/span>EE&lt;span style="color:#ff79c6">-&lt;/span>BE29
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span>&lt;span style="color:#bd93f9">284&lt;/span> fi
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span>&lt;span style="color:#bd93f9">285&lt;/span> chainloader &lt;span style="color:#ff79c6">/&lt;/span>EFI&lt;span style="color:#ff79c6">/&lt;/span>Microsoft&lt;span style="color:#ff79c6">/&lt;/span>Boot&lt;span style="color:#ff79c6">/&lt;/span>bootmgfw&lt;span style="color:#ff79c6">.&lt;/span>efi
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span>&lt;span style="color:#bd93f9">286&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span>&lt;span style="color:#bd93f9">287&lt;/span> set timeout_style&lt;span style="color:#ff79c6">=&lt;/span>menu
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span>&lt;span style="color:#bd93f9">288&lt;/span> &lt;span style="color:#ff79c6">if&lt;/span> [ &lt;span style="color:#f1fa8c">&amp;#34;${timeout}&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span> ]; then
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span>&lt;span style="color:#bd93f9">289&lt;/span> set timeout&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#bd93f9">10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span>&lt;span style="color:#bd93f9">290&lt;/span> fi
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>然后把这一段剪切，放到刚才134那个&lt;em>menuentry&lt;/em>前边。这时保存，退出。
OK，完成了，下次开机就会发现&lt;em>Windows boot manger&lt;/em> 成为第一启动项了&lt;/p>
&lt;/blockquote>
&lt;p>这里&lt;strong>千万不要&lt;/strong> &lt;strong>千万不要&lt;/strong> &lt;strong>千万不要&lt;/strong> 执行&lt;code>sudo update-grub&lt;/code>&lt;/p>
&lt;p>下次开机就是这样了
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-293181890a273082.webp">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-293181890a273082.webp" alt="修改后的grub" />
&lt;/a>
&lt;/div>
&lt;/p></description></item></channel></rss>