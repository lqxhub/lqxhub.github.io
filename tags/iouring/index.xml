<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Iouring on QX 的笔记</title><link>https://lqxhub.github.io/tags/iouring/</link><description>Recent content in Iouring on QX 的笔记</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sat, 13 Sep 2025 19:04:48 +0800</lastBuildDate><atom:link href="https://lqxhub.github.io/tags/iouring/index.xml" rel="self" type="application/rss+xml"/><item><title>使用C++协程+liburing的HTTP server 和 epoll 的 HTTP server 性能对比</title><link>https://lqxhub.github.io/posts/6da4ad2d/</link><pubDate>Sat, 13 Sep 2025 19:04:48 +0800</pubDate><guid>https://lqxhub.github.io/posts/6da4ad2d/</guid><description>&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/1ca5f47363ab61f726ef725e58827790e00be3f7.jpg" alt="Featured image of post 使用C++协程+liburing的HTTP server 和 epoll 的 HTTP server 性能对比" />&lt;p>前段时间，使用C++协程+liburing实现了一个简单的 echo server，&lt;a class="link" href="https://lqxhub.github.io/posts/d26369fd" >文章地址&lt;/a>。&lt;/p>
&lt;p>都说使用 uring 可以获得更好的性能，但是究竟能提升多少呢？接下来，我们来对比一下 liburing 和 epoll 的性能。&lt;/p>
&lt;h2 id="测试方式">&lt;a href="#%e6%b5%8b%e8%af%95%e6%96%b9%e5%bc%8f" class="header-anchor">&lt;/a>测试方式
&lt;/h2>&lt;p>在原来的 echo server 基础上改动了一下，把 echo server 改成了一个简单的 HTTP server，返回一个固定的 HTML 内容。&lt;/p>
&lt;p>然后使用 &lt;a class="link" href="https://github.com/link1st/go-stress-testing" target="_blank" rel="noopener"
>go-stress-testing&lt;/a> 这个工具进行压力测试。&lt;/p>
&lt;p>测试工具在windows 10 上。HTTP 服务运行这个windows 10 的 VM虚拟机上。系统是 debian13，linux内核是 6.12.41-amd64&lt;/p>
&lt;p>编译器使用 &lt;code>clang-18&lt;/code> 编译参数 &lt;code>-O2 stdlib=libc++ -std=c++23&lt;/code> 进行编译。&lt;/p>
&lt;p>uring 服务和 epoll 服务都是单线程模型，单线程处理所有连接。&lt;/p>
&lt;h2 id="测试代码">&lt;a href="#%e6%b5%8b%e8%af%95%e4%bb%a3%e7%a0%81" class="header-anchor">&lt;/a>测试代码
&lt;/h2>&lt;p>这里就不贴所有代码了，主要贴一下关键部分。&lt;/p>
&lt;h3 id="uring-版本">&lt;a href="#uring-%e7%89%88%e6%9c%ac" class="header-anchor">&lt;/a>uring 版本
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>Task&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">false&lt;/span>&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> IoUring&lt;span style="color:#ff79c6">::&lt;/span>startSession(&lt;span style="color:#8be9fd">int&lt;/span> fd, &lt;span style="color:#8be9fd">uint64_t&lt;/span> connId) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>string buffer;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span> buffer.resize(&lt;span style="color:#bd93f9">1024&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span> &lt;span style="color:#8be9fd">bool&lt;/span> closed &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span> &lt;span style="color:#ff79c6">while&lt;/span> (&lt;span style="color:#ff79c6">!&lt;/span>closed) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> aRead &lt;span style="color:#ff79c6">=&lt;/span> AwaitableRead(&lt;span style="color:#ff79c6">this&lt;/span>, fd, buffer);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span> &lt;span style="color:#ff79c6">while&lt;/span> (&lt;span style="color:#8be9fd;font-style:italic">true&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> res &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">co_await&lt;/span> aRead;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (res &lt;span style="color:#ff79c6">&amp;lt;=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) { &lt;span style="color:#6272a4">// 连接关闭或者读取错误
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> closed &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span> &lt;span style="color:#ff79c6">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (res &lt;span style="color:#ff79c6">==&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span>) { &lt;span style="color:#6272a4">// 读完了
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#ff79c6">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (closed) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span> &lt;span style="color:#ff79c6">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21&lt;/span>&lt;span> &lt;span style="color:#6272a4">// std::cout &amp;lt;&amp;lt; &amp;#34;Received data: &amp;#34;;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>string response;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>string body &lt;span style="color:#ff79c6">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;Test Page&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;&amp;lt;p&amp;gt;Hello, this is a test HTML content for HTTP response.&amp;lt;/p&amp;gt;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28&lt;/span>&lt;span> response.reserve(&lt;span style="color:#bd93f9">128&lt;/span> &lt;span style="color:#ff79c6">+&lt;/span> body.size()); &lt;span style="color:#6272a4">// 减少拷贝
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30&lt;/span>&lt;span> response &lt;span style="color:#ff79c6">+=&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;HTTP/1.1 200 OK&lt;/span>&lt;span style="color:#f1fa8c">\r\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;Content-Length: &amp;#34;&lt;/span> &lt;span style="color:#ff79c6">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>to_string(body.size()) &lt;span style="color:#ff79c6">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>&lt;span style="color:#f1fa8c">\r\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;Content-Type: text/html; charset=UTF-8&lt;/span>&lt;span style="color:#f1fa8c">\r\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;Connection: close&lt;/span>&lt;span style="color:#f1fa8c">\r\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;Date: Mon, 21 Oct 2024 13:24:24 GMT&lt;/span>&lt;span style="color:#f1fa8c">\r\n\r\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37&lt;/span>&lt;span> response &lt;span style="color:#ff79c6">+=&lt;/span> body;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> aWrite &lt;span style="color:#ff79c6">=&lt;/span> AwaitableWrite(&lt;span style="color:#ff79c6">this&lt;/span>, fd, std&lt;span style="color:#ff79c6">::&lt;/span>move(std&lt;span style="color:#ff79c6">::&lt;/span>string(response)));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40&lt;/span>&lt;span> &lt;span style="color:#ff79c6">while&lt;/span> (&lt;span style="color:#8be9fd;font-style:italic">true&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> res &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">co_await&lt;/span> aWrite;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (res &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) { &lt;span style="color:#6272a4">// 写出错了
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> closed &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">44&lt;/span>&lt;span> &lt;span style="color:#ff79c6">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">45&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">46&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (res &lt;span style="color:#ff79c6">==&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) { &lt;span style="color:#6272a4">// 写完了
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">47&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#ff79c6">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">48&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">49&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">50&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">51&lt;/span>&lt;span> close(fd);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">52&lt;/span>&lt;span> &lt;span style="color:#ff79c6">co_return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">53&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在原来的 echo server 基础上，改成了 HTTP server。然后使用协程处理每个连接。&lt;/p>
&lt;h3 id="epoll-版本">&lt;a href="#epoll-%e7%89%88%e6%9c%ac" class="header-anchor">&lt;/a>epoll 版本
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> Epoll&lt;span style="color:#ff79c6">::&lt;/span>run()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;Epoll::run&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span> epoll_event events[EVENT_SIZE];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span> &lt;span style="color:#ff79c6">while&lt;/span> (&lt;span style="color:#8be9fd;font-style:italic">true&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> nfds &lt;span style="color:#ff79c6">=&lt;/span> epoll_wait(ePollFd_, events, EVENT_SIZE, &lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (nfds &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cerr &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;epoll_wait failed nfds:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> nfds &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;errno:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> errno &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span> &lt;span style="color:#ff79c6">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (errno &lt;span style="color:#ff79c6">==&lt;/span> EINTR)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span> &lt;span style="color:#6272a4">// 系统调用被中断，继续重试
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#ff79c6">continue&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span> &lt;span style="color:#ff79c6">for&lt;/span> (&lt;span style="color:#8be9fd">int&lt;/span> i &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>; i &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> nfds; &lt;span style="color:#ff79c6">++&lt;/span>i)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (events[i].events &lt;span style="color:#ff79c6">&amp;amp;&lt;/span> EPOLLERR &lt;span style="color:#ff79c6">||&lt;/span> events[i].events &lt;span style="color:#ff79c6">&amp;amp;&lt;/span> EPOLLHUP)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21&lt;/span>&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;epoll_wait failed errno:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> errno &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23&lt;/span>&lt;span> delFd(events[i].data.fd);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24&lt;/span>&lt;span> close(events[i].data.fd);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25&lt;/span>&lt;span> &lt;span style="color:#ff79c6">continue&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (events[i].events &lt;span style="color:#ff79c6">&amp;amp;&lt;/span> EPOLLIN)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28&lt;/span>&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (events[i].data.fd &lt;span style="color:#ff79c6">==&lt;/span> listenFd_)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30&lt;/span>&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31&lt;/span>&lt;span> sockaddr_in cliAddr{};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32&lt;/span>&lt;span> socklen_t length &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">sizeof&lt;/span>(cliAddr);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> clientFd &lt;span style="color:#ff79c6">=&lt;/span> accept4(listenFd_, &lt;span style="color:#ff79c6">reinterpret_cast&lt;/span>&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>sockaddr&lt;span style="color:#ff79c6">*&amp;gt;&lt;/span>(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>cliAddr), &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>length,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34&lt;/span>&lt;span> &lt;span style="color:#bd93f9">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (clientFd &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36&lt;/span>&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cerr &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;accept failed fd:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> clientFd &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;errno:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> errno &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38&lt;/span>&lt;span> &lt;span style="color:#ff79c6">continue&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;new client fd&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> clientFd &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41&lt;/span>&lt;span> addRead(clientFd);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43&lt;/span>&lt;span> &lt;span style="color:#ff79c6">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">44&lt;/span>&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">45&lt;/span>&lt;span> &lt;span style="color:#8be9fd">char&lt;/span> buff[&lt;span style="color:#bd93f9">1024&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">46&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> n &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">::&lt;/span>read(events[i].data.fd, buff, &lt;span style="color:#ff79c6">sizeof&lt;/span>(buff));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">47&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (n &lt;span style="color:#ff79c6">&amp;lt;=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">48&lt;/span>&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">49&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;close fd:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> events[i].data.fd &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">50&lt;/span>&lt;span> delFd(events[i].data.fd);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">51&lt;/span>&lt;span> close(events[i].data.fd);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">52&lt;/span>&lt;span> &lt;span style="color:#ff79c6">continue&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">53&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">54&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>string response;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">55&lt;/span>&lt;span> response.reserve(&lt;span style="color:#bd93f9">128&lt;/span> &lt;span style="color:#ff79c6">+&lt;/span> image.size()); &lt;span style="color:#6272a4">// 减少拷贝
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">56&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> response &lt;span style="color:#ff79c6">+=&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;HTTP/1.1 200 OK&lt;/span>&lt;span style="color:#f1fa8c">\r\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">57&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;Content-Length: &amp;#34;&lt;/span> &lt;span style="color:#ff79c6">+&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>to_string(image.size()) &lt;span style="color:#ff79c6">+&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>&lt;span style="color:#f1fa8c">\r\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">58&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;Content-Type: image/jpeg&lt;/span>&lt;span style="color:#f1fa8c">\r\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">59&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;Connection: close&lt;/span>&lt;span style="color:#f1fa8c">\r\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">60&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;Date: Mon, 21 Oct 2024 13:24:24 GMT&lt;/span>&lt;span style="color:#f1fa8c">\r\n\r\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">61&lt;/span>&lt;span> response &lt;span style="color:#ff79c6">+=&lt;/span> image;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">62&lt;/span>&lt;span> write(events[i].data.fd, response.data(), response.size());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">63&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">64&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">65&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">66&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">67&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>epoll 版本没有使用协程，直接在事件循环中处理所有连接。两个HTTP server 处理逻辑是一样的，都是读取请求，然后返回一个固定的 HTML 内容。&lt;/p>
&lt;h2 id="测试结果">&lt;a href="#%e6%b5%8b%e8%af%95%e7%bb%93%e6%9e%9c" class="header-anchor">&lt;/a>测试结果
&lt;/h2>&lt;p>&lt;strong>本次测试 io_uring使用 中断模式&lt;/strong>&lt;/p>
&lt;p>中断模式也是 &lt;code>io_uring&lt;/code> 的默认模式，关于 &lt;code>io_uring&lt;/code> 的两种模式，&lt;strong>中断模式&lt;/strong> &lt;strong>轮询模式&lt;/strong> 和 &lt;strong>内核轮询模式&lt;/strong> 的区别， 先挖个坑，后续再写一篇文章进行介绍。&lt;/p>
&lt;p>这个HTTP server 返回一个简单的 HTML 内容：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">&amp;lt;!DOCTYPE html&amp;gt;&lt;/span>&amp;lt;&lt;span style="color:#ff79c6">html&lt;/span>&amp;gt;&amp;lt;&lt;span style="color:#ff79c6">head&lt;/span>&amp;gt;&amp;lt;&lt;span style="color:#ff79c6">title&lt;/span>&amp;gt;Test Page&amp;lt;/&lt;span style="color:#ff79c6">title&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#ff79c6">head&lt;/span>&amp;gt;&amp;lt;&lt;span style="color:#ff79c6">body&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span> &amp;lt;&lt;span style="color:#ff79c6">p&lt;/span>&amp;gt;Hello, this is a test HTML content for HTTP response.&amp;lt;/&lt;span style="color:#ff79c6">p&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3&lt;/span>&lt;span>&amp;lt;/&lt;span style="color:#ff79c6">body&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#ff79c6">html&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用 go-stress-testing 进行压力测试，测试命令如下：&lt;/p>
&lt;p>开启 100 个并发连接，每个连接发送 100 次请求。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>go-stress-testing-win.exe -u &lt;span style="color:#f1fa8c">&amp;#34;http://192.168.1.19:8088&amp;#34;&lt;/span> -c &lt;span style="color:#bd93f9">100&lt;/span> -n &lt;span style="color:#bd93f9">100&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>uring 版本测试结果&lt;/p>
&lt;p>
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/2ee22b6ac54c63b68eef982c2f3dd23d346c1107.png">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/2ee22b6ac54c63b68eef982c2f3dd23d346c1107.png" alt="" />
&lt;/a>
&lt;/div>
&lt;/p>
&lt;p>可以看到 QPS 达到了 4800+，平均响应时间 20ms。&lt;/p>
&lt;p>epoll 版本测试结果&lt;/p>
&lt;p>
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/2cc64d644c2e50030d1c23e074ac0658800a91c4.png">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/2cc64d644c2e50030d1c23e074ac0658800a91c4.png" alt="" />
&lt;/a>
&lt;/div>
&lt;/p>
&lt;p>可以看到 QPS 只有 4000+，平均响应时间 23ms。&lt;/p>
&lt;p>uring 版本的性能比 epoll 版本提升了 20% 左右。&lt;/p>
&lt;h2 id="测试2">&lt;a href="#%e6%b5%8b%e8%af%952" class="header-anchor">&lt;/a>测试2
&lt;/h2>&lt;p>上面的测试中，HTML返回了一个简单的网页，现在改成返回一个148KB 的图片，为了防止网络成为瓶颈，这次并发数改成 50，连接数改成 50。&lt;/p>
&lt;p>在进程启动的时候，把图片读到内存中，避免每次都读磁盘，然后每次请求都返回这个图片。&lt;/p>
&lt;p>这个改动比较小，只一下 response 的内容：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span> response.reserve(&lt;span style="color:#bd93f9">128&lt;/span> &lt;span style="color:#ff79c6">+&lt;/span> image.size()); &lt;span style="color:#6272a4">// 减少拷贝
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span> response &lt;span style="color:#ff79c6">+=&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;HTTP/1.1 200 OK&lt;/span>&lt;span style="color:#f1fa8c">\r\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;Content-Length: &amp;#34;&lt;/span> &lt;span style="color:#ff79c6">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>to_string(image.size()) &lt;span style="color:#ff79c6">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>&lt;span style="color:#f1fa8c">\r\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;Content-Type: image/jpeg&lt;/span>&lt;span style="color:#f1fa8c">\r\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;Connection: close&lt;/span>&lt;span style="color:#f1fa8c">\r\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;Date: Mon, 21 Oct 2024 13:24:24 GMT&lt;/span>&lt;span style="color:#f1fa8c">\r\n\r\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span> response &lt;span style="color:#ff79c6">+=&lt;/span> image;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用 go-stress-testing 进行压力测试，测试命令如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>go-stress-testing-win.exe -u &lt;span style="color:#f1fa8c">&amp;#34;http://192.168.1.19:8088&amp;#34;&lt;/span> -c &lt;span style="color:#bd93f9">50&lt;/span> -n &lt;span style="color:#bd93f9">50&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>开启 50 个并发连接，每个连接发送 50 次请求。&lt;/p>
&lt;p>uring 版本测试结果&lt;/p>
&lt;p>
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/ae8ac9a2b8045857abfddf2f01bfcbf0ff25798b.png">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/ae8ac9a2b8045857abfddf2f01bfcbf0ff25798b.png" alt="" />
&lt;/a>
&lt;/div>
&lt;/p>
&lt;p>可以看到 QPS 达到了 1300+，平均响应时间 37ms。&lt;/p>
&lt;p>epoll 版本测试结果&lt;/p>
&lt;p>
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/32a5770fb20f16abca3f7d48d51e2b21374a8e2b.png">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/32a5770fb20f16abca3f7d48d51e2b21374a8e2b.png" alt="" />
&lt;/a>
&lt;/div>
&lt;/p>
&lt;p>可以看到 QPS 只有 520+，平均响应时间 93ms。&lt;/p>
&lt;p>可以看到，uring 版本的性能是 epoll 版本的 2.5 倍左右。这个提升还是非常明显的。&lt;/p>
&lt;h2 id="总结">&lt;a href="#%e6%80%bb%e7%bb%93" class="header-anchor">&lt;/a>总结
&lt;/h2>&lt;p>通过上面的测试，可以看到 &lt;code>liburing&lt;/code> 相比 &lt;code>epoll&lt;/code> 在高并发场景下，不管是 &lt;strong>QPS&lt;/strong> 还是 &lt;strong>响应耗时&lt;/strong>，性能提升还是比较明显的。&lt;/p>
&lt;p>具体来说，uring 版本在处理小文件时的 QPS 比 epoll 版本高出 &lt;strong>20%&lt;/strong> 左右，而在处理大文件时的 QPS 则高出 &lt;strong>2.5&lt;/strong> 倍左右。这些测试结果表明，liburing 在高并发场景下具有更好的性能表现，尤其是在读取和写入大的数据时，优势更加明显。这还是提前从文件中读取到内存中，避免了磁盘 I/O 的影响。如果是每次都从磁盘读取，使用 liburing 异步读取和普通的 &lt;code>read&lt;/code> 函数读取对比，性能差距可能会更大。
这也是因为 liburing 能够更高效地利用内核的异步 I/O 能力，减少了系统调用的开销，从而提升了整体的吞吐量和响应速度。&lt;/p></description></item><item><title>linux中io_uring和C++协程的结合，实现真正的异步I/O。简单的TCP echo server</title><link>https://lqxhub.github.io/posts/d26369fd/</link><pubDate>Sat, 23 Aug 2025 17:04:05 +0800</pubDate><guid>https://lqxhub.github.io/posts/d26369fd/</guid><description>&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/cc0fd96def7c84c2e2b5d6a00915b3b8175116cf.jpg" alt="Featured image of post linux中io_uring和C++协程的结合，实现真正的异步I/O。简单的TCP echo server" />&lt;p>前两天刚写了一篇文章，怎样在C++中使用协程 &lt;a class="link" href="https://lqxhub.github.io/posts/541b707d" >传送门&lt;/a>。那个只是一个简单的例子，今天我们来聊聊如何将协程与 io_uring 结合起来使用，实现真正的异步 I/O 操作。
我个人觉得，C++协程最好的使用场景就是配合异步 I/O。&lt;/p>
&lt;p>以前也写过一篇关于 io_uring 的文章 &lt;a class="link" href="https://lqxhub.github.io/posts/f0e9829c" >传送门&lt;/a>，里面介绍了 io_uring 的基本概念和使用方法。今天我们就基于那个例子，来实现一个简单的 echo 服务器，使用协程来处理客户端的连接和数据收发。&lt;/p>
&lt;p>
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/872dbc550f1e63b8d6052bf661f991174671534b.svg">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/872dbc550f1e63b8d6052bf661f991174671534b.svg" alt="" />
&lt;/a>
&lt;/div>
&lt;/p>
&lt;p>简单画一个图，每一个 &lt;code>Awaitable&lt;/code> 都是一个协程，在一个进程中，每一个连接都有两个协程（一个用于读，一个用于写）。还有一个特殊的协程 &lt;code>AwaitableAccept&lt;/code> 用来处理接受连接的操作。
同一时刻，最多只能有一个协程在执行。其他的协程会被挂起，等待当前协程完成后再恢复执行。&lt;/p>
&lt;p>因为协程可以让我们以同步的方式编写异步代码，避免传统的“回调函数地狱”，从而提高代码的可读性和可维护性。而 io_uring 则是 Linux 提供的一种高性能异步 I/O 接口，可以与协程结合使用，进一步提升性能。&lt;/p>
&lt;p>因为代码量有点大，就不全贴在这里了，已经上传到GitHub上，可以去这里查看 &lt;a class="link" href="https://github.com/lqxhub/co_uring_server" target="_blank" rel="noopener"
>传送门&lt;/a>。&lt;/p>
&lt;p>不废话了，直接上代码&lt;/p>
&lt;h2 id="coroutine-handle">&lt;a href="#coroutine-handle" class="header-anchor">&lt;/a>coroutine handle
&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#ifndef TASK_H
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#define TASK_H
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span>&lt;span style="color:#ff79c6">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;coroutine&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;exception&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;functional&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span>&lt;span style="color:#ff79c6">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span>&lt;span style="color:#ff79c6">template&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&lt;/span>&lt;span style="color:#8be9fd">bool&lt;/span> initialSuspend&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> &lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">Task&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span> &lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">promise_type&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>coroutine_handle&lt;span style="color:#ff79c6">&amp;lt;&amp;gt;&lt;/span> handle;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>function&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>&lt;span style="color:#8be9fd">void&lt;/span>()&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> onDone; &lt;span style="color:#6272a4">// 协程结束时调用的清理回调
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> &lt;span style="color:#50fa7b">get_return_object&lt;/span>() { &lt;span style="color:#ff79c6">return&lt;/span> Task{&lt;span style="color:#ff79c6">*&lt;/span>&lt;span style="color:#ff79c6">this&lt;/span>}; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> &lt;span style="color:#50fa7b">initial_suspend&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> &lt;span style="color:#ff79c6">constexpr&lt;/span> (initialSuspend) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>suspend_always{};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span> } &lt;span style="color:#ff79c6">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>suspend_never{};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> &lt;span style="color:#50fa7b">final_suspend&lt;/span>() &lt;span style="color:#ff79c6">noexcept&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24&lt;/span>&lt;span> &lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">Awaiter&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25&lt;/span>&lt;span> &lt;span style="color:#8be9fd">bool&lt;/span> await_ready() &lt;span style="color:#ff79c6">noexcept&lt;/span> { &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">false&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27&lt;/span>&lt;span> &lt;span style="color:#8be9fd">void&lt;/span> await_suspend(std&lt;span style="color:#ff79c6">::&lt;/span>coroutine_handle&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>promise_type&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> h) &lt;span style="color:#ff79c6">noexcept&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (h.promise().onDone) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29&lt;/span>&lt;span> h.promise().onDone();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33&lt;/span>&lt;span> &lt;span style="color:#8be9fd">void&lt;/span> await_resume() &lt;span style="color:#ff79c6">noexcept&lt;/span> {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34&lt;/span>&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> Awaiter{};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38&lt;/span>&lt;span> &lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">unhandled_exception&lt;/span>() { std&lt;span style="color:#ff79c6">::&lt;/span>terminate(); }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40&lt;/span>&lt;span> &lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">return_void&lt;/span>() {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42&lt;/span>&lt;span> promise_type() &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">default&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43&lt;/span>&lt;span> &lt;span style="color:#ff79c6">~&lt;/span>promise_type() &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">default&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">44&lt;/span>&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">45&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">46&lt;/span>&lt;span> &lt;span style="color:#ff79c6">explicit&lt;/span> &lt;span style="color:#50fa7b">Task&lt;/span>(promise_type &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>promise)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">47&lt;/span>&lt;span> &lt;span style="color:#ff79c6">:&lt;/span> handle_(std&lt;span style="color:#ff79c6">::&lt;/span>coroutine_handle&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>promise_type&lt;span style="color:#ff79c6">&amp;gt;::&lt;/span>from_promise(promise)) {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">48&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">49&lt;/span>&lt;span> Task(Task &lt;span style="color:#ff79c6">&amp;amp;&amp;amp;&lt;/span>other) &lt;span style="color:#ff79c6">noexcept&lt;/span> &lt;span style="color:#ff79c6">:&lt;/span> handle_(other.handle_) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">50&lt;/span>&lt;span> other.handle_ &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">nullptr&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">51&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">52&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">53&lt;/span>&lt;span> Task &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>&lt;span style="color:#ff79c6">operator&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>(Task &lt;span style="color:#ff79c6">&amp;amp;&amp;amp;&lt;/span>other) &lt;span style="color:#ff79c6">noexcept&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">54&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (&lt;span style="color:#ff79c6">this&lt;/span> &lt;span style="color:#ff79c6">!=&lt;/span> &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>other) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">55&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (handle_ &lt;span style="color:#ff79c6">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#ff79c6">!&lt;/span>handle_.done())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">56&lt;/span>&lt;span> handle_.destroy();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">57&lt;/span>&lt;span> handle_ &lt;span style="color:#ff79c6">=&lt;/span> other.handle_;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">58&lt;/span>&lt;span> other.handle_ &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">nullptr&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">59&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">60&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>&lt;span style="color:#ff79c6">this&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">61&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">62&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">63&lt;/span>&lt;span> Task(&lt;span style="color:#ff79c6">const&lt;/span> Task &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>) &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">delete&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">64&lt;/span>&lt;span> Task &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>&lt;span style="color:#ff79c6">operator&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>(&lt;span style="color:#ff79c6">const&lt;/span> Task &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>) &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">delete&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">65&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">66&lt;/span>&lt;span> &lt;span style="color:#ff79c6">~&lt;/span>Task() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">67&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (handle_ &lt;span style="color:#ff79c6">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#ff79c6">!&lt;/span>handle_.done())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">68&lt;/span>&lt;span> handle_.destroy();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">69&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">70&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">71&lt;/span>&lt;span> &lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">resume&lt;/span>() { handle_.resume(); }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">72&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">73&lt;/span>&lt;span> &lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">setOnDone&lt;/span>(std&lt;span style="color:#ff79c6">::&lt;/span>function&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>&lt;span style="color:#8be9fd">void&lt;/span>()&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> onDone) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">74&lt;/span>&lt;span> handle_.promise().onDone &lt;span style="color:#ff79c6">=&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>move(onDone);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">75&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">76&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">77&lt;/span>&lt;span>&lt;span style="color:#ff79c6">private&lt;/span>&lt;span style="color:#ff79c6">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">78&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>coroutine_handle&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>promise_type&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> handle_;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">79&lt;/span>&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">80&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">81&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#endif &lt;/span>&lt;span style="color:#6272a4">// TASK_H
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>简单说一下几个关键点：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>使用模板变量，来控制协程的初始挂起状态。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在协程结束时，可以通过 &lt;code>onDone&lt;/code> 回调来执行清理操作。
在协程结束时，可以调用这个函数，完成一些自定义操作，后面会用到。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>协程结束时会自动调用 &lt;code>final_suspend&lt;/code>，可以在这里进行一些收尾工作。
final_suspend中定义了一个 &lt;code>Awaiter&lt;/code>，用于在协程结束时执行清理操作。当协程结束时，&lt;code>Awaiter&lt;/code> 会被唤醒，从而调用 &lt;code>onDone&lt;/code> 回调。当 &lt;code>onDone&lt;/code> 执行完成后，协程的资源会被释放。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="io_uring-wrapper">&lt;a href="#io_uring-wrapper" class="header-anchor">&lt;/a>io_uring wrapper
&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">class&lt;/span> &lt;span style="color:#50fa7b">IoUring&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>&lt;span style="color:#ff79c6">public&lt;/span>&lt;span style="color:#ff79c6">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span> &lt;span style="color:#ff79c6">explicit&lt;/span> IoUring(&lt;span style="color:#8be9fd">int&lt;/span> port) &lt;span style="color:#ff79c6">:&lt;/span> port_(port) {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span> IoUring(&lt;span style="color:#ff79c6">const&lt;/span> IoUring &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>) &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">delete&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span> IoUring &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>&lt;span style="color:#ff79c6">operator&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>(&lt;span style="color:#ff79c6">const&lt;/span> IoUring &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>) &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">delete&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span> IoUring(IoUring &lt;span style="color:#ff79c6">&amp;amp;&amp;amp;&lt;/span>) &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">delete&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span> IoUring &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>&lt;span style="color:#ff79c6">operator&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>(IoUring &lt;span style="color:#ff79c6">&amp;amp;&amp;amp;&lt;/span>) &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">delete&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span> &lt;span style="color:#ff79c6">~&lt;/span>IoUring() &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">default&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span> &lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">Stop&lt;/span>() { running_.store(&lt;span style="color:#8be9fd;font-style:italic">false&lt;/span>); }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span> io_uring &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>Uring() { &lt;span style="color:#ff79c6">return&lt;/span> ring_; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>expected&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>&lt;span style="color:#8be9fd">bool&lt;/span>, std&lt;span style="color:#ff79c6">::&lt;/span>string&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> Init();&lt;span style="color:#6272a4">//初始化io_uring和网络
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">run&lt;/span>();&lt;span style="color:#6272a4">//运行io_uring事件循环
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> Task&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">true&lt;/span>&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> acceptServer();&lt;span style="color:#6272a4">//接受客户端连接
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20&lt;/span>&lt;span> Task&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">false&lt;/span>&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> startSession(&lt;span style="color:#8be9fd">int&lt;/span> fd, &lt;span style="color:#8be9fd">uint64_t&lt;/span> connId);&lt;span style="color:#6272a4">//处理客户端会话
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22&lt;/span>&lt;span>&lt;span style="color:#ff79c6">private&lt;/span>&lt;span style="color:#ff79c6">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>expected&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>&lt;span style="color:#8be9fd">bool&lt;/span>, std&lt;span style="color:#ff79c6">::&lt;/span>string&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> createListenSocket();&lt;span style="color:#6272a4">//创建监听socket
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25&lt;/span>&lt;span> &lt;span style="color:#ff79c6">static&lt;/span> &lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">set_nonblocking&lt;/span>(&lt;span style="color:#8be9fd">int&lt;/span> fd) {&lt;span style="color:#6272a4">//设置socket为非阻塞IO
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#ff79c6">return&lt;/span> fcntl(fd, F_SETFL, fcntl(fd, F_GETFL, &lt;span style="color:#bd93f9">0&lt;/span>) &lt;span style="color:#ff79c6">|&lt;/span> O_NONBLOCK);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29&lt;/span>&lt;span> &lt;span style="color:#8be9fd">uint64_t&lt;/span> &lt;span style="color:#50fa7b">getConnId&lt;/span>() { &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#ff79c6">++&lt;/span>connId; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31&lt;/span>&lt;span> io_uring ring_{};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32&lt;/span>&lt;span> &lt;span style="color:#8be9fd">uint16_t&lt;/span> port_;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> listenFd_ &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34&lt;/span>&lt;span> &lt;span style="color:#ff79c6">const&lt;/span> &lt;span style="color:#8be9fd">int&lt;/span> entries_ &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">256&lt;/span>; &lt;span style="color:#6272a4">// Default number of entries
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>atomic&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>&lt;span style="color:#8be9fd">bool&lt;/span>&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> running_ &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37&lt;/span>&lt;span> &lt;span style="color:#8be9fd">uint64_t&lt;/span> connId &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>; &lt;span style="color:#6272a4">// Connection ID for tracking connections
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>unordered_map&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>&lt;span style="color:#8be9fd">uint64_t&lt;/span>, Task&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">false&lt;/span>&lt;span style="color:#ff79c6">&amp;gt;&amp;gt;&lt;/span> sessions_;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40&lt;/span>&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>以上就是对 io_uring 的一个简单封装，下面挑几个关键的函数来聊一下&lt;/p>
&lt;h3 id="iouringrun">&lt;a href="#iouringrun" class="header-anchor">&lt;/a>IoUring::run
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> IoUring&lt;span style="color:#ff79c6">::&lt;/span>run() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span> &lt;span style="color:#ff79c6">while&lt;/span> (running_.load()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span> io_uring_cqe &lt;span style="color:#ff79c6">*&lt;/span>cqe &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">nullptr&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> ret &lt;span style="color:#ff79c6">=&lt;/span> io_uring_wait_cqe(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>ring_, &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>cqe);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (ret &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (ret &lt;span style="color:#ff79c6">==&lt;/span> &lt;span style="color:#ff79c6">-&lt;/span>EINTR)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span> &lt;span style="color:#ff79c6">continue&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span> &lt;span style="color:#ff79c6">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span> &lt;span style="color:#6272a4">// user_data 保存着 Op 指针
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#ff79c6">auto&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>op &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">reinterpret_cast&lt;/span>&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>AwaitableBaseOp &lt;span style="color:#ff79c6">*&amp;gt;&lt;/span>(cqe&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>user_data);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (&lt;span style="color:#ff79c6">!&lt;/span>op) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span> io_uring_cqe_seen(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>ring_, cqe);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span> &lt;span style="color:#ff79c6">continue&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span> op&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>SetRes(cqe&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>res);&lt;span style="color:#6272a4">//设置操作结果
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> io_uring_cqe_seen(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>ring_, cqe);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>&lt;span> op&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>resume();&lt;span style="color:#6272a4">//恢复协程执行
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>循环遍历 &lt;code>io_uring&lt;/code> 的完成队列，处理每个完成的操作。&lt;/p>
&lt;p>&lt;code>AwaitableBaseOp&lt;/code> 是所有可等待操作的基类，负责管理协程的状态和生命周期，后面会用到。&lt;/p>
&lt;p>&lt;code>op-&amp;gt;SetRes(cqe-&amp;gt;res);&lt;/code> 把io_uring的结果传递给操作对象。&lt;/p>
&lt;p>在 &lt;code>op-&amp;gt;resume()&lt;/code> 被调用时，协程会继续执行，直至下一个挂起点。&lt;/p>
&lt;h3 id="iouringstartsession">&lt;a href="#iouringstartsession" class="header-anchor">&lt;/a>IoUring::startSession
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>Task&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">false&lt;/span>&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> IoUring&lt;span style="color:#ff79c6">::&lt;/span>startSession(&lt;span style="color:#8be9fd">int&lt;/span> fd, &lt;span style="color:#8be9fd">uint64_t&lt;/span> connId) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>string buffer;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span> buffer.resize(&lt;span style="color:#bd93f9">1024&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span> &lt;span style="color:#ff79c6">while&lt;/span> (&lt;span style="color:#8be9fd;font-style:italic">true&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> res &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">co_await&lt;/span> AwaitableRead(&lt;span style="color:#ff79c6">this&lt;/span>, fd, buffer);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (res &lt;span style="color:#ff79c6">&amp;lt;=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span> &lt;span style="color:#ff79c6">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;Received data: &amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout.write(buffer.data(), res);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span> res &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">co_await&lt;/span> AwaitableWrite(&lt;span style="color:#ff79c6">this&lt;/span>, fd, std&lt;span style="color:#ff79c6">::&lt;/span>move(std&lt;span style="color:#ff79c6">::&lt;/span>string(buffer)));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (res &lt;span style="color:#ff79c6">&amp;lt;=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span> &lt;span style="color:#ff79c6">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span> close(fd);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span> &lt;span style="color:#ff79c6">co_return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>启动一个客户端会话，处理数据的读取和写入。&lt;/p>
&lt;p>使用 &lt;code>co_await&lt;/code> 关键字来等待异步操作的完成。&lt;/p>
&lt;p>&lt;code>co_await AwaitableRead&lt;/code> 这里会把当前协程挂起，然后当读取操作完成时，协程会被唤醒，并且可以获取到读取的结果。&lt;/p>
&lt;p>&lt;code>co_await AwaitableWrite&lt;/code> 这里同样会把当前协程挂起，等待写入操作完成。&lt;/p>
&lt;h3 id="iouringacceptserver">&lt;a href="#iouringacceptserver" class="header-anchor">&lt;/a>IoUring::acceptServer
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>Task&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">true&lt;/span>&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> IoUring&lt;span style="color:#ff79c6">::&lt;/span>acceptServer() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span> &lt;span style="color:#ff79c6">while&lt;/span> (&lt;span style="color:#8be9fd;font-style:italic">true&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> clientFd &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">co_await&lt;/span> AwaitableAccept(&lt;span style="color:#ff79c6">this&lt;/span>, listenFd_);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> clientFd &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (clientFd &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span> &lt;span style="color:#ff79c6">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span> set_nonblocking(clientFd);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> connId &lt;span style="color:#ff79c6">=&lt;/span> getConnId();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> t &lt;span style="color:#ff79c6">=&lt;/span> startSession(clientFd, connId);&lt;span style="color:#6272a4">//启动一个客户端会话，处理数据的读取和写入。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> t.setOnDone([connId, &lt;span style="color:#ff79c6">this&lt;/span>]() { sessions_.erase(connId); });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span> sessions_.emplace(connId, std&lt;span style="color:#ff79c6">::&lt;/span>move(t));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span> close(listenFd_);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span> &lt;span style="color:#ff79c6">co_return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>开始一个服务器端的会话，接受客户端连接。&lt;/p>
&lt;p>&lt;code>co_await AwaitableAccept&lt;/code> 这里会把当前协程挂起，当有客户端连接时，协程会被唤醒，并且可以获取到接受的结果。&lt;/p>
&lt;p>&lt;code>auto t = startSession(clientFd, connId);&lt;/code> 这里会启动一个协程，处理数据的读取和写入。
这里有个关键点，&lt;code>startSession&lt;/code> 会返回一个协程的句柄，一定要妥善保管这个句柄，如果没有保存，当 &lt;code>while&lt;/code> 循环结束时，协程会被销毁，导致异常。
所以要把协程的句柄保存在 &lt;code>sessions_&lt;/code> 这个 map 中，以便后续管理。&lt;/p>
&lt;p>&lt;code>t.setOnDone([connId, this]() { sessions_.erase(connId); });&lt;/code> 在这里，通过设置回调函数，设置了协程完成后的清理工作。&lt;/p>
&lt;h3 id="awaitablebaseop">&lt;a href="#awaitablebaseop" class="header-anchor">&lt;/a>AwaitableBaseOp
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">class&lt;/span> &lt;span style="color:#50fa7b">AwaitableBaseOp&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>&lt;span style="color:#ff79c6">public&lt;/span>&lt;span style="color:#ff79c6">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span> &lt;span style="color:#ff79c6">explicit&lt;/span> AwaitableBaseOp(std&lt;span style="color:#ff79c6">::&lt;/span>coroutine_handle&lt;span style="color:#ff79c6">&amp;lt;&amp;gt;&lt;/span> h) &lt;span style="color:#ff79c6">:&lt;/span> coro_(h) {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span> &lt;span style="color:#ff79c6">virtual&lt;/span> &lt;span style="color:#ff79c6">~&lt;/span>AwaitableBaseOp() &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">default&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span> &lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">resume&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (coro_ &lt;span style="color:#ff79c6">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#ff79c6">!&lt;/span>coro_.done()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span> coro_.resume();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span> &lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">SetRes&lt;/span>(&lt;span style="color:#8be9fd">int&lt;/span> res) { res_ &lt;span style="color:#ff79c6">=&lt;/span> res; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">GetRes&lt;/span>() &lt;span style="color:#ff79c6">const&lt;/span> { &lt;span style="color:#ff79c6">return&lt;/span> res_; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span>&lt;span style="color:#ff79c6">protected&lt;/span>&lt;span style="color:#ff79c6">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>coroutine_handle&lt;span style="color:#ff79c6">&amp;lt;&amp;gt;&lt;/span> coro_;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> res_ &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20&lt;/span>&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>定义了协程的基本操作，包括恢复协程和设置结果。这个类的实例的指针会被传递给 &lt;code>io_uring_sqe&lt;/code> 的 user_data 中。
当 &lt;code>io_uring&lt;/code> 的异步操作完成时，&lt;code>io_uring&lt;/code> 通过得到 &lt;code>io_uring_cqe&lt;/code> &lt;code>AwaitableBaseOp&lt;/code> 的指针，调用 &lt;code>SetRes&lt;/code> 来设置结果，然后调用 &lt;code>resume&lt;/code> 来恢复协程。&lt;/p>
&lt;h3 id="awaitable">&lt;a href="#awaitable" class="header-anchor">&lt;/a>Awaitable
&lt;/h3>&lt;p>需要到 accept read write 的操作都可以封装成一个 Awaitable 类，方便管理协程的状态和生命周期。&lt;/p>
&lt;h4 id="accept">&lt;a href="#accept" class="header-anchor">&lt;/a>accept
&lt;/h4>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">class&lt;/span> &lt;span style="color:#50fa7b">AwaitableAccept&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span> IoUring &lt;span style="color:#ff79c6">*&lt;/span>uring_ &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">nullptr&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span> sockaddr_storage addr_{};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span> socklen_t addrlen_{};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> serverFd_ &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span> AwaitableBaseOp &lt;span style="color:#ff79c6">*&lt;/span>op &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">nullptr&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span>&lt;span style="color:#ff79c6">public&lt;/span>&lt;span style="color:#ff79c6">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span> &lt;span style="color:#6272a4">//省略部分代码
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span> &lt;span style="color:#ff79c6">~&lt;/span>AwaitableAccept() &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">default&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span> &lt;span style="color:#8be9fd">bool&lt;/span> &lt;span style="color:#50fa7b">await_ready&lt;/span>() &lt;span style="color:#ff79c6">const&lt;/span> &lt;span style="color:#ff79c6">noexcept&lt;/span> { &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">false&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span> &lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">await_suspend&lt;/span>(std&lt;span style="color:#ff79c6">::&lt;/span>coroutine_handle&lt;span style="color:#ff79c6">&amp;lt;&amp;gt;&lt;/span> h) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span> op &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">new&lt;/span> AwaitableBaseOp(h);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>&lt;span> io_uring_sqe &lt;span style="color:#ff79c6">*&lt;/span>sqe &lt;span style="color:#ff79c6">=&lt;/span> io_uring_get_sqe(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>uring_&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>Uring());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20&lt;/span>&lt;span> io_uring_prep_accept(sqe, serverFd_, &lt;span style="color:#ff79c6">reinterpret_cast&lt;/span>&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>sockaddr &lt;span style="color:#ff79c6">*&amp;gt;&lt;/span>(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>addr_),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21&lt;/span>&lt;span> &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>addrlen_, &lt;span style="color:#bd93f9">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22&lt;/span>&lt;span> io_uring_sqe_set_data(sqe, op);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23&lt;/span>&lt;span> io_uring_submit(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>uring_&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>Uring());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">await_resume&lt;/span>() &lt;span style="color:#ff79c6">const&lt;/span> &lt;span style="color:#ff79c6">noexcept&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> res &lt;span style="color:#ff79c6">=&lt;/span> op&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>GetRes();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28&lt;/span>&lt;span> &lt;span style="color:#ff79c6">delete&lt;/span> op;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> res;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31&lt;/span>&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这是 &lt;code>AwaitableAccept&lt;/code> 类的实现，封装了对 &lt;code>io_uring&lt;/code> 的 accept 操作。通过使用协程，可以方便地管理异步 I/O 操作的状态和生命周期。&lt;/p>
&lt;p>&lt;code>await_suspend&lt;/code> 函数会在协程挂起时（co_await 操作）被调用，负责将协程的句柄与 &lt;code>io_uring&lt;/code> 的请求关联起来。
在函数内部，创建一个 &lt;code>AwaitableBaseOp&lt;/code> 对象，并将协程的句柄传递给它。然后，准备一个 &lt;code>io_uring&lt;/code> 的提交请求，并将 &lt;code>AwaitableBaseOp&lt;/code> 对象的指针设置为请求的用户数据。最后，提交请求到 &lt;code>io_uring&lt;/code>。&lt;/p>
&lt;p>&lt;code>await_resume&lt;/code> 函数会在协程恢复时（调用 &lt;code>resume&lt;/code>）被调用，负责获取异步操作的结果并清理资源。
这里 &lt;code>return&lt;/code> 最后返回结果。这里 &lt;code>return&lt;/code> 的值会被 &lt;code>co_await&lt;/code> 表达式的调用者获取到。&lt;/p>
&lt;h4 id="read">&lt;a href="#read" class="header-anchor">&lt;/a>read
&lt;/h4>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">class&lt;/span> &lt;span style="color:#50fa7b">AwaitableRead&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span> IoUring &lt;span style="color:#ff79c6">*&lt;/span>uring_ &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">nullptr&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> fd_ &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>string &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>buffer_;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span> AwaitableBaseOp &lt;span style="color:#ff79c6">*&lt;/span>op_ &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">nullptr&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span>&lt;span style="color:#ff79c6">public&lt;/span>&lt;span style="color:#ff79c6">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span> &lt;span style="color:#6272a4">//省略部分代码
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#8be9fd">void&lt;/span> await_suspend(std&lt;span style="color:#ff79c6">::&lt;/span>coroutine_handle&lt;span style="color:#ff79c6">&amp;lt;&amp;gt;&lt;/span> h) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span> op_ &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">new&lt;/span> AwaitableBaseOp(h);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span> io_uring_sqe &lt;span style="color:#ff79c6">*&lt;/span>sqe &lt;span style="color:#ff79c6">=&lt;/span> io_uring_get_sqe(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>uring_&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>Uring());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span> io_uring_prep_recv(sqe, fd_, buffer_.data(), buffer_.size(), &lt;span style="color:#bd93f9">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span> io_uring_sqe_set_data(sqe, op_);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span> io_uring_submit(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>uring_&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>Uring());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span> &lt;span style="color:#6272a4">//省略部分代码
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>AwaitableRead&lt;/code> 类的实现，封装了对 &lt;code>io_uring&lt;/code> 的读取操作。&lt;/p>
&lt;p>中间省略了一些代码细节，但整体思路就是通过 &lt;code>AwaitableRead&lt;/code> 类来简化异步读取操作的实现。&lt;/p>
&lt;p>&lt;code>await_suspend&lt;/code> 函数内部，将协程的句柄与 &lt;code>io_uring&lt;/code> 的请求关联起来。然后，准备一个 &lt;code>io_uring&lt;/code> 的提交请求，并将 &lt;code>AwaitableBaseOp&lt;/code> 对象的指针设置为请求的用户数据。最后，提交请求到 &lt;code>io_uring&lt;/code>。&lt;/p>
&lt;p>&lt;code>await_resume&lt;/code> 函数会在协程恢复时被调用，负责获取异步操作的结果并清理资源。这里 &lt;code>return&lt;/code> 最后返回结果。这里 &lt;code>return&lt;/code> 的值会被 &lt;code>co_await&lt;/code> 表达式的调用者获取到。&lt;/p>
&lt;h4 id="write">&lt;a href="#write" class="header-anchor">&lt;/a>write
&lt;/h4>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">class&lt;/span> &lt;span style="color:#50fa7b">AwaitableWrite&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span> IoUring &lt;span style="color:#ff79c6">*&lt;/span>uring_ &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">nullptr&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> fd_ &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>string buffer_;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span> AwaitableBaseOp &lt;span style="color:#ff79c6">*&lt;/span>op_ &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">nullptr&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span>&lt;span style="color:#ff79c6">public&lt;/span>&lt;span style="color:#ff79c6">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span> &lt;span style="color:#6272a4">//省略部分代码
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span> &lt;span style="color:#8be9fd">void&lt;/span> await_suspend(std&lt;span style="color:#ff79c6">::&lt;/span>coroutine_handle&lt;span style="color:#ff79c6">&amp;lt;&amp;gt;&lt;/span> h) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span> op_ &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">new&lt;/span> AwaitableBaseOp(h);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span> io_uring_sqe &lt;span style="color:#ff79c6">*&lt;/span>sqe &lt;span style="color:#ff79c6">=&lt;/span> io_uring_get_sqe(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>uring_&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>Uring());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span> io_uring_prep_write(sqe, fd_, buffer_.data(), buffer_.size(), &lt;span style="color:#bd93f9">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span> io_uring_sqe_set_data(sqe, op_);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span> io_uring_submit(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>uring_&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>Uring());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span> &lt;span style="color:#6272a4">//省略部分代码
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>AwaitableWrite&lt;/code> 类的实现，封装了对 &lt;code>io_uring&lt;/code> 的写入操作。基本和 &lt;code>AwaitableRead&lt;/code> 类类似，通过协程的方式简化了异步写入的流程。&lt;code>await_suspend&lt;/code> 函数负责将协程的句柄与 &lt;code>io_uring&lt;/code> 的请求关联起来，并提交写入请求。&lt;code>await_resume&lt;/code> 函数则负责获取写入操作的结果并清理资源。&lt;/p>
&lt;h2 id="run">&lt;a href="#run" class="header-anchor">&lt;/a>run
&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span> IoUring ioUring(&lt;span style="color:#bd93f9">8088&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (&lt;span style="color:#ff79c6">auto&lt;/span> ret &lt;span style="color:#ff79c6">=&lt;/span> ioUring.Init(); &lt;span style="color:#ff79c6">!&lt;/span>ret) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;uring init fail&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> ret.error() &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> t &lt;span style="color:#ff79c6">=&lt;/span> ioUring.acceptServer();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;Server started on port 8088.&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span> t.resume();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span> ioUring.run();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>运行这个程序&lt;/p>
&lt;ol>
&lt;li>创建一个 &lt;code>IoUring&lt;/code> 对象，监听8088端口。&lt;/li>
&lt;li>调用 &lt;code>IoUring::Init&lt;/code> 初始化 &lt;code>io_uring&lt;/code>。&lt;/li>
&lt;li>调用 &lt;code>IoUring::acceptServer&lt;/code> 开始接受连接。&lt;/li>
&lt;li>调用 &lt;code>IoUring::run&lt;/code> 进入事件循环。&lt;/li>
&lt;/ol>
&lt;p>到这，整个协程与 &lt;code>io_uring&lt;/code> 的结合就完成了。通过这种方式，我们可以在 C++ 中优雅地处理异步 I/O 操作，充分利用协程的优势，提高代码的可读性和可维护性。
可能会有人问，怎么没看到有关线程 &lt;code>std::thread&lt;/code> 的代码？因为这个例子是单线程内使用协程的，所有的操作都是在同一个线程中完成的。所谓的异步是通过协程的挂起和恢复来实现的，而不是通过多线程并发执行。通过异步 I/O 读写时，不会阻塞当前线程，当读写完成后，通知当前线程，来实现的异步。&lt;/p>
&lt;p>那这样设计的好处是什么呢？首先，它避免了多线程编程中的许多复杂性，比如线程安全、锁竞争等问题。其次，协程的上下文切换比线程轻量得多，性能开销更小。最后，协程可以让异步代码看起来像同步代码，极大地提高了可读性和可维护性。&lt;/p>
&lt;p>如果要使用多线程来充分利用多核 CPU 的性能，可以在每个线程中创建一个 &lt;code>IoUring&lt;/code> 对象，并使用协程来处理每个线程中的异步 I/O 操作。这样可以在保持代码简洁的同时，充分利用多核 CPU 的优势。&lt;/p></description></item><item><title>Linux下使用iouring实现一个tcp服务</title><link>https://lqxhub.github.io/posts/f0e9829c/</link><pubDate>Sun, 20 Oct 2024 17:31:37 +0800</pubDate><guid>https://lqxhub.github.io/posts/f0e9829c/</guid><description>&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/6a84474a44a97bccecbbc9c5a3b9f7aea2571c97.jpg" alt="Featured image of post Linux下使用iouring实现一个tcp服务" />&lt;p>今年一直没怎么写东西，看了一下上一篇文章，都过去半年了。前段时间一直想写一点redis的东西，但是一直没有时间去研读源码，所以就一直没有写。
最近有时间，看了一点 &lt;strong>iouring&lt;/strong> 的东西，就写了一篇文章，介绍了一下 &lt;strong>iouring&lt;/strong> 的基本使用，实现了一个简单的TCP server&lt;/p>
&lt;p>很早就听说过 &lt;strong>iouring&lt;/strong> ，但是一直没有时间学习。最近有时间就找了一些资料，学习了一下，写了一个简单的例子，实现了一个简单的tcp服务。&lt;/p>
&lt;p>这篇文章主要介绍了如何使用 &lt;strong>iouring&lt;/strong> 实现一个简单的 &lt;strong>tcp&lt;/strong> 服务，只是介绍了iouring的基本使用，没有涉及底层实现。
后面有时间再去学一下 &lt;strong>liburing&lt;/strong> 的源码，看看底层是如何实现的。&lt;/p>
&lt;p>先解释一下两个名词：&lt;strong>iouring&lt;/strong> 和 &lt;strong>liburing&lt;/strong>。
&lt;strong>iouring&lt;/strong> 是 &lt;strong>Linux&lt;/strong> 内核在 &lt;strong>5.1&lt;/strong> 版本引入的一个新的异步I/O接口。
&lt;strong>liburing&lt;/strong> 是 &lt;strong>iouring&lt;/strong> 的一个用户态库，封装了 &lt;strong>iouring&lt;/strong> 的接口，使得用户可以更方便的使用 &lt;strong>iouring&lt;/strong>。&lt;/p>
&lt;p>简单说就是 &lt;strong>io_uring&lt;/strong> 是linux内核的功能，对外提供了一套异步I/O的接口。因为直接使用 linux内核的 &lt;strong>io_uring&lt;/strong> 接口太麻烦了，
所以在就写了 &lt;strong>liburing&lt;/strong> 这个库，对内核的 &lt;strong>io_uring&lt;/strong> 封装，提供了一套更加友好的接口，使得用户可以更方便的使用 &lt;strong>io_uring&lt;/strong>。&lt;/p>
&lt;h2 id="什么是iouring">&lt;a href="#%e4%bb%80%e4%b9%88%e6%98%afiouring" class="header-anchor">&lt;/a>什么是iouring
&lt;/h2>&lt;p>io_uring是Linux内核在 &lt;strong>5.1&lt;/strong> 版本引入的一个新的异步I/O接口。
io_uring的目标是提供一个高效的、统一的异步I/O接口，以替代现有的异步I/O接口（如aio、epoll、eventfd等）。
io_uring的设计目标是提供一个简单的、高效的、统一的异步I/O接口，以便应用程序可以更容易地利用异步I/O的优势。&lt;/p>
&lt;p>虽然linux内核提供了很多异步I/O的接口，比如aio。
在linux上可以使用&lt;/p>
&lt;p>&lt;code>fcntl(sockfd, F_SETFL, fcntl(sockfd, F_GETFL, 0) | O_NONBLOCK);&lt;/code>&lt;/p>
&lt;p>来设置 &lt;strong>socket&lt;/strong> 为非阻塞模式，后续在读写 &lt;strong>socket&lt;/strong> 的 &lt;strong>fd&lt;/strong> 时，使用 &lt;code>read&lt;/code> 和 &lt;code>write&lt;/code> 函数 就是非阻塞的了。&lt;/p>
&lt;p>在调用 &lt;code>read&lt;/code> 和 &lt;code>write&lt;/code> 函数时，如果 &lt;strong>fd&lt;/strong> 没有数据，或者 &lt;strong>fd&lt;/strong> 的缓冲区满了，那么 &lt;code>read&lt;/code> 和 &lt;code>write&lt;/code> 函数会立即返回，
不会阻塞&lt;/p>
&lt;p>但是这种方式有一个问题，就是 &lt;strong>read&lt;/strong> 和 &lt;strong>write&lt;/strong> 函数的调用是阻塞的，虽然 &lt;strong>read&lt;/strong> 和 &lt;strong>write&lt;/strong> 函数会立即返回，但是 &lt;strong>read&lt;/strong> 和 &lt;strong>write&lt;/strong> 函数的调用是阻塞的，会占用 &lt;strong>CPU&lt;/strong> 的资源。&lt;/p>
&lt;p>因为之前的异步I/O接口不够好用，所以 &lt;strong>io_uring&lt;/strong> 就诞生了。&lt;/p>
&lt;p>&lt;strong>io_uring&lt;/strong> 的设计目标是提供一个简单的、高效的、统一的异步I/O接口，以便应用程序可以更容易地利用异步I/O的优势。
现在的 &lt;strong>io_uring&lt;/strong> 支持 &lt;strong>文件 I/O&lt;/strong>、&lt;strong>网络 I/O&lt;/strong>、&lt;strong>定时器&lt;/strong>、&lt;strong>信号&lt;/strong> 等。真正的统一了 &lt;strong>I/O&lt;/strong> 异步操作。&lt;/p>
&lt;p>说到异步I/O，就不得不提一下 &lt;strong>epoll&lt;/strong>。 &lt;strong>epoll&lt;/strong> 是 &lt;strong>Linux&lt;/strong> 内核提供的一种 &lt;strong>I/O&lt;/strong> 多路复用机制，可以同时监控多个 &lt;strong>fd&lt;/strong> 的 &lt;strong>I/O&lt;/strong> 事件。
&lt;strong>epoll&lt;/strong> 只是这个 多路复用机制，只是用来监控 &lt;strong>fd&lt;/strong> 的 &lt;strong>I/O&lt;/strong> 事件，当 &lt;strong>fd&lt;/strong> 有 &lt;strong>I/O&lt;/strong> 事件时（fd 可以被读写时）， &lt;strong>epoll&lt;/strong> 会通知应用程序。
真正的 &lt;strong>I/O&lt;/strong> 操作还是由 &lt;strong>read&lt;/strong> 和 &lt;strong>write&lt;/strong> 函数来完成的。
所以说 &lt;strong>epoll&lt;/strong> 并不是异步 &lt;strong>I/O&lt;/strong>，只是 &lt;strong>I/O&lt;/strong> 多路复用机制。&lt;/p>
&lt;h2 id="io_uring的基础概念">&lt;a href="#io_uring%e7%9a%84%e5%9f%ba%e7%a1%80%e6%a6%82%e5%bf%b5" class="header-anchor">&lt;/a>io_uring的基础概念
&lt;/h2>&lt;p>&lt;strong>io_uring&lt;/strong> 有两个重要的概念：&lt;strong>Submission Queue&lt;/strong> 和 &lt;strong>Completion Queue&lt;/strong>。 简称 &lt;strong>sq&lt;/strong> 和 &lt;strong>cq&lt;/strong>。&lt;/p>
&lt;p>&lt;strong>Submission Queue&lt;/strong> 是 &lt;strong>io_uring&lt;/strong> 的提交队列，用来提交 &lt;strong>I/O&lt;/strong> 请求。&lt;/p>
&lt;p>&lt;strong>Completion Queue&lt;/strong> 是 &lt;strong>io_uring&lt;/strong> 的完成队列，用来存放 &lt;strong>I/O&lt;/strong> 请求的完成状态。&lt;/p>
&lt;p>和 &lt;strong>sq&lt;/strong> 和 &lt;strong>cq&lt;/strong> 相对应的是 &lt;strong>sqe&lt;/strong> 和 &lt;strong>cqe&lt;/strong>。&lt;/p>
&lt;p>&lt;strong>sqe&lt;/strong> 是 &lt;strong>Submission Queue&lt;/strong> 的元素，用来描述一个 &lt;strong>I/O&lt;/strong> 请求。&lt;/p>
&lt;p>&lt;strong>cqe&lt;/strong> 是 &lt;strong>Completion Queue&lt;/strong> 的元素，用来描述一个 &lt;strong>I/O&lt;/strong> 请求的完成状态。&lt;/p>
&lt;p>放一张iouring的工作流程图：&lt;/p>
&lt;p>
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/359587e330204f8a868cf77c92197a417877ae15.png">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/359587e330204f8a868cf77c92197a417877ae15.png" alt="" />
&lt;/a>
&lt;/div>
&lt;/p>
&lt;p>io_uring中非常重要的两个数据结构 &lt;strong>sq&lt;/strong> 和 &lt;strong>cq&lt;/strong>。是用户空间和内核空间之间的通信桥梁。&lt;/p>
&lt;p>&lt;strong>io_uring&lt;/strong> 的工作流程如下：&lt;/p>
&lt;ol>
&lt;li>应用程序向 &lt;strong>Submission Queue&lt;/strong> 中提交 &lt;strong>I/O&lt;/strong> 请求。&lt;/li>
&lt;li>&lt;strong>io_uring&lt;/strong> 内核模块从 &lt;strong>Submission Queue&lt;/strong> 中取出 &lt;strong>I/O&lt;/strong> 请求，执行 &lt;strong>I/O&lt;/strong> 操作。&lt;/li>
&lt;li>&lt;strong>io_uring&lt;/strong> 内核模块将 &lt;strong>I/O&lt;/strong> 请求的完成状态写入 &lt;strong>Completion Queue&lt;/strong>。&lt;/li>
&lt;li>应用程序从 &lt;strong>Completion Queue&lt;/strong> 中读取 &lt;strong>I/O&lt;/strong> 请求的完成状态。&lt;/li>
&lt;li>应用程序处理 &lt;strong>I/O&lt;/strong> 请求的完成状态。&lt;/li>
&lt;/ol>
&lt;p>因为这次只是简单的介绍 &lt;strong>iouring&lt;/strong> 的基本使用，所以就不深入讲 &lt;strong>iouring&lt;/strong> 的原理了。&lt;/p>
&lt;h2 id="liburing的使用">&lt;a href="#liburing%e7%9a%84%e4%bd%bf%e7%94%a8" class="header-anchor">&lt;/a>liburing的使用
&lt;/h2>&lt;p>&lt;strong>liburing&lt;/strong> 是 &lt;strong>iouring&lt;/strong> 的一个用户态库，封装了 &lt;strong>iouring&lt;/strong> 的接口，使得用户可以更方便的使用 &lt;strong>iouring&lt;/strong>。&lt;/p>
&lt;p>liburing中封装了很多操作函数，这次也不会全部介绍，只介绍一些常用的函数。&lt;/p>
&lt;h3 id="liburing常用的函数">&lt;a href="#liburing%e5%b8%b8%e7%94%a8%e7%9a%84%e5%87%bd%e6%95%b0" class="header-anchor">&lt;/a>liburing常用的函数
&lt;/h3>&lt;h4 id="io_uring_queue_init">&lt;a href="#io_uring_queue_init" class="header-anchor">&lt;/a>io_uring_queue_init
&lt;/h4>&lt;p>初始化 &lt;strong>io_uring&lt;/strong> 对象。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">io_uring_queue_init&lt;/span>(&lt;span style="color:#8be9fd">unsigned&lt;/span> entries, &lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">io_uring&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>ring,&lt;span style="color:#8be9fd">unsigned&lt;/span> flags);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>有三个参数：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>entries&lt;/strong>： &lt;strong>Submission Queue&lt;/strong> 和 &lt;strong>Completion Queue&lt;/strong> 的大小。&lt;/li>
&lt;li>&lt;strong>ring&lt;/strong>： &lt;strong>io_uring&lt;/strong> 对象。&lt;/li>
&lt;li>&lt;strong>flags&lt;/strong>： 保留参数，传 &lt;strong>0&lt;/strong> 即可。&lt;/li>
&lt;/ol>
&lt;h4 id="io_uring_queue_exit">&lt;a href="#io_uring_queue_exit" class="header-anchor">&lt;/a>io_uring_queue_exit
&lt;/h4>&lt;p>销毁 &lt;strong>io_uring&lt;/strong> 对象。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">io_uring_queue_exit&lt;/span>(&lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">io_uring&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>ring);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>传入 &lt;strong>io_uring&lt;/strong> 对象即可。&lt;/p>
&lt;h4 id="io_uring_get_sqe">&lt;a href="#io_uring_get_sqe" class="header-anchor">&lt;/a>io_uring_get_sqe
&lt;/h4>&lt;p>获取 &lt;strong>Submission Queue&lt;/strong> 的元素。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">io_uring_sqe&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>&lt;span style="color:#50fa7b">io_uring_get_sqe&lt;/span>(&lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">io_uring&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>ring);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>传入 &lt;strong>io_uring&lt;/strong> 对象，返回一个 &lt;strong>sqe&lt;/strong> 对象，用来描述一个 &lt;strong>I/O&lt;/strong> 请求。&lt;/p>
&lt;h4 id="io_uring_submit">&lt;a href="#io_uring_submit" class="header-anchor">&lt;/a>io_uring_submit
&lt;/h4>&lt;p>提交 &lt;strong>I/O&lt;/strong> 请求。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">io_uring_submit&lt;/span>(&lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">io_uring&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>ring);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>传入 &lt;strong>io_uring&lt;/strong> 对象，提交 &lt;strong>I/O&lt;/strong> 请求。&lt;/p>
&lt;h4 id="io_uring_wait_cqe">&lt;a href="#io_uring_wait_cqe" class="header-anchor">&lt;/a>io_uring_wait_cqe
&lt;/h4>&lt;p>等待 &lt;strong>I/O&lt;/strong> 请求的完成状态。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">io_uring_wait_cqe&lt;/span>(&lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">io_uring&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>ring, &lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">io_uring_cqe&lt;/span> &lt;span style="color:#ff79c6">**&lt;/span>cqe_ptr);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>传入 &lt;strong>io_uring&lt;/strong> 对象，返回 &lt;strong>cqe&lt;/strong> 对象，用来描述一个 &lt;strong>I/O&lt;/strong> 请求的完成状态。&lt;/p>
&lt;h4 id="io_uring_submit_and_wait">&lt;a href="#io_uring_submit_and_wait" class="header-anchor">&lt;/a>io_uring_submit_and_wait
&lt;/h4>&lt;p>提交 &lt;strong>I/O&lt;/strong> 请求，并等待 &lt;strong>I/O&lt;/strong> 请求的完成状态。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">io_uring_submit_and_wait&lt;/span>(&lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">io_uring&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>ring, &lt;span style="color:#8be9fd">unsigned&lt;/span> wait_nr);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>传入 &lt;strong>io_uring&lt;/strong> 对象，提交 &lt;strong>I/O&lt;/strong> 请求，并等待 &lt;strong>I/O&lt;/strong> 请求的完成状态。&lt;/p>
&lt;p>可以看做是 &lt;strong>io_uring_submit&lt;/strong> 和 &lt;strong>io_uring_wait_cqe&lt;/strong> 的组合。&lt;/p>
&lt;h4 id="io_uring_prep_accept">&lt;a href="#io_uring_prep_accept" class="header-anchor">&lt;/a>io_uring_prep_accept
&lt;/h4>&lt;p>向 &lt;strong>Submission Queue&lt;/strong> 中添加一个 &lt;strong>accept&lt;/strong> 请求。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">io_uring_prep_accept&lt;/span>(&lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">io_uring_sqe&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>sqe, &lt;span style="color:#8be9fd">int&lt;/span> fd, &lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">sockaddr&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>addr, socklen_t &lt;span style="color:#ff79c6">*&lt;/span>addrlen, &lt;span style="color:#8be9fd">int&lt;/span> flags);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>有五个参数：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>sqe&lt;/strong>： &lt;strong>Submission Queue&lt;/strong> 的元素。&lt;/li>
&lt;li>&lt;strong>fd&lt;/strong>： &lt;strong>socket&lt;/strong> 的 &lt;strong>fd&lt;/strong>。&lt;/li>
&lt;li>&lt;strong>addr&lt;/strong>： &lt;strong>sockaddr&lt;/strong> 结构体。&lt;/li>
&lt;li>&lt;strong>addrlen&lt;/strong>： &lt;strong>sockaddr&lt;/strong> 结构体的长度。&lt;/li>
&lt;li>&lt;strong>flags&lt;/strong>： 保留参数，传 &lt;strong>0&lt;/strong> 即可。&lt;/li>
&lt;/ol>
&lt;h4 id="io_uring_prep_recv">&lt;a href="#io_uring_prep_recv" class="header-anchor">&lt;/a>io_uring_prep_recv
&lt;/h4>&lt;p>向 &lt;strong>Submission Queue&lt;/strong> 中添加一个 &lt;strong>recv&lt;/strong> 请求，也就是从fd中异步读取数据。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">io_uring_prep_recv&lt;/span>(&lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">io_uring_sqe&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>sqe, &lt;span style="color:#8be9fd">int&lt;/span> fd, &lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>buf, &lt;span style="color:#8be9fd">unsigned&lt;/span> nbytes, &lt;span style="color:#8be9fd">unsigned&lt;/span> flags);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>有五个参数：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>sqe&lt;/strong>： &lt;strong>Submission Queue&lt;/strong> 的元素。&lt;/li>
&lt;li>&lt;strong>fd&lt;/strong>： &lt;strong>socket&lt;/strong> 的 &lt;strong>fd&lt;/strong>。&lt;/li>
&lt;li>&lt;strong>buf&lt;/strong>： 接收数据的缓冲区,一般是 &lt;code>char&lt;/code> 数组的地址。&lt;/li>
&lt;li>&lt;strong>nbytes&lt;/strong>： 缓冲区的大小。&lt;/li>
&lt;li>&lt;strong>flags&lt;/strong>： 保留参数，传 &lt;strong>0&lt;/strong> 即可。&lt;/li>
&lt;/ol>
&lt;h4 id="io_uring_prep_send">&lt;a href="#io_uring_prep_send" class="header-anchor">&lt;/a>io_uring_prep_send
&lt;/h4>&lt;p>向 &lt;strong>Submission Queue&lt;/strong> 中添加一个 &lt;strong>send&lt;/strong> 请求，也就是向fd中异步写入数据。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">io_uring_prep_send&lt;/span>(&lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">io_uring_sqe&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>sqe, &lt;span style="color:#8be9fd">int&lt;/span> fd, &lt;span style="color:#ff79c6">const&lt;/span> &lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>buf, &lt;span style="color:#8be9fd">unsigned&lt;/span> nbytes, &lt;span style="color:#8be9fd">unsigned&lt;/span> flags);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>有五个参数：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>sqe&lt;/strong>： &lt;strong>Submission Queue&lt;/strong> 的元素。&lt;/li>
&lt;li>&lt;strong>fd&lt;/strong>： &lt;strong>socket&lt;/strong> 的 &lt;strong>fd&lt;/strong>。&lt;/li>
&lt;li>&lt;strong>buf&lt;/strong>： 发送数据的缓冲区，一般是 &lt;code>char&lt;/code> 指针的地址。&lt;/li>
&lt;li>&lt;strong>nbytes&lt;/strong>： 缓冲区的大小。&lt;/li>
&lt;li>&lt;strong>flags&lt;/strong>： 保留参数，传 &lt;strong>0&lt;/strong> 即可。&lt;/li>
&lt;/ol>
&lt;h4 id="io_uring_sqe_set_data">&lt;a href="#io_uring_sqe_set_data" class="header-anchor">&lt;/a>io_uring_sqe_set_data
&lt;/h4>&lt;p>设置 &lt;strong>sqe&lt;/strong> 的数据，把用户态的数据和内核绑定。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">io_uring_sqe_set_data&lt;/span>(&lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">io_uring_sqe&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>sqe, &lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>data);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>传入 &lt;strong>sqe&lt;/strong> 对象和用户态的数据，把用户态的数据和内核绑定。&lt;/p>
&lt;h4 id="io_uring_cqe_seen">&lt;a href="#io_uring_cqe_seen" class="header-anchor">&lt;/a>io_uring_cqe_seen
&lt;/h4>&lt;p>标记 &lt;strong>cqe&lt;/strong> 为已处理。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">io_uring_cqe_seen&lt;/span>(&lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">io_uring&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>ring, &lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">io_uring_cqe&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>cqe);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>传入 &lt;strong>io_uring&lt;/strong> 对象和 &lt;strong>cqe&lt;/strong> 对象，标记 &lt;strong>cqe&lt;/strong> 为已处理。&lt;/p>
&lt;h3 id="实现一个简单的tcp服务">&lt;a href="#%e5%ae%9e%e7%8e%b0%e4%b8%80%e4%b8%aa%e7%ae%80%e5%8d%95%e7%9a%84tcp%e6%9c%8d%e5%8a%a1" class="header-anchor">&lt;/a>实现一个简单的tcp服务
&lt;/h3>&lt;p>&lt;strong>io_uring&lt;/strong> 只能在 &lt;strong>linux&lt;/strong> 内核 &lt;strong>5.1&lt;/strong> 以上版本使用，所以在使用io_uring之前，需要先检查一下内核版本。
一般最新的 &lt;strong>ubuntu&lt;/strong> 和 &lt;strong>Debian&lt;/strong> 都是支持 &lt;strong>io_uring&lt;/strong> 的。&lt;/p>
&lt;p>使用 &lt;strong>liburing&lt;/strong> 需要安装 &lt;strong>liburing&lt;/strong> 库。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>sudo apt-get install liburing-dev
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>下面是一个简单的 &lt;strong>tcp&lt;/strong> 服务，功能是接收客户端的连接，然后向客户端发送一条消息。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>&lt;span style="color:#ff79c6">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;liburing.h&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;netinet/in.h&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;map&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span>&lt;span style="color:#ff79c6">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span>&lt;span style="color:#ff79c6">const&lt;/span> &lt;span style="color:#8be9fd">int&lt;/span> QUEUE_DEPTH &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">128&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span>&lt;span style="color:#ff79c6">const&lt;/span> &lt;span style="color:#8be9fd">int&lt;/span> BUFFER_SIZE &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">4096&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 10&lt;/span>&lt;span>&lt;span style="color:#ff79c6">enum&lt;/span> &lt;span style="color:#50fa7b">ConnectionType&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 11&lt;/span>&lt;span> ACCEPT,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 12&lt;/span>&lt;span> READ,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 13&lt;/span>&lt;span> WRITE,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 14&lt;/span>&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 15&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 16&lt;/span>&lt;span>&lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">Connection&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 17&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> fd;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 18&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> type{};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 19&lt;/span>&lt;span> &lt;span style="color:#8be9fd">char&lt;/span> readBuf[BUFFER_SIZE]{};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 20&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>string writeBuf;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 21&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 22&lt;/span>&lt;span> &lt;span style="color:#ff79c6">explicit&lt;/span> &lt;span style="color:#50fa7b">Connection&lt;/span>(&lt;span style="color:#8be9fd">int&lt;/span> _fd) { fd &lt;span style="color:#ff79c6">=&lt;/span> _fd; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 23&lt;/span>&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 24&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 25&lt;/span>&lt;span>std&lt;span style="color:#ff79c6">::&lt;/span>map&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>&lt;span style="color:#8be9fd">int&lt;/span>, Connection &lt;span style="color:#ff79c6">*&amp;gt;&lt;/span> connections;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 26&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 27&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">createListener&lt;/span>(sockaddr_in &lt;span style="color:#ff79c6">*&lt;/span>addr) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 28&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> listener &lt;span style="color:#ff79c6">=&lt;/span> socket(AF_INET, SOCK_STREAM, &lt;span style="color:#bd93f9">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 29&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (listener &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 30&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cerr &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;socket failed errno:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> errno &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 31&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 32&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 33&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 34&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> opt &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 35&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (setsockopt(listener, SOL_SOCKET, SO_REUSEADDR, &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>opt, &lt;span style="color:#ff79c6">sizeof&lt;/span>(opt)) &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 36&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cerr &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;setsockopt failed errno:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> errno &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 37&lt;/span>&lt;span> close(listener);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 38&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 39&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 40&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 41&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (bind(listener, &lt;span style="color:#ff79c6">reinterpret_cast&lt;/span>&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>sockaddr &lt;span style="color:#ff79c6">*&amp;gt;&lt;/span>(addr), &lt;span style="color:#ff79c6">sizeof&lt;/span>(&lt;span style="color:#ff79c6">*&lt;/span>addr)) &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 42&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cerr &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;bind failed errno:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> errno &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 43&lt;/span>&lt;span> close(listener);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 44&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 45&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 46&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 47&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (listen(listener, &lt;span style="color:#bd93f9">10&lt;/span>) &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 48&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cerr &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;listen failed errno:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> errno &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 49&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 50&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 51&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 52&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> listener;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 53&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 54&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 55&lt;/span>&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">acceptConnection&lt;/span>(io_uring &lt;span style="color:#ff79c6">*&lt;/span>ring, Connection &lt;span style="color:#ff79c6">*&lt;/span>conn, sockaddr &lt;span style="color:#ff79c6">*&lt;/span>addr, socklen_t &lt;span style="color:#ff79c6">*&lt;/span>clientLen) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 56&lt;/span>&lt;span> conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>type &lt;span style="color:#ff79c6">=&lt;/span> ACCEPT;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 57&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> sqe &lt;span style="color:#ff79c6">=&lt;/span> io_uring_get_sqe(ring);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 58&lt;/span>&lt;span> io_uring_prep_accept(sqe, conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>fd, addr, clientLen, &lt;span style="color:#bd93f9">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 59&lt;/span>&lt;span> io_uring_sqe_set_data(sqe, conn);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 60&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 61&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 62&lt;/span>&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">addSocketRead&lt;/span>(io_uring &lt;span style="color:#ff79c6">*&lt;/span>ring, Connection &lt;span style="color:#ff79c6">*&lt;/span>conn) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 63&lt;/span>&lt;span> conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>type &lt;span style="color:#ff79c6">=&lt;/span> READ;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 64&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> sqe &lt;span style="color:#ff79c6">=&lt;/span> io_uring_get_sqe(ring);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 65&lt;/span>&lt;span> io_uring_prep_recv(sqe, conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>fd, &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>readBuf, BUFFER_SIZE, &lt;span style="color:#bd93f9">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 66&lt;/span>&lt;span> io_uring_sqe_set_data(sqe, conn);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 67&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 68&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 69&lt;/span>&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">addSocketWrite&lt;/span>(io_uring &lt;span style="color:#ff79c6">*&lt;/span>ring, Connection &lt;span style="color:#ff79c6">*&lt;/span>conn) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 70&lt;/span>&lt;span> conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>type &lt;span style="color:#ff79c6">=&lt;/span> WRITE;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 71&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> sqe &lt;span style="color:#ff79c6">=&lt;/span> io_uring_get_sqe(ring);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 72&lt;/span>&lt;span> io_uring_prep_send(sqe, conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>fd, conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>writeBuf.data(), conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>writeBuf.size(), &lt;span style="color:#bd93f9">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 73&lt;/span>&lt;span> io_uring_sqe_set_data(sqe, conn);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 74&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 75&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 76&lt;/span>&lt;span>Connection &lt;span style="color:#ff79c6">*&lt;/span>&lt;span style="color:#50fa7b">newConn&lt;/span>(io_uring &lt;span style="color:#ff79c6">*&lt;/span>ring, &lt;span style="color:#8be9fd">int&lt;/span> fd) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 77&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> conn &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">new&lt;/span> Connection(fd);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 78&lt;/span>&lt;span> connections[fd] &lt;span style="color:#ff79c6">=&lt;/span> conn;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 79&lt;/span>&lt;span> addSocketRead(ring, conn);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 80&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> conn;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 81&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 82&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 83&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">uringRun&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 84&lt;/span>&lt;span> sockaddr_in addr{};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 85&lt;/span>&lt;span> addr.sin_family &lt;span style="color:#ff79c6">=&lt;/span> AF_INET;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 86&lt;/span>&lt;span> addr.sin_port &lt;span style="color:#ff79c6">=&lt;/span> htons(&lt;span style="color:#bd93f9">8088&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 87&lt;/span>&lt;span> addr.sin_addr.s_addr &lt;span style="color:#ff79c6">=&lt;/span> INADDR_ANY;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 88&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 89&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> listenFd &lt;span style="color:#ff79c6">=&lt;/span> createListener(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>addr);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 90&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (listenFd &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 91&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 92&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 93&lt;/span>&lt;span> socklen_t clientLen &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">sizeof&lt;/span>(addr);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 94&lt;/span>&lt;span> io_uring ring{};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 95&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (io_uring_queue_init(QUEUE_DEPTH, &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>ring, &lt;span style="color:#bd93f9">0&lt;/span>) &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 96&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cerr &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;io_uring_queue_init failed errno:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> errno &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 97&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 98&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 99&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> lConn &lt;span style="color:#ff79c6">=&lt;/span> newConn(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>ring, listenFd);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">100&lt;/span>&lt;span> acceptConnection(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>ring, lConn, &lt;span style="color:#ff79c6">reinterpret_cast&lt;/span>&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>sockaddr &lt;span style="color:#ff79c6">*&amp;gt;&lt;/span> (&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>addr), &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>clientLen);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">101&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (io_uring_submit(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>ring) &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">102&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cerr &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;io_uring_submit failed errno:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> errno &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">103&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">104&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">105&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">106&lt;/span>&lt;span> io_uring_cqe &lt;span style="color:#ff79c6">*&lt;/span>cqes[QUEUE_DEPTH];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">107&lt;/span>&lt;span> &lt;span style="color:#ff79c6">while&lt;/span> (&lt;span style="color:#8be9fd;font-style:italic">true&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">108&lt;/span>&lt;span> &lt;span style="color:#6272a4">//等待事件完成
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">109&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#8be9fd">int&lt;/span> ret &lt;span style="color:#ff79c6">=&lt;/span> io_uring_submit_and_wait(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>ring, &lt;span style="color:#bd93f9">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">110&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (ret &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">111&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cerr &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;io_uring_wait_cqe failed errno:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> errno &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">112&lt;/span>&lt;span> &lt;span style="color:#ff79c6">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">113&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">114&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">115&lt;/span>&lt;span> &lt;span style="color:#6272a4">//获取完成的事件
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">116&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#ff79c6">auto&lt;/span> num &lt;span style="color:#ff79c6">=&lt;/span> io_uring_peek_batch_cqe(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>ring, cqes, QUEUE_DEPTH);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">117&lt;/span>&lt;span> &lt;span style="color:#ff79c6">for&lt;/span> (&lt;span style="color:#8be9fd">int&lt;/span> i &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>; i &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> num; &lt;span style="color:#ff79c6">++&lt;/span>i) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">118&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> conn &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">reinterpret_cast&lt;/span>&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>Connection &lt;span style="color:#ff79c6">*&amp;gt;&lt;/span> (cqes[i]&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>user_data);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">119&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>type &lt;span style="color:#ff79c6">==&lt;/span> ACCEPT) {&lt;span style="color:#6272a4">//新连接
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">120&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#8be9fd">int&lt;/span> clientFd &lt;span style="color:#ff79c6">=&lt;/span> cqes[i]&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>res;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">121&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> newCLi &lt;span style="color:#ff79c6">=&lt;/span> newConn(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>ring, clientFd);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">122&lt;/span>&lt;span> addSocketRead(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>ring, newCLi);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">123&lt;/span>&lt;span> acceptConnection(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>ring, lConn, &lt;span style="color:#ff79c6">reinterpret_cast&lt;/span>&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>sockaddr &lt;span style="color:#ff79c6">*&amp;gt;&lt;/span> (&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>addr), &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>clientLen);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">124&lt;/span>&lt;span> } &lt;span style="color:#ff79c6">else&lt;/span> &lt;span style="color:#ff79c6">if&lt;/span> (conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>type &lt;span style="color:#ff79c6">==&lt;/span> READ) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">125&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> readSize &lt;span style="color:#ff79c6">=&lt;/span> cqes[i]&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>res;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">126&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (readSize &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {&lt;span style="color:#6272a4">//读取失败(比如客户端断开连接)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">127&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> shutdown(conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>fd, SHUT_RDWR);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">128&lt;/span>&lt;span> connections.erase(conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>fd);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">129&lt;/span>&lt;span> &lt;span style="color:#ff79c6">delete&lt;/span> conn;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">130&lt;/span>&lt;span> } &lt;span style="color:#ff79c6">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">131&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;read:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>readBuf &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">132&lt;/span>&lt;span> conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>writeBuf &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;hello client&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">133&lt;/span>&lt;span> addSocketWrite(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>ring, conn);&lt;span style="color:#6272a4">//向客户端写数据
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">134&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">135&lt;/span>&lt;span> } &lt;span style="color:#ff79c6">else&lt;/span> &lt;span style="color:#ff79c6">if&lt;/span> (conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>type &lt;span style="color:#ff79c6">==&lt;/span> WRITE) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">136&lt;/span>&lt;span> addSocketRead(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>ring, conn);&lt;span style="color:#6272a4">// 把这个连接加入读事件
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">137&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">138&lt;/span>&lt;span> io_uring_cqe_seen(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>ring, cqes[i]);&lt;span style="color:#6272a4">// mark the cqe as processed
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">139&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">140&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">141&lt;/span>&lt;span> io_uring_queue_exit(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>ring);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">142&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">143&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">144&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">145&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">146&lt;/span>&lt;span> uringRun();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">147&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">148&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>编译这段代码的时候，需要链接 &lt;strong>liburing&lt;/strong> 库。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>g++ -o server server.cpp -luring
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>createListener&lt;/code> 函数用来创建一个 &lt;strong>socket&lt;/strong> 监听 &lt;strong>8088&lt;/strong> 端口。这个函数没什么特别的，就是创建一个 &lt;strong>socket&lt;/strong>，然后绑定 &lt;strong>8088&lt;/strong> 端口，然后监听。&lt;/p>
&lt;p>&lt;code>acceptConnection&lt;/code> 函数用来接收客户端的连接。这个函数调用 &lt;strong>io_uring_prep_accept&lt;/strong> 函数，向 &lt;strong>Submission Queue&lt;/strong> 中添加一个 &lt;strong>accept&lt;/strong> 请求。&lt;/p>
&lt;p>&lt;code>addSocketRead&lt;/code> 函数用来向 &lt;strong>Submission Queue&lt;/strong> 中添加一个 &lt;strong>recv&lt;/strong> 请求，也就是从 &lt;strong>fd&lt;/strong> 中异步读取数据。&lt;/p>
&lt;p>&lt;code>addSocketWrite&lt;/code> 函数用来向 &lt;strong>Submission Queue&lt;/strong> 中添加一个 &lt;strong>send&lt;/strong> 请求，也就是向 &lt;strong>fd&lt;/strong> 中异步写入数据。&lt;/p>
&lt;p>&lt;code>newConn&lt;/code> 函数用来创建一个新的连接。这个函数会调用 &lt;code>addSocketRead&lt;/code> 函数，向 &lt;strong>Submission Queue&lt;/strong> 中添加一个 &lt;strong>recv&lt;/strong> 请求。&lt;/p>
&lt;p>&lt;code>uringRun&lt;/code> 函数是主函数。这个函数会创建一个 &lt;strong>io_uring&lt;/strong> 对象，然后调用 &lt;code>createListener&lt;/code> 函数创建一个监听 &lt;strong>socket&lt;/strong>，然后调用 &lt;code>newConn&lt;/code> 函数创建一个新的连接。&lt;/p>
&lt;p>有一个知识点需要注意一下，在 io_uring中，每次获取的 &lt;strong>cqe&lt;/strong> 在使用完之后，需要调用 &lt;code>io_uring_cqe_seen&lt;/code> 函数，标记 &lt;strong>cqe&lt;/strong> 为已处理。
同时处理的时候，也会把 这个 &lt;strong>cqe&lt;/strong> 从 &lt;strong>Completion Queue&lt;/strong> 中移除，对应的 &lt;code>fd&lt;/code> 也会从 &lt;strong>io_uring&lt;/strong> 中移除。
所以，为了保证后续能继续接收到 &lt;strong>fd&lt;/strong> 的 &lt;strong>I/O&lt;/strong> 事件，需要在处理完 &lt;strong>cqe&lt;/strong> 之后，再次调用 &lt;code>addSocketRead&lt;/code> 函数，向 &lt;strong>Submission Queue&lt;/strong> 中添加一个 &lt;strong>recv&lt;/strong> 请求。&lt;/p>
&lt;p>这些函数的内容都比较简单，就不再详细介绍了。主要看一下 &lt;strong>while&lt;/strong> 循环的内容。&lt;/p>
&lt;p>&lt;code>int ret = io_uring_submit_and_wait(&amp;amp;ring, 1);&lt;/code> 这个函数会提交 &lt;strong>I/O&lt;/strong> 请求，并等待 &lt;strong>I/O&lt;/strong> 请求的完成状态。这个函数会阻塞，直到有 1个 &lt;strong>I/O&lt;/strong> 请求完成。&lt;/p>
&lt;p>这里可以使用 &lt;code>io_uring_submit&lt;/code> 这个函数只提交 &lt;strong>I/O&lt;/strong> 请求，不等待 &lt;strong>I/O&lt;/strong> 请求的完成状态。但是这样的话，while循环会一直循环，不会阻塞，对应的表现就是 &lt;strong>CPU&lt;/strong> 占用率会很高。
这种情况适用于 &lt;strong>I/O&lt;/strong> 请求比较多的情况，比如 &lt;strong>nginx&lt;/strong> 这种 &lt;strong>web&lt;/strong> 服务器。&lt;/p>
&lt;p>一般情况下，使用 &lt;code>io_uring_submit_and_wait&lt;/code> 这个函数就可以了。&lt;/p>
&lt;p>如果 返回的 &lt;strong>ret&lt;/strong> 小于 &lt;strong>0&lt;/strong>，说明出错了，这里简单的打印一下错误信息，然后退出。&lt;/p>
&lt;p>&lt;code>auto num = io_uring_peek_batch_cqe(&amp;amp;ring, cqes, QUEUE_DEPTH);&lt;/code> 这个函数会获取 &lt;strong>Completion Queue&lt;/strong> 中的 &lt;strong>cqe&lt;/strong>，一次最多获取 &lt;strong>QUEUE_DEPTH&lt;/strong> 个 &lt;strong>cqe&lt;/strong>。&lt;/p>
&lt;p>这个函数有点类似于 &lt;strong>epoll&lt;/strong> 的 &lt;strong>epoll_wait&lt;/strong> 函数，会一次性获取多个 &lt;strong>cqe&lt;/strong>。&lt;/p>
&lt;p>然后遍历 &lt;strong>cqe&lt;/strong>，根据 &lt;strong>cqe&lt;/strong> 的 &lt;strong>type&lt;/strong> 来处理 &lt;strong>I/O&lt;/strong> 事件。在之前的submit的时候，指定了有 &lt;strong>ACCEPT&lt;/strong>、&lt;strong>READ&lt;/strong>、&lt;strong>WRITE&lt;/strong> 三种 &lt;strong>I/O&lt;/strong> 事件。&lt;/p>
&lt;p>因为之前的 &lt;strong>cqe&lt;/strong> 中的 &lt;strong>user_data&lt;/strong> 是 &lt;strong>Connection&lt;/strong> 对象的指针，所以可以根据 &lt;strong>cqe&lt;/strong> 的 &lt;strong>user_data&lt;/strong> 来获取 &lt;strong>Connection&lt;/strong> 对象，然后根据 &lt;strong>Connection&lt;/strong> 对象的 &lt;strong>type&lt;/strong> 来处理 &lt;strong>I/O&lt;/strong> 事件。
所以可以 &lt;code>reinterpret_cast&amp;lt;Connection *&amp;gt; (cqes[i]-&amp;gt;user_data);&lt;/code>强转来获取 &lt;strong>Connection&lt;/strong> 对象。&lt;/p>
&lt;p>如果 &lt;strong>type&lt;/strong> 是 &lt;strong>ACCEPT&lt;/strong>，说明是新的连接，就调用 &lt;code>newConn&lt;/code> 函数创建一个新的连接，然后调用 &lt;code>acceptConnection&lt;/code> 函数接收新的连接。
在接收新的连接之后，需要再次调用 &lt;code>acceptConnection&lt;/code> 函数，把listener的socket放回io_uring中，后面才能继续工作。&lt;/p>
&lt;p>如果 &lt;strong>type&lt;/strong> 是 &lt;strong>READ&lt;/strong>，说明是读事件，就读取 &lt;strong>cqe&lt;/strong> 的 &lt;strong>res&lt;/strong> 字段，如果小于 &lt;strong>0&lt;/strong>，说明读取失败，比如客户端断开连接，就关闭 &lt;strong>fd&lt;/strong>，然后从 &lt;strong>connections&lt;/strong> 中移除这个 &lt;strong>fd&lt;/strong>，然后释放 &lt;strong>Connection&lt;/strong> 对象。
如果读取成功，就打印读取的数据，然后向客户端发送一条消息。&lt;/p>
&lt;p>如果 &lt;strong>type&lt;/strong> 是 &lt;strong>WRITE&lt;/strong>，说明是写事件，在这里就是向客户端写数据完成了。
调用 &lt;code>addSocketRead&lt;/code> 函数，向 &lt;strong>Submission Queue&lt;/strong> 中添加一个 读的请求，然后这个 &lt;strong>fd&lt;/strong> 就会继续接收 &lt;strong>I/O&lt;/strong> 事件。&lt;/p>
&lt;p>最后调用 &lt;code>io_uring_cqe_seen&lt;/code> 函数，标记 &lt;strong>cqe&lt;/strong> 为已处理。&lt;/p>
&lt;p>这样一个简单的 &lt;strong>tcp&lt;/strong> 服务就实现了。这个服务只是一个简单的例子，没法用在生产环境中，只是用来学习 &lt;strong>iouring&lt;/strong> 的基本使用。&lt;/p>
&lt;p>像是中间的错误处理，连接的超时等问题都没有处理，这些问题需要根据实际情况来处理。&lt;/p>
&lt;p>这个例子中，一个 &lt;strong>socket&lt;/strong> 同时只能读或者写，不能同时读写，这个问题也需要根据实际情况来处理。&lt;/p>
&lt;h2 id="总结">&lt;a href="#%e6%80%bb%e7%bb%93" class="header-anchor">&lt;/a>总结
&lt;/h2>&lt;p>这篇文章主要介绍了 &lt;strong>iouring&lt;/strong> 的基本使用，实现了一个简单的 &lt;strong>tcp&lt;/strong> 服务。只是介绍了 &lt;strong>iouring&lt;/strong> 的基本使用，没有涉及底层实现。
后面有时间再去学一下 &lt;strong>liburing&lt;/strong> 的源码，看看底层是如何实现的。&lt;/p>
&lt;p>其实 &lt;strong>iouring&lt;/strong> 最主要的两个操作是提交 &lt;strong>I/O&lt;/strong> 请求到 &lt;strong>sq&lt;/strong> ，然后等待 &lt;strong>I/O&lt;/strong> 请求的完成后,从 &lt;strong>cq&lt;/strong> 获取然后处理。&lt;/p>
&lt;p>看很多人都说 &lt;strong>iouring&lt;/strong> 性能很高，尤其是在 &lt;strong>I/O&lt;/strong> 密集型的场景下，性能提升很明显。这部分内容还没有验证，后面有时间再去验证一下。&lt;/p>
&lt;p>因为也是初学 &lt;strong>iouring&lt;/strong>，所以文章中可能有错误，欢迎批评指正。&lt;/p>
&lt;hr>
&lt;h2 id="追更">&lt;a href="#%e8%bf%bd%e6%9b%b4" class="header-anchor">&lt;/a>追更
&lt;/h2>&lt;p>&lt;strong>2024-10-23&lt;/strong>&lt;/p>
&lt;p>在服务端加了一点代码，写了一个简单的 &lt;strong>HTTP&lt;/strong> 服务器，可以通过浏览器访问，然后找了一个 HTTP 压测工具，测试了一下性能。&lt;/p>
&lt;p>HTTP 服务器返回的内容：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>writeBuf &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;HTTP/1.1 200 OK&lt;/span>&lt;span style="color:#f1fa8c">\r\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;Content-Length: 55&lt;/span>&lt;span style="color:#f1fa8c">\r\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;Content-Type: text/html&lt;/span>&lt;span style="color:#f1fa8c">\r\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;Connection: keep-alive&lt;/span>&lt;span style="color:#f1fa8c">\r\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;Date: Mon, 23 Oct 2024 13:24:24 GMT&lt;/span>&lt;span style="color:#f1fa8c">\r\n\r\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;&amp;lt;h1&amp;gt;hello&amp;lt;/h1&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>同样的，使用 &lt;strong>epoll&lt;/strong> 也实现了一个 &lt;strong>HTTP&lt;/strong> 服务器，返回了同样的内容。&lt;/p>
&lt;p>几轮测试下来，发现 &lt;strong>epoll&lt;/strong> 的性能要比 &lt;strong>iouring&lt;/strong> 高一点。至于原因还在研究中。&lt;/p>
&lt;p>猜测的原因可能是 在数据量很小的时候， &lt;strong>iouring&lt;/strong> 的性能发挥不出来，甚至效果更差了。
还有一个原因可能是我使用的方法有问题，这个等后面继续研究。&lt;/p></description></item></channel></rss>