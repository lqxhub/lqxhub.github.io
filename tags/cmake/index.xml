<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Cmake on QX 的笔记</title><link>https://lqxhub.github.io/tags/cmake/</link><description>Recent content in Cmake on QX 的笔记</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sun, 16 Apr 2023 12:53:34 +0000</lastBuildDate><atom:link href="https://lqxhub.github.io/tags/cmake/index.xml" rel="self" type="application/rss+xml"/><item><title>cmake笔记3。CMake中几个常用函数和命令的应用场景和代码示例，find_program、execute_process、cmake_host_system_information以及ExternalProject_Add</title><link>https://lqxhub.github.io/posts/d026638f/</link><pubDate>Sun, 16 Apr 2023 12:53:34 +0000</pubDate><guid>https://lqxhub.github.io/posts/d026638f/</guid><description>&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/bdbfc42c62bafe98a218d05d53402cb4ecb80454.jpg" alt="Featured image of post cmake笔记3。CMake中几个常用函数和命令的应用场景和代码示例，find_program、execute_process、cmake_host_system_information以及ExternalProject_Add" />&lt;p>好久没有写东西了，上次写还是在去年10月，都快半年了。这期间，除了工作比较忙外，也开始参与一些开源项目，比如 &lt;code>pika&lt;/code> 刚好今年pika做了一些改动，比如编译方式从&lt;code>MakeFile&lt;/code> 改成了 &lt;code>cmake&lt;/code>。我有幸参与了一些工作，正好趁此机会，又深入学习了一下&lt;code>cmake&lt;/code> 的知识，这周末有时间，来记录一下&lt;/p>
&lt;p>以前我也写过两篇和cmake相关的文章，这次又有了新的收获，就想着再写一篇记录一下&lt;/p>
&lt;p>我那就从pika中用到的cmake的一些知识，记录一下吧。我没有找到好的中文cmake文档，遇到问题最好还是去官网查，文中的相关知识,很多都是从官网学到的。cmake官网 &lt;a class="link" href="https://cmake.org/cmake/help/latest/" target="_blank" rel="noopener"
>传送门&lt;/a>&lt;/p>
&lt;h2 id="find_program">&lt;a href="#find_program" class="header-anchor">&lt;/a>find_program
&lt;/h2>&lt;p>主要功能是检查当前系统上是否有对应的程序&lt;/p>
&lt;p>比如在pika中，用来检查系统中是否有&lt;code>autoconf&lt;/code>这个程序&lt;/p>
&lt;ul>
&lt;li>
&lt;p>这个函数的第一参数是一个变量，用来接收检查结果&lt;/p>
&lt;/li>
&lt;li>
&lt;p>第二个参数是要检查的程序的名字&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>后面是一些可选参数，在cmake中，可选参数要加上参数的名比如在这里，要给出检查的路径，参数名是&lt;code>PATHS&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cmake" data-lang="cmake">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">find_program&lt;/span>(&lt;span style="color:#f1fa8c">AUTOCONF&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">autoconf&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">PATHS&lt;/span> &lt;span style="color:#f1fa8c">/usr/bin&lt;/span> &lt;span style="color:#f1fa8c">/usr/local/bin&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">if&lt;/span> (&lt;span style="color:#ff79c6">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">AUTOCONF&lt;/span>&lt;span style="color:#ff79c6">}&lt;/span> &lt;span style="color:#f1fa8c">MATCHES&lt;/span> &lt;span style="color:#f1fa8c">AUTOCONF-NOTFOUND&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6&lt;/span>&lt;span> &lt;span style="color:#8be9fd;font-style:italic">message&lt;/span>(&lt;span style="color:#f1fa8c">FATAL_ERROR&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;not find autoconf on localhost&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">endif&lt;/span>()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>后面通过比较 &lt;code>AUTOCONF&lt;/code> 是不是 &lt;code>AUTOCONF-NOTFOUND&lt;/code>来确定系统中是否存在 &lt;code>autoconf&lt;/code>这个程序&lt;/p>
&lt;p>这知识最基本的用法，&lt;code>find_program&lt;/code> 还有很多参数，可以实现更多的功能，可以去官网直接学习&lt;a class="link" href="https://cmake.org/cmake/help/latest/command/find_program.html" target="_blank" rel="noopener"
>传送门&lt;/a>&lt;/p>
&lt;h2 id="execute_process">&lt;a href="#execute_process" class="header-anchor">&lt;/a>execute_process
&lt;/h2>&lt;p>主要功能是执行一个命令，一般常用于执行一个本机的程序或者脚本&lt;/p>
&lt;p>这个函数常用的有下面这些参数&lt;/p>
&lt;ul>
&lt;li>
&lt;p>COMMAND 要执行的命令，后面可以加参数，可以支持执行多个命令&lt;/p>
&lt;/li>
&lt;li>
&lt;p>WORKING_DIRECTORY 这个命令执行时的工作目录&lt;/p>
&lt;/li>
&lt;li>
&lt;p>TIMEOUT 执行这个命令的超时时间&lt;/p>
&lt;/li>
&lt;li>
&lt;p>RESULT_VARIABLE 这是一个变量，保存命令执行的结果&lt;/p>
&lt;/li>
&lt;li>
&lt;p>OUTPUT_VARIABLE 调用结果的返回值&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ERROR_VARIABLE 如果出错了，error的返回值&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>在pika中的应用&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cmake" data-lang="cmake">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">execute_process&lt;/span>(&lt;span style="color:#f1fa8c">COMMAND&lt;/span> &lt;span style="color:#f1fa8c">sh&lt;/span> &lt;span style="color:#ff79c6">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">CMAKE_UTILS_DIR&lt;/span>&lt;span style="color:#ff79c6">}&lt;/span>&lt;span style="color:#f1fa8c">/Get_OS_Version.sh&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">OUTPUT_VARIABLE&lt;/span> &lt;span style="color:#f1fa8c">OS_VERSION&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这段命令的作用是执行一个shell脚本，得到这个脚本的返回值&lt;/p>
&lt;p>需要注意的是，execute_process不是使用shell去执行命令，所以要指定执行的程序。&lt;/p>
&lt;p>比如这里，要执行shell脚本，必须指定用sh程序去执行这个脚本。&lt;/p>
&lt;h2 id="cmake_host_system_information">&lt;a href="#cmake_host_system_information" class="header-anchor">&lt;/a>cmake_host_system_information
&lt;/h2>&lt;p>获取本机的一些信息&lt;/p>
&lt;p>这个函数使用比较简单，只有两个参数，&lt;/p>
&lt;ul>
&lt;li>
&lt;p>RESULT 获取的结果&lt;/p>
&lt;/li>
&lt;li>
&lt;p>QUERY 要获取的信息&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;code>QUERY&lt;/code> 常用的值，这些值在不同版本的cmake上支持程度也是不一样的，使用前还是去官网看一下，&lt;a class="link" href="https://cmake.org/cmake/help/latest/command/cmake_host_system_information.html?highlight=cmake_host_system_information" target="_blank" rel="noopener"
>传送门&lt;/a>&lt;/p>
&lt;ul>
&lt;li>&lt;code>NUMBER_OF_LOGICAL_CORES&lt;/code>：逻辑核心数量。&lt;/li>
&lt;li>&lt;code>NUMBER_OF_PHYSICAL_CORES&lt;/code>：物理核心数量。&lt;/li>
&lt;li>&lt;code>HOSTNAME&lt;/code>：主机名称。&lt;/li>
&lt;li>&lt;code>TOTAL_VIRTUAL_MEMORY&lt;/code>：总虚拟内存，单位是&lt;code>M&lt;/code>。&lt;/li>
&lt;li>&lt;code>AVAILABLE_VIRTUAL_MEMORY&lt;/code>：可用虚拟内存，单位是&lt;code>M&lt;/code>。&lt;/li>
&lt;li>&lt;code>TOTAL_PHYSICAL_MEMORY&lt;/code>：总物理内存，单位是&lt;code>M&lt;/code>。&lt;/li>
&lt;li>&lt;code>AVAILABLE_PHYSICAL_MEMORY&lt;/code>：可用物理内存，单位是&lt;code>M&lt;/code>。&lt;/li>
&lt;li>&lt;code>IS_64BIT&lt;/code>：如果处理器是&lt;code>64&lt;/code>位，查询结果为&lt;code>1&lt;/code>。&lt;/li>
&lt;li>&lt;code>HAS_FPU&lt;/code>：如果处理器拥有浮点处理单元，查询结果为&lt;code>1&lt;/code>。&lt;/li>
&lt;li>&lt;code>HAS_MMX&lt;/code>：如果处理器支持&lt;code>MMX&lt;/code>指令集，查询结果为&lt;code>1&lt;/code>。&lt;/li>
&lt;li>&lt;code>HAS_MMX_PLUS&lt;/code>：如果处理器支持&lt;code>Ext. MMX&lt;/code>指令集，查询结果为&lt;code>1&lt;/code>。&lt;/li>
&lt;li>&lt;code>HAS_SSE&lt;/code>：如果处理器支持&lt;code>SSE&lt;/code>指令集，查询结果为&lt;code>1&lt;/code>。&lt;/li>
&lt;li>&lt;code>HAS_SSE2&lt;/code>：如果处理器支持&lt;code>SSE2&lt;/code>指令集，查询结果为&lt;code>1&lt;/code>。&lt;/li>
&lt;li>&lt;code>HAS_SSE_FP&lt;/code>：如果处理器支持&lt;code>SSE FP&lt;/code>指令集，查询结果为&lt;code>1&lt;/code>。&lt;/li>
&lt;li>&lt;code>HAS_SSE_MMX&lt;/code>：如果处理器支持&lt;code>SSE MMX&lt;/code>指令集，查询结果为&lt;code>1&lt;/code>。&lt;/li>
&lt;li>&lt;code>HAS_AMD_3DNOW&lt;/code>：如果处理器支持&lt;code>3DNow&lt;/code>指令集，查询结果为&lt;code>1&lt;/code>。&lt;/li>
&lt;li>&lt;code>HAS_AMD_3DNOW_PLUS&lt;/code>：如果处理器支持&lt;code>3DNow+&lt;/code>指令集，查询结果为&lt;code>1&lt;/code>。&lt;/li>
&lt;li>&lt;code>HAS_IA64&lt;/code>：如果&lt;code>IA64&lt;/code>处理器可以模拟&lt;code>X86&lt;/code>，查询结果为&lt;code>1&lt;/code>。&lt;/li>
&lt;li>&lt;code>HAS_SERIAL_NUMBER&lt;/code>：如果处理器有序列号，查询结果为&lt;code>1&lt;/code>。&lt;/li>
&lt;li>&lt;code>PROCESSOR_SERIAL_NUMBER&lt;/code>：处理器序列号。&lt;/li>
&lt;li>&lt;code>PROCESSOR_NAME&lt;/code>：可读的处理器全称。&lt;/li>
&lt;li>&lt;code>OS_NAME&lt;/code>：操作系统名称，也就是&lt;code>uname -s&lt;/code>的输出，三大操作系统对应的名称是&lt;code>Linux&lt;/code>、&lt;code>Windows&lt;/code>和&lt;code>Darwin&lt;/code>（&lt;code>masOS&lt;/code>），也可以通过&lt;code>CMAKE_HOST_SYSTEM_NAME&lt;/code>变量获取。&lt;/li>
&lt;li>&lt;code>OS_RELEASE&lt;/code>：操作系统子类型，例如&lt;code>Windows Professional&lt;/code>。&lt;/li>
&lt;li>&lt;code>OS_VERSION&lt;/code>：操作系统构建&lt;code>ID&lt;/code>。&lt;/li>
&lt;li>&lt;code>OS_PLATFORM&lt;/code>：处理器架构，&lt;code>Windows&lt;/code>下可以通过&lt;code>PROCESSOR_ARCHITECTURE&lt;/code>变量获取，&lt;code>Unix/Linux/macOS&lt;/code>等平台可以通过&lt;code>uname -m&lt;/code>或&lt;code>uname -p&lt;/code>获取。也可以通过&lt;code>CMAKE_HOST_SYSTEM_PROCESSOR&lt;/code>变量获取。&lt;/li>
&lt;/ul>
&lt;p>示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cmake" data-lang="cmake">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">cmake_host_system_information&lt;/span>(&lt;span style="color:#f1fa8c">RESULT&lt;/span> &lt;span style="color:#f1fa8c">CPU_CORE&lt;/span> &lt;span style="color:#f1fa8c">QUERY&lt;/span> &lt;span style="color:#f1fa8c">NUMBER_OF_LOGICAL_CORES&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">message&lt;/span>(&lt;span style="color:#f1fa8c">STATUS&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;Cpu core ${CPU_CORE}&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>获取当前电脑的逻辑核数&lt;/p>
&lt;h2 id="externalproject_add">&lt;a href="#externalproject_add" class="header-anchor">&lt;/a>ExternalProject_Add
&lt;/h2>&lt;p>这个就比较复杂了，主要功能是引入一个外部项目。比如在一些项目中，需要别的库，可以使用这个函数来实现。只需要一些简单的配置就能完成依赖的编译和安装，极大的简化了C++的依赖管理。&lt;/p>
&lt;p>使用这个函数前，需要先导入&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cmake" data-lang="cmake">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">include&lt;/span>(&lt;span style="color:#f1fa8c">ExternalProject&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个函数的常用参数有&lt;/p>
&lt;h3 id="directory-options">&lt;a href="#directory-options" class="header-anchor">&lt;/a>Directory Options:
&lt;/h3>&lt;p>这部分是目录相关的配置&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>PREFIX&lt;/code>：外部项目的根目录&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>TMP_DIR&lt;/code>：外部项目的临时目录&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>LOG_DIR&lt;/code> ：外部项目在执行时，产生的log目录&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>STAMP_DIR&lt;/code>：外部项目在执行时，每一步的时间戳都会记录在这里，如果没有设置&lt;code>LOG_DIR&lt;/code> log文件默认也会在这里&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>DOWNLOAD_DIR&lt;/code>： 外部项目下载文件的存放目录&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>SOURCE_DIR&lt;/code>： 外部项目的源码存放目录&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>BINARY_DIR&lt;/code>： 外部项目编译产生的二进制文件的存放目录&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>INSTALL_DIR&lt;/code>： 外部项目编译产生的动态库和静态库的存放目录&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>如果设置了&lt;code>PREFIX&lt;/code> 属性，那么默认的目录结构是这样的&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>TMP_DIR = &amp;lt;prefix&amp;gt;/tmp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span>STAMP_DIR = &amp;lt;prefix&amp;gt;/src/&amp;lt;name&amp;gt;-stamp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3&lt;/span>&lt;span>DOWNLOAD_DIR = &amp;lt;prefix&amp;gt;/src
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4&lt;/span>&lt;span>SOURCE_DIR = &amp;lt;prefix&amp;gt;/src/&amp;lt;name&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5&lt;/span>&lt;span>BINARY_DIR = &amp;lt;prefix&amp;gt;/src/&amp;lt;name&amp;gt;-build
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6&lt;/span>&lt;span>INSTALL_DIR = &amp;lt;prefix&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7&lt;/span>&lt;span>LOG_DIR = &amp;lt;STAMP_DIR&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果设置了&lt;code>EP_BASE&lt;/code>，目录结构是这样的&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>TMP_DIR &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&lt;/span>base&lt;span style="color:#ff79c6">&amp;gt;/&lt;/span>tmp&lt;span style="color:#ff79c6">/&amp;lt;&lt;/span>name&lt;span style="color:#ff79c6">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span>STAMP_DIR &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&lt;/span>base&lt;span style="color:#ff79c6">&amp;gt;/&lt;/span>Stamp&lt;span style="color:#ff79c6">/&amp;lt;&lt;/span>name&lt;span style="color:#ff79c6">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3&lt;/span>&lt;span>DOWNLOAD_DIR &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&lt;/span>base&lt;span style="color:#ff79c6">&amp;gt;/&lt;/span>Download&lt;span style="color:#ff79c6">/&amp;lt;&lt;/span>name&lt;span style="color:#ff79c6">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4&lt;/span>&lt;span>SOURCE_DIR &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&lt;/span>base&lt;span style="color:#ff79c6">&amp;gt;/&lt;/span>Source&lt;span style="color:#ff79c6">/&amp;lt;&lt;/span>name&lt;span style="color:#ff79c6">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5&lt;/span>&lt;span>BINARY_DIR &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&lt;/span>base&lt;span style="color:#ff79c6">&amp;gt;/&lt;/span>Build&lt;span style="color:#ff79c6">/&amp;lt;&lt;/span>name&lt;span style="color:#ff79c6">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6&lt;/span>&lt;span>INSTALL_DIR &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&lt;/span>base&lt;span style="color:#ff79c6">&amp;gt;/&lt;/span>Install&lt;span style="color:#ff79c6">/&amp;lt;&lt;/span>name&lt;span style="color:#ff79c6">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7&lt;/span>&lt;span>LOG_DIR &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&lt;/span>STAMP_DIR&lt;span style="color:#ff79c6">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在pika中，是这样设置的&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cmake" data-lang="cmake">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">set&lt;/span>(&lt;span style="color:#f1fa8c">EP_BASE_SUFFIX&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;buildtrees&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">set_property&lt;/span>(&lt;span style="color:#f1fa8c">DIRECTORY&lt;/span> &lt;span style="color:#f1fa8c">PROPERTY&lt;/span> &lt;span style="color:#f1fa8c">EP_BASE&lt;/span> &lt;span style="color:#ff79c6">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">CMAKE_CURRENT_SOURCE_DIR&lt;/span>&lt;span style="color:#ff79c6">}&lt;/span>&lt;span style="color:#f1fa8c">/&lt;/span>&lt;span style="color:#ff79c6">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">EP_BASE_SUFFIX&lt;/span>&lt;span style="color:#ff79c6">}&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>最后的目录结构是这样的&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>buildtrees/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span>├── Build
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3&lt;/span>&lt;span>├── Download
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4&lt;/span>&lt;span>├── Install
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5&lt;/span>&lt;span>├── Source
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6&lt;/span>&lt;span>├── Stamp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7&lt;/span>&lt;span>└── tmp
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="download-step-options">&lt;a href="#download-step-options" class="header-anchor">&lt;/a>Download Step Options:
&lt;/h3>&lt;p>这部分是依赖下载相关的，下载又可以分url下载，git、svn、等等版本管理工具的下载&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>URL&lt;/code>：没什么好说的，就是下载依赖包我网址&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>URL_HASH&lt;/code>：对下载的文件做校验，必须要指定校验的算法，比如 &lt;code>SHA1=0cf3c3d176a2134dec9702c64abb13da593aea0c&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>URL_MD5&lt;/code>：使用md5对文件校验&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>DOWNLOAD_NAME&lt;/code>：下载的文件名&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>TIMEOUT&lt;/code>：下载的超时时间&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>GIT_REPOSITORY&lt;/code>：拉取代码的git仓库的url地址&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>GIT_TAG&lt;/code>：拉取代码的tag&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>还有一些就不一一列举了&lt;/p>
&lt;h3 id="configure-step-options">&lt;a href="#configure-step-options" class="header-anchor">&lt;/a>&lt;strong>Configure Step Options:&lt;/strong>
&lt;/h3>&lt;p>编译前的准备步骤，比如生成&lt;code>MakeFile&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>CONFIGURE_COMMAND&lt;/code>： 通过&lt;code>autoconf&lt;/code>生成MakeFile文件&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>CMAKE_COMMAND&lt;/code>：使用&lt;code>CMakeList.txt&lt;/code>生成MakeFile文件&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>CMAKE_ARGS&lt;/code>：cmake的参数&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="build-step-options">&lt;a href="#build-step-options" class="header-anchor">&lt;/a>&lt;strong>Build Step Options:&lt;/strong>
&lt;/h3>&lt;p>编译相关的参数&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>BUILD_COMMAND&lt;/code>：编译命令&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>BUILD_IN_SOURCE&lt;/code>：是否在源代码目录进行编译，一般来说这个不用指定即可&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>BUILD_ALWAYS&lt;/code>：启用此选项将强制始终运行构建步骤。这可能是最简单的方法，可以可靠地确保评估外部项目自己的构建依赖关系，而不是依赖于默认的基于成功时间戳的方法。一般也不用设置&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>后面的一些不太常用，就不列举了。有需要还是看&lt;a class="link" href="https://cmake.org/cmake/help/latest/module/ExternalProject.html" target="_blank" rel="noopener"
>官方文档&lt;/a>&lt;/p>
&lt;h3 id="在pika中的使用">&lt;a href="#%e5%9c%a8pika%e4%b8%ad%e7%9a%84%e4%bd%bf%e7%94%a8" class="header-anchor">&lt;/a>在pika中的使用
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cmake" data-lang="cmake">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">ExternalProject_Add&lt;/span>(&lt;span style="color:#f1fa8c">gflags&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">URL&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">https://github.com/gflags/gflags/archive/refs/tags/v2.2.2.tar.gz&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">URL_HASH&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">MD5=1a865b93bacfa963201af3f75b7bd64c&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">DOWNLOAD_NO_PROGRESS&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">UPDATE_COMMAND&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">LOG_CONFIGURE&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">LOG_BUILD&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">LOG_INSTALL&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">BUILD_ALWAYS&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">CMAKE_ARGS&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">-DCMAKE_INSTALL_PREFIX=&lt;/span>&lt;span style="color:#ff79c6">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">STAGED_INSTALL_PREFIX&lt;/span>&lt;span style="color:#ff79c6">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">-DCMAKE_BUILD_TYPE=&lt;/span>&lt;span style="color:#ff79c6">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">LIB_BUILD_TYPE&lt;/span>&lt;span style="color:#ff79c6">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">-DGFLAGS_NAMESPACE=gflags&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">-DBUILD_STATIC_LIBS=ON&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">-DBUILD_SHARED_LIBS=OFF&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">BUILD_COMMAND&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">make&lt;/span> &lt;span style="color:#f1fa8c">-j&lt;/span>&lt;span style="color:#ff79c6">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">CPU_CORE&lt;/span>&lt;span style="color:#ff79c6">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26&lt;/span>&lt;span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>就是一些很常规的使用&lt;/p>
&lt;h2 id="总结">&lt;a href="#%e6%80%bb%e7%bb%93" class="header-anchor">&lt;/a>总结
&lt;/h2>&lt;p>cmake功能还是非常强大，但是同样的，使用也是想对复杂的，而且也没有相对好的中文文档，要用好还是有一定学习门槛的。但是用好cmake 可以很大程度上减轻一些工作量的。&lt;/p>
&lt;p>pika在改用cmake的过程中我也提交过几个简单的PR，也是一次很好的学习过程，先记录这些吧，后面想起来再补充。&lt;/p></description></item><item><title>linux下通过rpath解决cmake动态编译后找不到动态链接库问题</title><link>https://lqxhub.github.io/posts/497a7ebf/</link><pubDate>Sat, 13 Mar 2021 17:48:50 +0000</pubDate><guid>https://lqxhub.github.io/posts/497a7ebf/</guid><description>&lt;p>这次书接上回，前段时间写了一篇《使用cmake构建C/C++项目和动态库》的文章， &lt;a class="link" href="https://lqxhub.github.io/posts/a20c5e48/" >传送门&lt;/a>。
但是直接通过cmake编译链接后，会有一个问题，那就是需要的.so文件不能更改目录，一旦.so文件目录变了,整个程序就没法运行了，这肯定是不行的。&lt;/p>
&lt;h2 id="原因">&lt;a href="#%e5%8e%9f%e5%9b%a0" class="header-anchor">&lt;/a>原因
&lt;/h2>&lt;p>后来我查一下一下，linux系统中，程序加载运行需要的.so文件是有顺序的&lt;/p>
&lt;ol>
&lt;li>环境变量LD_LIBRARY_PATH指定的路径&lt;/li>
&lt;li>gcc 编译时指定的运行时库路径-rpath&lt;/li>
&lt;li>ldconfig 配置文件ld.so.conf指定的路径&lt;/li>
&lt;li>系统默认库位置 /lib, /usr/lib&lt;/li>
&lt;/ol>
&lt;p>如果没有指定so的位置，gcc会自动把当前so所在的目录作为so的连接目录。知道原因了，问题就好解决了&lt;/p>
&lt;h2 id="解决办法">&lt;a href="#%e8%a7%a3%e5%86%b3%e5%8a%9e%e6%b3%95" class="header-anchor">&lt;/a>解决办法
&lt;/h2>&lt;p>先看一下现在的 &lt;strong>CMakeLists.txt&lt;/strong>文件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cmake" data-lang="cmake">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">cmake_minimum_required&lt;/span>(&lt;span style="color:#f1fa8c">VERSION&lt;/span> &lt;span style="color:#f1fa8c">3.13.3&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">project&lt;/span>(&lt;span style="color:#f1fa8c">project1&lt;/span> &lt;span style="color:#f1fa8c">C&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">set&lt;/span>(&lt;span style="color:#f1fa8c">CMAKE_C_STANDARD&lt;/span> &lt;span style="color:#f1fa8c">99&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">add_library&lt;/span>(&lt;span style="color:#f1fa8c">shared&lt;/span> &lt;span style="color:#f1fa8c">SHARED&lt;/span> &lt;span style="color:#f1fa8c">library.h&lt;/span> &lt;span style="color:#f1fa8c">library.c&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">set&lt;/span>(&lt;span style="color:#f1fa8c">LIBRARY_OUTPUT_PATH&lt;/span> &lt;span style="color:#ff79c6">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">PROJECT_SOURCE_DIR&lt;/span>&lt;span style="color:#ff79c6">}&lt;/span>&lt;span style="color:#f1fa8c">/lib&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">add_executable&lt;/span>(&lt;span style="color:#f1fa8c">project1&lt;/span> &lt;span style="color:#f1fa8c">main.c&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">target_link_libraries&lt;/span>(&lt;span style="color:#f1fa8c">project1&lt;/span> &lt;span style="color:#f1fa8c">shared&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我实验了两种办法，一是把.so 文件放到&lt;code>/lib&lt;/code> 或者 &lt;code>/usr/lib&lt;/code>中，这也是在安装很多软件时的做法，当使用包管理器安装软件时，需要的.so文件大多是安装到这两个目录下。在一种就是在编译时指定 &lt;code>rpath&lt;/code>的目录，使用相对目录，这样在复制文件的时候，把.so一起复制就可以了。&lt;/p>
&lt;h3 id="先用最简单的办法把so目录放到系统目录下">&lt;a href="#%e5%85%88%e7%94%a8%e6%9c%80%e7%ae%80%e5%8d%95%e7%9a%84%e5%8a%9e%e6%b3%95%e6%8a%8aso%e7%9b%ae%e5%bd%95%e6%94%be%e5%88%b0%e7%b3%bb%e7%bb%9f%e7%9b%ae%e5%bd%95%e4%b8%8b" class="header-anchor">&lt;/a>先用最简单的办法，把so目录放到系统目录下
&lt;/h3>&lt;p>
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-243a1ebb13296817.webp">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-243a1ebb13296817.webp" alt="" />
&lt;/a>
&lt;/div>
&lt;/p>
&lt;p>现在的目录结构如下，程序依赖的&lt;strong>libshared.so&lt;/strong> 在 &lt;strong>lib&lt;/strong> 目录下，现在把 &lt;strong>libshared.so&lt;/strong> 复制到 &lt;strong>/lib&lt;/strong> 目录下。这里有个要注意的地方，复制完后要执行 &lt;code>ldconfig&lt;/code> 命令，重新生成缓存，要不然程序依然找不到对应的.so文件
命令如下&lt;/p>
&lt;ol>
&lt;li>&lt;code>sudo mv lib/libshared.so /lib&lt;/code>&lt;/li>
&lt;li>&lt;code>sudo ldconfig &lt;/code>&lt;/li>
&lt;/ol>
&lt;p>这时候在运行 &lt;strong>project1&lt;/strong> 不会报错&lt;/p>
&lt;h3 id="编译时指定-rpath目录">&lt;a href="#%e7%bc%96%e8%af%91%e6%97%b6%e6%8c%87%e5%ae%9a-rpath%e7%9b%ae%e5%bd%95" class="header-anchor">&lt;/a>编译时指定 rpath目录
&lt;/h3>&lt;p>设置 &lt;strong>rpaht&lt;/strong> 有两种方式&lt;/p>
&lt;p>方式1&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cmake" data-lang="cmake">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">set&lt;/span>(&lt;span style="color:#f1fa8c">CMAKE_SKIP_BUILD_RPATH&lt;/span> &lt;span style="color:#f1fa8c">FALSE&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">set&lt;/span>(&lt;span style="color:#f1fa8c">CMAKE_BUILD_WITH_INSTALL_RPATH&lt;/span> &lt;span style="color:#f1fa8c">TRUE&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">set&lt;/span>(&lt;span style="color:#f1fa8c">CMAKE_INSTALL_RPATH&lt;/span> $&lt;span style="color:#f1fa8c">ORIGIN&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过修改编译后的 install 路径, 让程序在运行时通过程序的相对目录加载.so文件，其中 &lt;strong>$ORIGIN&lt;/strong> 变量是程序的当前目录&lt;/p>
&lt;p>方式2&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cmake" data-lang="cmake">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">set_target_properties&lt;/span>(&lt;span style="color:#f1fa8c">project1&lt;/span> &lt;span style="color:#f1fa8c">PROPERTIES&lt;/span> &lt;span style="color:#f1fa8c">LINK_FLAGS&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;-Wl,-rpath,./&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>方式2更粗暴，直接设置gcc的编译参数，指定&lt;strong>rpaht&lt;/strong> 是当前目录&lt;/p>
&lt;p>修改 &lt;strong>CMakeLists.txt&lt;/strong>文件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cmake" data-lang="cmake">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">cmake_minimum_required&lt;/span>(&lt;span style="color:#f1fa8c">VERSION&lt;/span> &lt;span style="color:#f1fa8c">3.13.3&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">project&lt;/span>(&lt;span style="color:#f1fa8c">project1&lt;/span> &lt;span style="color:#f1fa8c">C&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">set&lt;/span>(&lt;span style="color:#f1fa8c">CMAKE_C_STANDARD&lt;/span> &lt;span style="color:#f1fa8c">99&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">add_library&lt;/span>(&lt;span style="color:#f1fa8c">shared&lt;/span> &lt;span style="color:#f1fa8c">SHARED&lt;/span> &lt;span style="color:#f1fa8c">library.h&lt;/span> &lt;span style="color:#f1fa8c">library.c&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">set&lt;/span>(&lt;span style="color:#f1fa8c">LIBRARY_OUTPUT_PATH&lt;/span> &lt;span style="color:#ff79c6">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">PROJECT_SOURCE_DIR&lt;/span>&lt;span style="color:#ff79c6">}&lt;/span>&lt;span style="color:#f1fa8c">/lib&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span>&lt;span style="color:#6272a4">#方式1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">set&lt;/span>(&lt;span style="color:#f1fa8c">CMAKE_SKIP_BUILD_RPATH&lt;/span> &lt;span style="color:#f1fa8c">FALSE&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">set&lt;/span>(&lt;span style="color:#f1fa8c">CMAKE_BUILD_WITH_INSTALL_RPATH&lt;/span> &lt;span style="color:#f1fa8c">TRUE&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">set&lt;/span>(&lt;span style="color:#f1fa8c">CMAKE_INSTALL_RPATH&lt;/span> $&lt;span style="color:#f1fa8c">ORIGIN&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">add_executable&lt;/span>(&lt;span style="color:#f1fa8c">project1&lt;/span> &lt;span style="color:#f1fa8c">main.c&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span>&lt;span style="color:#6272a4">#方式2
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span>&lt;span style="color:#6272a4">#set_target_properties(project1 PROPERTIES LINK_FLAGS &amp;#34;-Wl,-rpath,./&amp;#34;)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">target_link_libraries&lt;/span>(&lt;span style="color:#f1fa8c">project1&lt;/span> &lt;span style="color:#f1fa8c">shared&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>重新生成 &lt;strong>MakeFile&lt;/strong> 文件, 然后编译&lt;/p>
&lt;p>编译生成的 &lt;strong>libshared.so&lt;/strong> 还是在 &lt;strong>lib&lt;/strong>目录下，先移动到可执行文件的同级目录下
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-74af9cfab32e95a7.webp">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-74af9cfab32e95a7.webp" alt="" />
&lt;/a>
&lt;/div>
&lt;/p>
&lt;p>最终目录如图，现在无论怎么复制文件，只要可执行文件和动态库在一个目录下，都以运行了&lt;/p>
&lt;h2 id="总结">&lt;a href="#%e6%80%bb%e7%bb%93" class="header-anchor">&lt;/a>总结
&lt;/h2>&lt;p>解决linux下 动态编译的程序找不到动态库的问题，有多种解决办法，这次用了两种&lt;/p>
&lt;ol>
&lt;li>把需要的.so文件放到 &lt;strong>/lib&lt;/strong> 或者 &lt;strong>/usr/lib&lt;/strong> 下， 然后执行 &lt;code> ldconfig&lt;/code>命令&lt;/li>
&lt;li>通过指定 &lt;strong>rpath&lt;/strong> 来决定加载 .so的目录&lt;/li>
&lt;/ol></description></item><item><title>使用cmake构建C/C++项目和动态库</title><link>https://lqxhub.github.io/posts/a20c5e48/</link><pubDate>Sat, 13 Mar 2021 17:45:45 +0000</pubDate><guid>https://lqxhub.github.io/posts/a20c5e48/</guid><description>&lt;p>编译C/C++文件时，很多时候都是直接使用像 &lt;code>gcc main.c&lt;/code> 或者 &lt;code>g++ main.cpp&lt;/code> 这样的命令编译的。但是代码文件多了后，这样编译就很困难了。这时候 就出现了&lt;code>MakeFile&lt;/code> 这个工具。&lt;/p>
&lt;p>MakeFile 解决了多个文件编译难的问题，有了MakeFile，只需要在MakeFile的目录中 运行一下&lt;code>make&lt;/code> 命令， 编译就会自动完成。但是编写MakeFile又很啰嗦，于是聪明的程序员们有开发了一个工具，自动生成MakeFile 文件，&lt;code>cmake&lt;/code> 的作用就是自动生成MakeFile。毕竟写cmake要比写MakeFile要简单很多&lt;/p>
&lt;p>也许你会说，现在都是用IDE写代码，IDE都会自动自动编译和运行，我还学这些干啥。但是有时候需要服务器上编译项目，或者在没有IDE的机器上编译项目，这时候MakeFile就很有用了。其实很多IDE也是使用cmake完成编译的，比如 &lt;strong>clion&lt;/strong>&lt;/p>
&lt;h2 id="cmake-安装">&lt;a href="#cmake-%e5%ae%89%e8%a3%85" class="header-anchor">&lt;/a>cmake 安装
&lt;/h2>&lt;p>在linux上可以使用源码安装和包管理安装，一般直接用包管理安装就好了
Ubuntu和Debian
&lt;code>sudo apt-get install cmake&lt;/code>&lt;/p>
&lt;p>CentOS
&lt;code>sudo yum install cmake&lt;/code>&lt;/p>
&lt;p>因为cmake只是生成MakeFile，最终组织编译的还是MakeFile，所以还有安装&lt;code>make&lt;/code>&lt;/p>
&lt;p>make 一般都会预装，为了保险，还是装一下&lt;/p>
&lt;p>Ubuntu和Debian
&lt;code>sudo apt-get install make&lt;/code>&lt;/p>
&lt;p>CentOS
&lt;code>sudo yum install make&lt;/code>&lt;/p>
&lt;h2 id="cmake基本规则">&lt;a href="#cmake%e5%9f%ba%e6%9c%ac%e8%a7%84%e5%88%99" class="header-anchor">&lt;/a>cmake基本规则
&lt;/h2>&lt;p>cmake 也没啥神秘的，本质上也是根据一定的规则自动生成MakeFile的，也是有语法的&lt;/p>
&lt;p>&lt;code>#&lt;/code> 是注释符号&lt;/p>
&lt;h3 id="预定义变量">&lt;a href="#%e9%a2%84%e5%ae%9a%e4%b9%89%e5%8f%98%e9%87%8f" class="header-anchor">&lt;/a>预定义变量
&lt;/h3>&lt;p>&lt;code>PROJECT_NAME&lt;/code>项目名称
&lt;code>PROJECT_SOURCE_DIR&lt;/code>工程的根目录
&lt;code>PROJECT_BINARY_DIR&lt;/code> 执行cmake命令的目录
&lt;code>PROJECT_BINARY_DIR&lt;/code> 执行cmake命令的目录
&lt;code>CMAKE_CURRENT_SOURCE_DIR &lt;/code>当前CMakeLists.txt文件所在目录
&lt;code>CMAKE_C_FLAGS&lt;/code>设置C编译选项
&lt;code>CMAKE_CXX_FLAGS&lt;/code>设置C++编译选项
&lt;code>CMAKE_C_COMPILER&lt;/code>设置C编译器
&lt;code>CMAKE_CXX_COMPILER&lt;/code>设置C++编译器
&lt;code>EXECUTABLE_OUTPUT_PATH&lt;/code>设置编译后可执行文件目录
&lt;code>LIBRARY_OUTPUT_PATH&lt;/code>设置生成的库文件目录&lt;/p>
&lt;h3 id="常用规则">&lt;a href="#%e5%b8%b8%e7%94%a8%e8%a7%84%e5%88%99" class="header-anchor">&lt;/a>常用规则
&lt;/h3>&lt;p>&lt;code>cmake_minimum_required(VERSION 3.16)&lt;/code> 指令cmake 版本
&lt;code>project(hello_world)&lt;/code> 设置工程名
&lt;code>include_directories(${PROJECT_SOURCE_DIR}/include)&lt;/code> 添加头文件路径
&lt;code>link_directories(${PROJECT_SOURCE_DIR}/lib)&lt;/code> 添加链接库的路径
&lt;code>add_subdirectory(module)&lt;/code>添加 module 子目录, 此目录下也要有CMakeLists.txt文件
&lt;code>add_executable(project1 main.c)&lt;/code>指定编译的可执行文件
&lt;code>add_library(lib1 SHARED library.c library.h)&lt;/code>指定生成的库文件，&lt;strong>SHARED&lt;/strong>是生成动态库，&lt;strong>STATIC&lt;/strong>后生成静态库
&lt;code>add_compile_options()&lt;/code> 添加编译选项
&lt;code>target_link_libraries()&lt;/code>指定动态链接库
&lt;code>install()&lt;/code>指定make install的目录&lt;/p>
&lt;p>&lt;code>set(XXXX YYYYYY)&lt;/code>用于设置和修改变量
&lt;code>${XXXX}&lt;/code> 使用变量&lt;/p>
&lt;h2 id="构建一个简单的项目">&lt;a href="#%e6%9e%84%e5%bb%ba%e4%b8%80%e4%b8%aa%e7%ae%80%e5%8d%95%e7%9a%84%e9%a1%b9%e7%9b%ae" class="header-anchor">&lt;/a>构建一个简单的项目
&lt;/h2>&lt;p>只有一个 &lt;code>main.c&lt;/code> 文件&lt;/p>
&lt;p>CMakeList.txt&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cmake" data-lang="cmake">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">cmake_minimum_required&lt;/span>(&lt;span style="color:#f1fa8c">VERSION&lt;/span> &lt;span style="color:#f1fa8c">3.15&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">project&lt;/span>(&lt;span style="color:#f1fa8c">project1&lt;/span> &lt;span style="color:#f1fa8c">C&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">set&lt;/span>(&lt;span style="color:#f1fa8c">CMAKE_C_STANDARD&lt;/span> &lt;span style="color:#f1fa8c">99&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">add_executable&lt;/span>(&lt;span style="color:#f1fa8c">project1&lt;/span> &lt;span style="color:#f1fa8c">main.c&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>main.c&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C" data-lang="C">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span>&lt;span style="color:#ff79c6">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4&lt;/span>&lt;span> &lt;span style="color:#50fa7b">printf&lt;/span>(&lt;span style="color:#f1fa8c">&amp;#34;Hello, CMakeList!&lt;/span>&lt;span style="color:#f1fa8c">\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="编译一个debug版本">&lt;a href="#%e7%bc%96%e8%af%91%e4%b8%80%e4%b8%aadebug%e7%89%88%e6%9c%ac" class="header-anchor">&lt;/a>编译一个debug版本
&lt;/h3>&lt;ol>
&lt;li>&lt;code>mkdir debug&lt;/code> 新建debug目录&lt;/li>
&lt;li>&lt;code>cd debug&lt;/code> 进入debug目录&lt;/li>
&lt;li>&lt;code>cmake -DCMAKE_BUILD_TYPR=debug ..&lt;/code> 指定编译模式为debug&lt;/li>
&lt;li>&lt;code>make&lt;/code> 生成可执行文件&lt;/li>
&lt;/ol>
&lt;p>此时会生成&lt;code>project1&lt;/code>文件&lt;/p>
&lt;p>步骤 3 中 &lt;code>cmake -DCMAKE_BUILD_TYPE=release ..&lt;/code> 指定编译模式为release&lt;/p>
&lt;h2 id="构建一个生成动态库的项目">&lt;a href="#%e6%9e%84%e5%bb%ba%e4%b8%80%e4%b8%aa%e7%94%9f%e6%88%90%e5%8a%a8%e6%80%81%e5%ba%93%e7%9a%84%e9%a1%b9%e7%9b%ae" class="header-anchor">&lt;/a>构建一个生成动态库的项目
&lt;/h2>&lt;p>有两个文件&lt;code>library.h&lt;/code>和&lt;code>library.c&lt;/code>
CMakeList.txt&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cmake" data-lang="cmake">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">cmake_minimum_required&lt;/span>(&lt;span style="color:#f1fa8c">VERSION&lt;/span> &lt;span style="color:#f1fa8c">3.15&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">project&lt;/span>(&lt;span style="color:#f1fa8c">shared&lt;/span> &lt;span style="color:#f1fa8c">C&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">set&lt;/span>(&lt;span style="color:#f1fa8c">CMAKE_C_STANDARD&lt;/span> &lt;span style="color:#f1fa8c">99&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">add_library&lt;/span>(&lt;span style="color:#f1fa8c">shared&lt;/span> &lt;span style="color:#f1fa8c">SHARED&lt;/span> &lt;span style="color:#f1fa8c">library.c&lt;/span> &lt;span style="color:#f1fa8c">library.h&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>library.h&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">add&lt;/span>(&lt;span style="color:#8be9fd">int&lt;/span> a, &lt;span style="color:#8be9fd">int&lt;/span> b);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>library.c&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">add&lt;/span>(&lt;span style="color:#8be9fd">int&lt;/span> a, &lt;span style="color:#8be9fd">int&lt;/span> b) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> a &lt;span style="color:#ff79c6">+&lt;/span> b;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="生成动态库">&lt;a href="#%e7%94%9f%e6%88%90%e5%8a%a8%e6%80%81%e5%ba%93" class="header-anchor">&lt;/a>生成动态库
&lt;/h3>&lt;ol>
&lt;li>&lt;code>mkdir lib&lt;/code> 新建lib目录&lt;/li>
&lt;li>&lt;code>cd lib&lt;/code> 进入lib目录&lt;/li>
&lt;li>&lt;code>cmake -DCMAKE_BUILD_TYPE=debug ..&lt;/code> 指定编译模式为debug&lt;/li>
&lt;li>&lt;code>make&lt;/code> 生成可执行文件
此时会生成 &lt;code>libshared.so&lt;/code>文件&lt;/li>
&lt;/ol>
&lt;h2 id="在第一个项目中使用动态库">&lt;a href="#%e5%9c%a8%e7%ac%ac%e4%b8%80%e4%b8%aa%e9%a1%b9%e7%9b%ae%e4%b8%ad%e4%bd%bf%e7%94%a8%e5%8a%a8%e6%80%81%e5%ba%93" class="header-anchor">&lt;/a>在第一个项目中使用动态库
&lt;/h2>&lt;p>首先把 &lt;code>libshared.so&lt;/code>文件和&lt;code>library.h&lt;/code>文件复制到第一个项目中&lt;/p>
&lt;p>修改 CMakeList.txt&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cmake" data-lang="cmake">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">cmake_minimum_required&lt;/span>(&lt;span style="color:#f1fa8c">VERSION&lt;/span> &lt;span style="color:#f1fa8c">3.15&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">project&lt;/span>(&lt;span style="color:#f1fa8c">project1&lt;/span> &lt;span style="color:#f1fa8c">C&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">set&lt;/span>(&lt;span style="color:#f1fa8c">CMAKE_C_STANDARD&lt;/span> &lt;span style="color:#f1fa8c">99&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">add_executable&lt;/span>(&lt;span style="color:#f1fa8c">project1&lt;/span> &lt;span style="color:#f1fa8c">main.c&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">target_link_libraries&lt;/span>(&lt;span style="color:#f1fa8c">project1&lt;/span> &lt;span style="color:#ff79c6">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">PROJECT_SOURCE_DIR&lt;/span>&lt;span style="color:#ff79c6">}&lt;/span>&lt;span style="color:#f1fa8c">/libshared.so&lt;/span>)&lt;span style="color:#6272a4">#指定动态库文件
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>&lt;code>mkdir debug&lt;/code> 新建debug目录&lt;/li>
&lt;li>&lt;code>cd debug&lt;/code> 进入debug目录&lt;/li>
&lt;li>&lt;code>cmake -DCMAKE_BUILD_TYPE=debug ..&lt;/code> 指定编译模式为debug&lt;/li>
&lt;li>&lt;code>make&lt;/code> 生成可执行文件&lt;/li>
&lt;/ol>
&lt;p>最终目录如图
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-74e036182d3b091d.webp">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-74e036182d3b091d.webp" alt="" />
&lt;/a>
&lt;/div>
&lt;/p>
&lt;h2 id="把两个项目合成一个">&lt;a href="#%e6%8a%8a%e4%b8%a4%e4%b8%aa%e9%a1%b9%e7%9b%ae%e5%90%88%e6%88%90%e4%b8%80%e4%b8%aa" class="header-anchor">&lt;/a>把两个项目合成一个
&lt;/h2>&lt;p>能不能在一个项目中生成动态库并在这个项目中使用呢，当然是可以的。&lt;/p>
&lt;p>也就是在这个项目中部分文件编译成动态库 .so 文件， 部分文件编译成 可执行文件&lt;/p>
&lt;p>修改 CMakeList.txt&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cmake" data-lang="cmake">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">cmake_minimum_required&lt;/span>(&lt;span style="color:#f1fa8c">VERSION&lt;/span> &lt;span style="color:#f1fa8c">3.13.3&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">project&lt;/span>(&lt;span style="color:#f1fa8c">project1&lt;/span> &lt;span style="color:#f1fa8c">C&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">set&lt;/span>(&lt;span style="color:#f1fa8c">CMAKE_C_STANDARD&lt;/span> &lt;span style="color:#f1fa8c">99&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">add_library&lt;/span>(&lt;span style="color:#f1fa8c">shared&lt;/span> &lt;span style="color:#f1fa8c">SHARED&lt;/span> &lt;span style="color:#f1fa8c">library.h&lt;/span> &lt;span style="color:#f1fa8c">library.c&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">set&lt;/span>(&lt;span style="color:#f1fa8c">LIBRARY_OUTPUT_PATH&lt;/span> &lt;span style="color:#ff79c6">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">PROJECT_SOURCE_DIR&lt;/span>&lt;span style="color:#ff79c6">}&lt;/span>&lt;span style="color:#f1fa8c">/lib&lt;/span>)&lt;span style="color:#6272a4">#设置动态库输出目录
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">add_executable&lt;/span>(&lt;span style="color:#f1fa8c">project1&lt;/span> &lt;span style="color:#f1fa8c">main.c&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">target_link_libraries&lt;/span>(&lt;span style="color:#f1fa8c">project1&lt;/span> &lt;span style="color:#f1fa8c">shared&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>&lt;code>mkdir debug&lt;/code> 新建debug目录&lt;/li>
&lt;li>&lt;code>cd debug&lt;/code> 进入debug目录&lt;/li>
&lt;li>&lt;code>cmake -DCMAKE_BUILD_TYPE=debug ..&lt;/code> 指定编译模式为debug&lt;/li>
&lt;li>&lt;code>make&lt;/code> 生成可执行文件&lt;/li>
&lt;/ol>
&lt;p>最终目录如图&lt;/p>
&lt;p>
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-ef708a45de2bc055.webp">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-ef708a45de2bc055.webp" alt="" />
&lt;/a>
&lt;/div>
&lt;/p>
&lt;h2 id="最后">&lt;a href="#%e6%9c%80%e5%90%8e" class="header-anchor">&lt;/a>最后
&lt;/h2>&lt;p>通过几个简单的例子，介绍了一下cmake的基本使用，文中是使用cmake构建的C项目，换成C++基本没什么区别，就不展示了&lt;/p>
&lt;p>cmake的功能远不止这些，还需要在实战中多学习，多总结&lt;/p>
&lt;p>&lt;strong>2021-03-06 补充&lt;/strong>
通过上面的方式可以编译运行，但是会有一个问题，就是 &lt;strong>.so&lt;/strong> 文件不能更改目录，一旦动态库目录变了，程序就没法加载，程序也就没法运行了。为此又找资料学习一番，另写了一篇，{% post_link linux下cmake动态编译后找不到动态链接库 [传送门] %}&lt;/p></description></item></channel></rss>