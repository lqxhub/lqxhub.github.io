<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>linux on QX 的笔记</title><link>https://lqxhub.github.io/categories/linux/</link><description>Recent content in linux on QX 的笔记</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sun, 20 Oct 2024 17:31:37 +0800</lastBuildDate><atom:link href="https://lqxhub.github.io/categories/linux/index.xml" rel="self" type="application/rss+xml"/><item><title>Linux下使用iouring实现一个tcp服务</title><link>https://lqxhub.github.io/posts/f0e9829c/</link><pubDate>Sun, 20 Oct 2024 17:31:37 +0800</pubDate><guid>https://lqxhub.github.io/posts/f0e9829c/</guid><description>&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/6a84474a44a97bccecbbc9c5a3b9f7aea2571c97.jpg" alt="Featured image of post Linux下使用iouring实现一个tcp服务" />&lt;p>今年一直没怎么写东西，看了一下上一篇文章，都过去半年了。前段时间一直想写一点redis的东西，但是一直没有时间去研读源码，所以就一直没有写。
最近有时间，看了一点 &lt;strong>iouring&lt;/strong> 的东西，就写了一篇文章，介绍了一下 &lt;strong>iouring&lt;/strong> 的基本使用，实现了一个简单的TCP server&lt;/p>
&lt;p>很早就听说过 &lt;strong>iouring&lt;/strong> ，但是一直没有时间学习。最近有时间就找了一些资料，学习了一下，写了一个简单的例子，实现了一个简单的tcp服务。&lt;/p>
&lt;p>这篇文章主要介绍了如何使用 &lt;strong>iouring&lt;/strong> 实现一个简单的 &lt;strong>tcp&lt;/strong> 服务，只是介绍了iouring的基本使用，没有涉及底层实现。
后面有时间再去学一下 &lt;strong>liburing&lt;/strong> 的源码，看看底层是如何实现的。&lt;/p>
&lt;p>先解释一下两个名词：&lt;strong>iouring&lt;/strong> 和 &lt;strong>liburing&lt;/strong>。
&lt;strong>iouring&lt;/strong> 是 &lt;strong>Linux&lt;/strong> 内核在 &lt;strong>5.1&lt;/strong> 版本引入的一个新的异步I/O接口。
&lt;strong>liburing&lt;/strong> 是 &lt;strong>iouring&lt;/strong> 的一个用户态库，封装了 &lt;strong>iouring&lt;/strong> 的接口，使得用户可以更方便的使用 &lt;strong>iouring&lt;/strong>。&lt;/p>
&lt;p>简单说就是 &lt;strong>io_uring&lt;/strong> 是linux内核的功能，对外提供了一套异步I/O的接口。因为直接使用 linux内核的 &lt;strong>io_uring&lt;/strong> 接口太麻烦了，
所以在就写了 &lt;strong>liburing&lt;/strong> 这个库，对内核的 &lt;strong>io_uring&lt;/strong> 封装，提供了一套更加友好的接口，使得用户可以更方便的使用 &lt;strong>io_uring&lt;/strong>。&lt;/p>
&lt;h2 id="什么是iouring">&lt;a href="#%e4%bb%80%e4%b9%88%e6%98%afiouring" class="header-anchor">&lt;/a>什么是iouring
&lt;/h2>&lt;p>io_uring是Linux内核在 &lt;strong>5.1&lt;/strong> 版本引入的一个新的异步I/O接口。
io_uring的目标是提供一个高效的、统一的异步I/O接口，以替代现有的异步I/O接口（如aio、epoll、eventfd等）。
io_uring的设计目标是提供一个简单的、高效的、统一的异步I/O接口，以便应用程序可以更容易地利用异步I/O的优势。&lt;/p>
&lt;p>虽然linux内核提供了很多异步I/O的接口，比如aio。
在linux上可以使用&lt;/p>
&lt;p>&lt;code>fcntl(sockfd, F_SETFL, fcntl(sockfd, F_GETFL, 0) | O_NONBLOCK);&lt;/code>&lt;/p>
&lt;p>来设置 &lt;strong>socket&lt;/strong> 为非阻塞模式，后续在读写 &lt;strong>socket&lt;/strong> 的 &lt;strong>fd&lt;/strong> 时，使用 &lt;code>read&lt;/code> 和 &lt;code>write&lt;/code> 函数 就是非阻塞的了。&lt;/p>
&lt;p>在调用 &lt;code>read&lt;/code> 和 &lt;code>write&lt;/code> 函数时，如果 &lt;strong>fd&lt;/strong> 没有数据，或者 &lt;strong>fd&lt;/strong> 的缓冲区满了，那么 &lt;code>read&lt;/code> 和 &lt;code>write&lt;/code> 函数会立即返回，
不会阻塞&lt;/p>
&lt;p>但是这种方式有一个问题，就是 &lt;strong>read&lt;/strong> 和 &lt;strong>write&lt;/strong> 函数的调用是阻塞的，虽然 &lt;strong>read&lt;/strong> 和 &lt;strong>write&lt;/strong> 函数会立即返回，但是 &lt;strong>read&lt;/strong> 和 &lt;strong>write&lt;/strong> 函数的调用是阻塞的，会占用 &lt;strong>CPU&lt;/strong> 的资源。&lt;/p>
&lt;p>因为之前的异步I/O接口不够好用，所以 &lt;strong>io_uring&lt;/strong> 就诞生了。&lt;/p>
&lt;p>&lt;strong>io_uring&lt;/strong> 的设计目标是提供一个简单的、高效的、统一的异步I/O接口，以便应用程序可以更容易地利用异步I/O的优势。
现在的 &lt;strong>io_uring&lt;/strong> 支持 &lt;strong>文件 I/O&lt;/strong>、&lt;strong>网络 I/O&lt;/strong>、&lt;strong>定时器&lt;/strong>、&lt;strong>信号&lt;/strong> 等。真正的统一了 &lt;strong>I/O&lt;/strong> 异步操作。&lt;/p>
&lt;p>说到异步I/O，就不得不提一下 &lt;strong>epoll&lt;/strong>。 &lt;strong>epoll&lt;/strong> 是 &lt;strong>Linux&lt;/strong> 内核提供的一种 &lt;strong>I/O&lt;/strong> 多路复用机制，可以同时监控多个 &lt;strong>fd&lt;/strong> 的 &lt;strong>I/O&lt;/strong> 事件。
&lt;strong>epoll&lt;/strong> 只是这个 多路复用机制，只是用来监控 &lt;strong>fd&lt;/strong> 的 &lt;strong>I/O&lt;/strong> 事件，当 &lt;strong>fd&lt;/strong> 有 &lt;strong>I/O&lt;/strong> 事件时（fd 可以被读写时）， &lt;strong>epoll&lt;/strong> 会通知应用程序。
真正的 &lt;strong>I/O&lt;/strong> 操作还是由 &lt;strong>read&lt;/strong> 和 &lt;strong>write&lt;/strong> 函数来完成的。
所以说 &lt;strong>epoll&lt;/strong> 并不是异步 &lt;strong>I/O&lt;/strong>，只是 &lt;strong>I/O&lt;/strong> 多路复用机制。&lt;/p>
&lt;h2 id="io_uring的基础概念">&lt;a href="#io_uring%e7%9a%84%e5%9f%ba%e7%a1%80%e6%a6%82%e5%bf%b5" class="header-anchor">&lt;/a>io_uring的基础概念
&lt;/h2>&lt;p>&lt;strong>io_uring&lt;/strong> 有两个重要的概念：&lt;strong>Submission Queue&lt;/strong> 和 &lt;strong>Completion Queue&lt;/strong>。 简称 &lt;strong>sq&lt;/strong> 和 &lt;strong>cq&lt;/strong>。&lt;/p>
&lt;p>&lt;strong>Submission Queue&lt;/strong> 是 &lt;strong>io_uring&lt;/strong> 的提交队列，用来提交 &lt;strong>I/O&lt;/strong> 请求。&lt;/p>
&lt;p>&lt;strong>Completion Queue&lt;/strong> 是 &lt;strong>io_uring&lt;/strong> 的完成队列，用来存放 &lt;strong>I/O&lt;/strong> 请求的完成状态。&lt;/p>
&lt;p>和 &lt;strong>sq&lt;/strong> 和 &lt;strong>cq&lt;/strong> 相对应的是 &lt;strong>sqe&lt;/strong> 和 &lt;strong>cqe&lt;/strong>。&lt;/p>
&lt;p>&lt;strong>sqe&lt;/strong> 是 &lt;strong>Submission Queue&lt;/strong> 的元素，用来描述一个 &lt;strong>I/O&lt;/strong> 请求。&lt;/p>
&lt;p>&lt;strong>cqe&lt;/strong> 是 &lt;strong>Completion Queue&lt;/strong> 的元素，用来描述一个 &lt;strong>I/O&lt;/strong> 请求的完成状态。&lt;/p>
&lt;p>放一张iouring的工作流程图：&lt;/p>
&lt;p>
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/359587e330204f8a868cf77c92197a417877ae15.png">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/359587e330204f8a868cf77c92197a417877ae15.png" alt="" />
&lt;/a>
&lt;/div>
&lt;/p>
&lt;p>io_uring中非常重要的两个数据结构 &lt;strong>sq&lt;/strong> 和 &lt;strong>cq&lt;/strong>。是用户空间和内核空间之间的通信桥梁。&lt;/p>
&lt;p>&lt;strong>io_uring&lt;/strong> 的工作流程如下：&lt;/p>
&lt;ol>
&lt;li>应用程序向 &lt;strong>Submission Queue&lt;/strong> 中提交 &lt;strong>I/O&lt;/strong> 请求。&lt;/li>
&lt;li>&lt;strong>io_uring&lt;/strong> 内核模块从 &lt;strong>Submission Queue&lt;/strong> 中取出 &lt;strong>I/O&lt;/strong> 请求，执行 &lt;strong>I/O&lt;/strong> 操作。&lt;/li>
&lt;li>&lt;strong>io_uring&lt;/strong> 内核模块将 &lt;strong>I/O&lt;/strong> 请求的完成状态写入 &lt;strong>Completion Queue&lt;/strong>。&lt;/li>
&lt;li>应用程序从 &lt;strong>Completion Queue&lt;/strong> 中读取 &lt;strong>I/O&lt;/strong> 请求的完成状态。&lt;/li>
&lt;li>应用程序处理 &lt;strong>I/O&lt;/strong> 请求的完成状态。&lt;/li>
&lt;/ol>
&lt;p>因为这次只是简单的介绍 &lt;strong>iouring&lt;/strong> 的基本使用，所以就不深入讲 &lt;strong>iouring&lt;/strong> 的原理了。&lt;/p>
&lt;h2 id="liburing的使用">&lt;a href="#liburing%e7%9a%84%e4%bd%bf%e7%94%a8" class="header-anchor">&lt;/a>liburing的使用
&lt;/h2>&lt;p>&lt;strong>liburing&lt;/strong> 是 &lt;strong>iouring&lt;/strong> 的一个用户态库，封装了 &lt;strong>iouring&lt;/strong> 的接口，使得用户可以更方便的使用 &lt;strong>iouring&lt;/strong>。&lt;/p>
&lt;p>liburing中封装了很多操作函数，这次也不会全部介绍，只介绍一些常用的函数。&lt;/p>
&lt;h3 id="liburing常用的函数">&lt;a href="#liburing%e5%b8%b8%e7%94%a8%e7%9a%84%e5%87%bd%e6%95%b0" class="header-anchor">&lt;/a>liburing常用的函数
&lt;/h3>&lt;h4 id="io_uring_queue_init">&lt;a href="#io_uring_queue_init" class="header-anchor">&lt;/a>io_uring_queue_init
&lt;/h4>&lt;p>初始化 &lt;strong>io_uring&lt;/strong> 对象。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">io_uring_queue_init&lt;/span>(&lt;span style="color:#8be9fd">unsigned&lt;/span> entries, &lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">io_uring&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>ring,&lt;span style="color:#8be9fd">unsigned&lt;/span> flags);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>有三个参数：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>entries&lt;/strong>： &lt;strong>Submission Queue&lt;/strong> 和 &lt;strong>Completion Queue&lt;/strong> 的大小。&lt;/li>
&lt;li>&lt;strong>ring&lt;/strong>： &lt;strong>io_uring&lt;/strong> 对象。&lt;/li>
&lt;li>&lt;strong>flags&lt;/strong>： 保留参数，传 &lt;strong>0&lt;/strong> 即可。&lt;/li>
&lt;/ol>
&lt;h4 id="io_uring_queue_exit">&lt;a href="#io_uring_queue_exit" class="header-anchor">&lt;/a>io_uring_queue_exit
&lt;/h4>&lt;p>销毁 &lt;strong>io_uring&lt;/strong> 对象。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">io_uring_queue_exit&lt;/span>(&lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">io_uring&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>ring);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>传入 &lt;strong>io_uring&lt;/strong> 对象即可。&lt;/p>
&lt;h4 id="io_uring_get_sqe">&lt;a href="#io_uring_get_sqe" class="header-anchor">&lt;/a>io_uring_get_sqe
&lt;/h4>&lt;p>获取 &lt;strong>Submission Queue&lt;/strong> 的元素。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">io_uring_sqe&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>&lt;span style="color:#50fa7b">io_uring_get_sqe&lt;/span>(&lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">io_uring&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>ring);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>传入 &lt;strong>io_uring&lt;/strong> 对象，返回一个 &lt;strong>sqe&lt;/strong> 对象，用来描述一个 &lt;strong>I/O&lt;/strong> 请求。&lt;/p>
&lt;h4 id="io_uring_submit">&lt;a href="#io_uring_submit" class="header-anchor">&lt;/a>io_uring_submit
&lt;/h4>&lt;p>提交 &lt;strong>I/O&lt;/strong> 请求。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">io_uring_submit&lt;/span>(&lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">io_uring&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>ring);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>传入 &lt;strong>io_uring&lt;/strong> 对象，提交 &lt;strong>I/O&lt;/strong> 请求。&lt;/p>
&lt;h4 id="io_uring_wait_cqe">&lt;a href="#io_uring_wait_cqe" class="header-anchor">&lt;/a>io_uring_wait_cqe
&lt;/h4>&lt;p>等待 &lt;strong>I/O&lt;/strong> 请求的完成状态。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">io_uring_wait_cqe&lt;/span>(&lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">io_uring&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>ring, &lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">io_uring_cqe&lt;/span> &lt;span style="color:#ff79c6">**&lt;/span>cqe_ptr);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>传入 &lt;strong>io_uring&lt;/strong> 对象，返回 &lt;strong>cqe&lt;/strong> 对象，用来描述一个 &lt;strong>I/O&lt;/strong> 请求的完成状态。&lt;/p>
&lt;h4 id="io_uring_submit_and_wait">&lt;a href="#io_uring_submit_and_wait" class="header-anchor">&lt;/a>io_uring_submit_and_wait
&lt;/h4>&lt;p>提交 &lt;strong>I/O&lt;/strong> 请求，并等待 &lt;strong>I/O&lt;/strong> 请求的完成状态。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">io_uring_submit_and_wait&lt;/span>(&lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">io_uring&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>ring, &lt;span style="color:#8be9fd">unsigned&lt;/span> wait_nr);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>传入 &lt;strong>io_uring&lt;/strong> 对象，提交 &lt;strong>I/O&lt;/strong> 请求，并等待 &lt;strong>I/O&lt;/strong> 请求的完成状态。&lt;/p>
&lt;p>可以看做是 &lt;strong>io_uring_submit&lt;/strong> 和 &lt;strong>io_uring_wait_cqe&lt;/strong> 的组合。&lt;/p>
&lt;h4 id="io_uring_prep_accept">&lt;a href="#io_uring_prep_accept" class="header-anchor">&lt;/a>io_uring_prep_accept
&lt;/h4>&lt;p>向 &lt;strong>Submission Queue&lt;/strong> 中添加一个 &lt;strong>accept&lt;/strong> 请求。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">io_uring_prep_accept&lt;/span>(&lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">io_uring_sqe&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>sqe, &lt;span style="color:#8be9fd">int&lt;/span> fd, &lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">sockaddr&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>addr, socklen_t &lt;span style="color:#ff79c6">*&lt;/span>addrlen, &lt;span style="color:#8be9fd">int&lt;/span> flags);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>有五个参数：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>sqe&lt;/strong>： &lt;strong>Submission Queue&lt;/strong> 的元素。&lt;/li>
&lt;li>&lt;strong>fd&lt;/strong>： &lt;strong>socket&lt;/strong> 的 &lt;strong>fd&lt;/strong>。&lt;/li>
&lt;li>&lt;strong>addr&lt;/strong>： &lt;strong>sockaddr&lt;/strong> 结构体。&lt;/li>
&lt;li>&lt;strong>addrlen&lt;/strong>： &lt;strong>sockaddr&lt;/strong> 结构体的长度。&lt;/li>
&lt;li>&lt;strong>flags&lt;/strong>： 保留参数，传 &lt;strong>0&lt;/strong> 即可。&lt;/li>
&lt;/ol>
&lt;h4 id="io_uring_prep_recv">&lt;a href="#io_uring_prep_recv" class="header-anchor">&lt;/a>io_uring_prep_recv
&lt;/h4>&lt;p>向 &lt;strong>Submission Queue&lt;/strong> 中添加一个 &lt;strong>recv&lt;/strong> 请求，也就是从fd中异步读取数据。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">io_uring_prep_recv&lt;/span>(&lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">io_uring_sqe&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>sqe, &lt;span style="color:#8be9fd">int&lt;/span> fd, &lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>buf, &lt;span style="color:#8be9fd">unsigned&lt;/span> nbytes, &lt;span style="color:#8be9fd">unsigned&lt;/span> flags);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>有五个参数：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>sqe&lt;/strong>： &lt;strong>Submission Queue&lt;/strong> 的元素。&lt;/li>
&lt;li>&lt;strong>fd&lt;/strong>： &lt;strong>socket&lt;/strong> 的 &lt;strong>fd&lt;/strong>。&lt;/li>
&lt;li>&lt;strong>buf&lt;/strong>： 接收数据的缓冲区,一般是 &lt;code>char&lt;/code> 数组的地址。&lt;/li>
&lt;li>&lt;strong>nbytes&lt;/strong>： 缓冲区的大小。&lt;/li>
&lt;li>&lt;strong>flags&lt;/strong>： 保留参数，传 &lt;strong>0&lt;/strong> 即可。&lt;/li>
&lt;/ol>
&lt;h4 id="io_uring_prep_send">&lt;a href="#io_uring_prep_send" class="header-anchor">&lt;/a>io_uring_prep_send
&lt;/h4>&lt;p>向 &lt;strong>Submission Queue&lt;/strong> 中添加一个 &lt;strong>send&lt;/strong> 请求，也就是向fd中异步写入数据。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">io_uring_prep_send&lt;/span>(&lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">io_uring_sqe&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>sqe, &lt;span style="color:#8be9fd">int&lt;/span> fd, &lt;span style="color:#ff79c6">const&lt;/span> &lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>buf, &lt;span style="color:#8be9fd">unsigned&lt;/span> nbytes, &lt;span style="color:#8be9fd">unsigned&lt;/span> flags);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>有五个参数：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>sqe&lt;/strong>： &lt;strong>Submission Queue&lt;/strong> 的元素。&lt;/li>
&lt;li>&lt;strong>fd&lt;/strong>： &lt;strong>socket&lt;/strong> 的 &lt;strong>fd&lt;/strong>。&lt;/li>
&lt;li>&lt;strong>buf&lt;/strong>： 发送数据的缓冲区，一般是 &lt;code>char&lt;/code> 指针的地址。&lt;/li>
&lt;li>&lt;strong>nbytes&lt;/strong>： 缓冲区的大小。&lt;/li>
&lt;li>&lt;strong>flags&lt;/strong>： 保留参数，传 &lt;strong>0&lt;/strong> 即可。&lt;/li>
&lt;/ol>
&lt;h4 id="io_uring_sqe_set_data">&lt;a href="#io_uring_sqe_set_data" class="header-anchor">&lt;/a>io_uring_sqe_set_data
&lt;/h4>&lt;p>设置 &lt;strong>sqe&lt;/strong> 的数据，把用户态的数据和内核绑定。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">io_uring_sqe_set_data&lt;/span>(&lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">io_uring_sqe&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>sqe, &lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>data);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>传入 &lt;strong>sqe&lt;/strong> 对象和用户态的数据，把用户态的数据和内核绑定。&lt;/p>
&lt;h4 id="io_uring_cqe_seen">&lt;a href="#io_uring_cqe_seen" class="header-anchor">&lt;/a>io_uring_cqe_seen
&lt;/h4>&lt;p>标记 &lt;strong>cqe&lt;/strong> 为已处理。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">io_uring_cqe_seen&lt;/span>(&lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">io_uring&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>ring, &lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">io_uring_cqe&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>cqe);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>传入 &lt;strong>io_uring&lt;/strong> 对象和 &lt;strong>cqe&lt;/strong> 对象，标记 &lt;strong>cqe&lt;/strong> 为已处理。&lt;/p>
&lt;h3 id="实现一个简单的tcp服务">&lt;a href="#%e5%ae%9e%e7%8e%b0%e4%b8%80%e4%b8%aa%e7%ae%80%e5%8d%95%e7%9a%84tcp%e6%9c%8d%e5%8a%a1" class="header-anchor">&lt;/a>实现一个简单的tcp服务
&lt;/h3>&lt;p>&lt;strong>io_uring&lt;/strong> 只能在 &lt;strong>linux&lt;/strong> 内核 &lt;strong>5.1&lt;/strong> 以上版本使用，所以在使用io_uring之前，需要先检查一下内核版本。
一般最新的 &lt;strong>ubuntu&lt;/strong> 和 &lt;strong>Debian&lt;/strong> 都是支持 &lt;strong>io_uring&lt;/strong> 的。&lt;/p>
&lt;p>使用 &lt;strong>liburing&lt;/strong> 需要安装 &lt;strong>liburing&lt;/strong> 库。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>sudo apt-get install liburing-dev
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>下面是一个简单的 &lt;strong>tcp&lt;/strong> 服务，功能是接收客户端的连接，然后向客户端发送一条消息。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>&lt;span style="color:#ff79c6">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;liburing.h&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;netinet/in.h&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;map&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span>&lt;span style="color:#ff79c6">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span>&lt;span style="color:#ff79c6">const&lt;/span> &lt;span style="color:#8be9fd">int&lt;/span> QUEUE_DEPTH &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">128&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span>&lt;span style="color:#ff79c6">const&lt;/span> &lt;span style="color:#8be9fd">int&lt;/span> BUFFER_SIZE &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">4096&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 10&lt;/span>&lt;span>&lt;span style="color:#ff79c6">enum&lt;/span> &lt;span style="color:#50fa7b">ConnectionType&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 11&lt;/span>&lt;span> ACCEPT,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 12&lt;/span>&lt;span> READ,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 13&lt;/span>&lt;span> WRITE,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 14&lt;/span>&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 15&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 16&lt;/span>&lt;span>&lt;span style="color:#ff79c6">struct&lt;/span> &lt;span style="color:#50fa7b">Connection&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 17&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> fd;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 18&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> type{};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 19&lt;/span>&lt;span> &lt;span style="color:#8be9fd">char&lt;/span> readBuf[BUFFER_SIZE]{};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 20&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>string writeBuf;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 21&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 22&lt;/span>&lt;span> &lt;span style="color:#ff79c6">explicit&lt;/span> &lt;span style="color:#50fa7b">Connection&lt;/span>(&lt;span style="color:#8be9fd">int&lt;/span> _fd) { fd &lt;span style="color:#ff79c6">=&lt;/span> _fd; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 23&lt;/span>&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 24&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 25&lt;/span>&lt;span>std&lt;span style="color:#ff79c6">::&lt;/span>map&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>&lt;span style="color:#8be9fd">int&lt;/span>, Connection &lt;span style="color:#ff79c6">*&amp;gt;&lt;/span> connections;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 26&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 27&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">createListener&lt;/span>(sockaddr_in &lt;span style="color:#ff79c6">*&lt;/span>addr) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 28&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> listener &lt;span style="color:#ff79c6">=&lt;/span> socket(AF_INET, SOCK_STREAM, &lt;span style="color:#bd93f9">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 29&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (listener &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 30&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cerr &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;socket failed errno:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> errno &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 31&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 32&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 33&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 34&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> opt &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 35&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (setsockopt(listener, SOL_SOCKET, SO_REUSEADDR, &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>opt, &lt;span style="color:#ff79c6">sizeof&lt;/span>(opt)) &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 36&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cerr &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;setsockopt failed errno:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> errno &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 37&lt;/span>&lt;span> close(listener);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 38&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 39&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 40&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 41&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (bind(listener, &lt;span style="color:#ff79c6">reinterpret_cast&lt;/span>&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>sockaddr &lt;span style="color:#ff79c6">*&amp;gt;&lt;/span>(addr), &lt;span style="color:#ff79c6">sizeof&lt;/span>(&lt;span style="color:#ff79c6">*&lt;/span>addr)) &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 42&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cerr &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;bind failed errno:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> errno &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 43&lt;/span>&lt;span> close(listener);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 44&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 45&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 46&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 47&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (listen(listener, &lt;span style="color:#bd93f9">10&lt;/span>) &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 48&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cerr &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;listen failed errno:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> errno &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 49&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 50&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 51&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 52&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> listener;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 53&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 54&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 55&lt;/span>&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">acceptConnection&lt;/span>(io_uring &lt;span style="color:#ff79c6">*&lt;/span>ring, Connection &lt;span style="color:#ff79c6">*&lt;/span>conn, sockaddr &lt;span style="color:#ff79c6">*&lt;/span>addr, socklen_t &lt;span style="color:#ff79c6">*&lt;/span>clientLen) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 56&lt;/span>&lt;span> conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>type &lt;span style="color:#ff79c6">=&lt;/span> ACCEPT;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 57&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> sqe &lt;span style="color:#ff79c6">=&lt;/span> io_uring_get_sqe(ring);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 58&lt;/span>&lt;span> io_uring_prep_accept(sqe, conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>fd, addr, clientLen, &lt;span style="color:#bd93f9">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 59&lt;/span>&lt;span> io_uring_sqe_set_data(sqe, conn);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 60&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 61&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 62&lt;/span>&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">addSocketRead&lt;/span>(io_uring &lt;span style="color:#ff79c6">*&lt;/span>ring, Connection &lt;span style="color:#ff79c6">*&lt;/span>conn) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 63&lt;/span>&lt;span> conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>type &lt;span style="color:#ff79c6">=&lt;/span> READ;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 64&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> sqe &lt;span style="color:#ff79c6">=&lt;/span> io_uring_get_sqe(ring);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 65&lt;/span>&lt;span> io_uring_prep_recv(sqe, conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>fd, &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>readBuf, BUFFER_SIZE, &lt;span style="color:#bd93f9">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 66&lt;/span>&lt;span> io_uring_sqe_set_data(sqe, conn);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 67&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 68&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 69&lt;/span>&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">addSocketWrite&lt;/span>(io_uring &lt;span style="color:#ff79c6">*&lt;/span>ring, Connection &lt;span style="color:#ff79c6">*&lt;/span>conn) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 70&lt;/span>&lt;span> conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>type &lt;span style="color:#ff79c6">=&lt;/span> WRITE;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 71&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> sqe &lt;span style="color:#ff79c6">=&lt;/span> io_uring_get_sqe(ring);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 72&lt;/span>&lt;span> io_uring_prep_send(sqe, conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>fd, conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>writeBuf.data(), conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>writeBuf.size(), &lt;span style="color:#bd93f9">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 73&lt;/span>&lt;span> io_uring_sqe_set_data(sqe, conn);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 74&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 75&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 76&lt;/span>&lt;span>Connection &lt;span style="color:#ff79c6">*&lt;/span>&lt;span style="color:#50fa7b">newConn&lt;/span>(io_uring &lt;span style="color:#ff79c6">*&lt;/span>ring, &lt;span style="color:#8be9fd">int&lt;/span> fd) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 77&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> conn &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">new&lt;/span> Connection(fd);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 78&lt;/span>&lt;span> connections[fd] &lt;span style="color:#ff79c6">=&lt;/span> conn;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 79&lt;/span>&lt;span> addSocketRead(ring, conn);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 80&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> conn;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 81&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 82&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 83&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">uringRun&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 84&lt;/span>&lt;span> sockaddr_in addr{};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 85&lt;/span>&lt;span> addr.sin_family &lt;span style="color:#ff79c6">=&lt;/span> AF_INET;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 86&lt;/span>&lt;span> addr.sin_port &lt;span style="color:#ff79c6">=&lt;/span> htons(&lt;span style="color:#bd93f9">8088&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 87&lt;/span>&lt;span> addr.sin_addr.s_addr &lt;span style="color:#ff79c6">=&lt;/span> INADDR_ANY;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 88&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 89&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> listenFd &lt;span style="color:#ff79c6">=&lt;/span> createListener(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>addr);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 90&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (listenFd &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 91&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 92&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 93&lt;/span>&lt;span> socklen_t clientLen &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">sizeof&lt;/span>(addr);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 94&lt;/span>&lt;span> io_uring ring{};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 95&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (io_uring_queue_init(QUEUE_DEPTH, &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>ring, &lt;span style="color:#bd93f9">0&lt;/span>) &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 96&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cerr &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;io_uring_queue_init failed errno:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> errno &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 97&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 98&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 99&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> lConn &lt;span style="color:#ff79c6">=&lt;/span> newConn(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>ring, listenFd);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">100&lt;/span>&lt;span> acceptConnection(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>ring, lConn, &lt;span style="color:#ff79c6">reinterpret_cast&lt;/span>&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>sockaddr &lt;span style="color:#ff79c6">*&amp;gt;&lt;/span> (&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>addr), &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>clientLen);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">101&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (io_uring_submit(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>ring) &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">102&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cerr &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;io_uring_submit failed errno:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> errno &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">103&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">104&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">105&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">106&lt;/span>&lt;span> io_uring_cqe &lt;span style="color:#ff79c6">*&lt;/span>cqes[QUEUE_DEPTH];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">107&lt;/span>&lt;span> &lt;span style="color:#ff79c6">while&lt;/span> (&lt;span style="color:#8be9fd;font-style:italic">true&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">108&lt;/span>&lt;span> &lt;span style="color:#6272a4">//等待事件完成
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">109&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#8be9fd">int&lt;/span> ret &lt;span style="color:#ff79c6">=&lt;/span> io_uring_submit_and_wait(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>ring, &lt;span style="color:#bd93f9">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">110&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (ret &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">111&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cerr &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;io_uring_wait_cqe failed errno:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> errno &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">112&lt;/span>&lt;span> &lt;span style="color:#ff79c6">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">113&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">114&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">115&lt;/span>&lt;span> &lt;span style="color:#6272a4">//获取完成的事件
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">116&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#ff79c6">auto&lt;/span> num &lt;span style="color:#ff79c6">=&lt;/span> io_uring_peek_batch_cqe(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>ring, cqes, QUEUE_DEPTH);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">117&lt;/span>&lt;span> &lt;span style="color:#ff79c6">for&lt;/span> (&lt;span style="color:#8be9fd">int&lt;/span> i &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>; i &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> num; &lt;span style="color:#ff79c6">++&lt;/span>i) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">118&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> conn &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">reinterpret_cast&lt;/span>&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>Connection &lt;span style="color:#ff79c6">*&amp;gt;&lt;/span> (cqes[i]&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>user_data);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">119&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>type &lt;span style="color:#ff79c6">==&lt;/span> ACCEPT) {&lt;span style="color:#6272a4">//新连接
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">120&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#8be9fd">int&lt;/span> clientFd &lt;span style="color:#ff79c6">=&lt;/span> cqes[i]&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>res;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">121&lt;/span>&lt;span> &lt;span style="color:#ff79c6">auto&lt;/span> newCLi &lt;span style="color:#ff79c6">=&lt;/span> newConn(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>ring, clientFd);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">122&lt;/span>&lt;span> addSocketRead(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>ring, newCLi);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">123&lt;/span>&lt;span> acceptConnection(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>ring, lConn, &lt;span style="color:#ff79c6">reinterpret_cast&lt;/span>&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>sockaddr &lt;span style="color:#ff79c6">*&amp;gt;&lt;/span> (&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>addr), &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>clientLen);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">124&lt;/span>&lt;span> } &lt;span style="color:#ff79c6">else&lt;/span> &lt;span style="color:#ff79c6">if&lt;/span> (conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>type &lt;span style="color:#ff79c6">==&lt;/span> READ) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">125&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> readSize &lt;span style="color:#ff79c6">=&lt;/span> cqes[i]&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>res;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">126&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (readSize &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {&lt;span style="color:#6272a4">//读取失败(比如客户端断开连接)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">127&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> shutdown(conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>fd, SHUT_RDWR);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">128&lt;/span>&lt;span> connections.erase(conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>fd);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">129&lt;/span>&lt;span> &lt;span style="color:#ff79c6">delete&lt;/span> conn;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">130&lt;/span>&lt;span> } &lt;span style="color:#ff79c6">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">131&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;read:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>readBuf &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">132&lt;/span>&lt;span> conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>writeBuf &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;hello client&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">133&lt;/span>&lt;span> addSocketWrite(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>ring, conn);&lt;span style="color:#6272a4">//向客户端写数据
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">134&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">135&lt;/span>&lt;span> } &lt;span style="color:#ff79c6">else&lt;/span> &lt;span style="color:#ff79c6">if&lt;/span> (conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>type &lt;span style="color:#ff79c6">==&lt;/span> WRITE) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">136&lt;/span>&lt;span> addSocketRead(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>ring, conn);&lt;span style="color:#6272a4">// 把这个连接加入读事件
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">137&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">138&lt;/span>&lt;span> io_uring_cqe_seen(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>ring, cqes[i]);&lt;span style="color:#6272a4">// mark the cqe as processed
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">139&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">140&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">141&lt;/span>&lt;span> io_uring_queue_exit(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>ring);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">142&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">143&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">144&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">145&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">146&lt;/span>&lt;span> uringRun();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">147&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">148&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>编译这段代码的时候，需要链接 &lt;strong>liburing&lt;/strong> 库。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>g++ -o server server.cpp -luring
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>createListener&lt;/code> 函数用来创建一个 &lt;strong>socket&lt;/strong> 监听 &lt;strong>8088&lt;/strong> 端口。这个函数没什么特别的，就是创建一个 &lt;strong>socket&lt;/strong>，然后绑定 &lt;strong>8088&lt;/strong> 端口，然后监听。&lt;/p>
&lt;p>&lt;code>acceptConnection&lt;/code> 函数用来接收客户端的连接。这个函数调用 &lt;strong>io_uring_prep_accept&lt;/strong> 函数，向 &lt;strong>Submission Queue&lt;/strong> 中添加一个 &lt;strong>accept&lt;/strong> 请求。&lt;/p>
&lt;p>&lt;code>addSocketRead&lt;/code> 函数用来向 &lt;strong>Submission Queue&lt;/strong> 中添加一个 &lt;strong>recv&lt;/strong> 请求，也就是从 &lt;strong>fd&lt;/strong> 中异步读取数据。&lt;/p>
&lt;p>&lt;code>addSocketWrite&lt;/code> 函数用来向 &lt;strong>Submission Queue&lt;/strong> 中添加一个 &lt;strong>send&lt;/strong> 请求，也就是向 &lt;strong>fd&lt;/strong> 中异步写入数据。&lt;/p>
&lt;p>&lt;code>newConn&lt;/code> 函数用来创建一个新的连接。这个函数会调用 &lt;code>addSocketRead&lt;/code> 函数，向 &lt;strong>Submission Queue&lt;/strong> 中添加一个 &lt;strong>recv&lt;/strong> 请求。&lt;/p>
&lt;p>&lt;code>uringRun&lt;/code> 函数是主函数。这个函数会创建一个 &lt;strong>io_uring&lt;/strong> 对象，然后调用 &lt;code>createListener&lt;/code> 函数创建一个监听 &lt;strong>socket&lt;/strong>，然后调用 &lt;code>newConn&lt;/code> 函数创建一个新的连接。&lt;/p>
&lt;p>有一个知识点需要注意一下，在 io_uring中，每次获取的 &lt;strong>cqe&lt;/strong> 在使用完之后，需要调用 &lt;code>io_uring_cqe_seen&lt;/code> 函数，标记 &lt;strong>cqe&lt;/strong> 为已处理。
同时处理的时候，也会把 这个 &lt;strong>cqe&lt;/strong> 从 &lt;strong>Completion Queue&lt;/strong> 中移除，对应的 &lt;code>fd&lt;/code> 也会从 &lt;strong>io_uring&lt;/strong> 中移除。
所以，为了保证后续能继续接收到 &lt;strong>fd&lt;/strong> 的 &lt;strong>I/O&lt;/strong> 事件，需要在处理完 &lt;strong>cqe&lt;/strong> 之后，再次调用 &lt;code>addSocketRead&lt;/code> 函数，向 &lt;strong>Submission Queue&lt;/strong> 中添加一个 &lt;strong>recv&lt;/strong> 请求。&lt;/p>
&lt;p>这些函数的内容都比较简单，就不再详细介绍了。主要看一下 &lt;strong>while&lt;/strong> 循环的内容。&lt;/p>
&lt;p>&lt;code>int ret = io_uring_submit_and_wait(&amp;amp;ring, 1);&lt;/code> 这个函数会提交 &lt;strong>I/O&lt;/strong> 请求，并等待 &lt;strong>I/O&lt;/strong> 请求的完成状态。这个函数会阻塞，直到有 1个 &lt;strong>I/O&lt;/strong> 请求完成。&lt;/p>
&lt;p>这里可以使用 &lt;code>io_uring_submit&lt;/code> 这个函数只提交 &lt;strong>I/O&lt;/strong> 请求，不等待 &lt;strong>I/O&lt;/strong> 请求的完成状态。但是这样的话，while循环会一直循环，不会阻塞，对应的表现就是 &lt;strong>CPU&lt;/strong> 占用率会很高。
这种情况适用于 &lt;strong>I/O&lt;/strong> 请求比较多的情况，比如 &lt;strong>nginx&lt;/strong> 这种 &lt;strong>web&lt;/strong> 服务器。&lt;/p>
&lt;p>一般情况下，使用 &lt;code>io_uring_submit_and_wait&lt;/code> 这个函数就可以了。&lt;/p>
&lt;p>如果 返回的 &lt;strong>ret&lt;/strong> 小于 &lt;strong>0&lt;/strong>，说明出错了，这里简单的打印一下错误信息，然后退出。&lt;/p>
&lt;p>&lt;code>auto num = io_uring_peek_batch_cqe(&amp;amp;ring, cqes, QUEUE_DEPTH);&lt;/code> 这个函数会获取 &lt;strong>Completion Queue&lt;/strong> 中的 &lt;strong>cqe&lt;/strong>，一次最多获取 &lt;strong>QUEUE_DEPTH&lt;/strong> 个 &lt;strong>cqe&lt;/strong>。&lt;/p>
&lt;p>这个函数有点类似于 &lt;strong>epoll&lt;/strong> 的 &lt;strong>epoll_wait&lt;/strong> 函数，会一次性获取多个 &lt;strong>cqe&lt;/strong>。&lt;/p>
&lt;p>然后遍历 &lt;strong>cqe&lt;/strong>，根据 &lt;strong>cqe&lt;/strong> 的 &lt;strong>type&lt;/strong> 来处理 &lt;strong>I/O&lt;/strong> 事件。在之前的submit的时候，指定了有 &lt;strong>ACCEPT&lt;/strong>、&lt;strong>READ&lt;/strong>、&lt;strong>WRITE&lt;/strong> 三种 &lt;strong>I/O&lt;/strong> 事件。&lt;/p>
&lt;p>因为之前的 &lt;strong>cqe&lt;/strong> 中的 &lt;strong>user_data&lt;/strong> 是 &lt;strong>Connection&lt;/strong> 对象的指针，所以可以根据 &lt;strong>cqe&lt;/strong> 的 &lt;strong>user_data&lt;/strong> 来获取 &lt;strong>Connection&lt;/strong> 对象，然后根据 &lt;strong>Connection&lt;/strong> 对象的 &lt;strong>type&lt;/strong> 来处理 &lt;strong>I/O&lt;/strong> 事件。
所以可以 &lt;code>reinterpret_cast&amp;lt;Connection *&amp;gt; (cqes[i]-&amp;gt;user_data);&lt;/code>强转来获取 &lt;strong>Connection&lt;/strong> 对象。&lt;/p>
&lt;p>如果 &lt;strong>type&lt;/strong> 是 &lt;strong>ACCEPT&lt;/strong>，说明是新的连接，就调用 &lt;code>newConn&lt;/code> 函数创建一个新的连接，然后调用 &lt;code>acceptConnection&lt;/code> 函数接收新的连接。
在接收新的连接之后，需要再次调用 &lt;code>acceptConnection&lt;/code> 函数，把listener的socket放回io_uring中，后面才能继续工作。&lt;/p>
&lt;p>如果 &lt;strong>type&lt;/strong> 是 &lt;strong>READ&lt;/strong>，说明是读事件，就读取 &lt;strong>cqe&lt;/strong> 的 &lt;strong>res&lt;/strong> 字段，如果小于 &lt;strong>0&lt;/strong>，说明读取失败，比如客户端断开连接，就关闭 &lt;strong>fd&lt;/strong>，然后从 &lt;strong>connections&lt;/strong> 中移除这个 &lt;strong>fd&lt;/strong>，然后释放 &lt;strong>Connection&lt;/strong> 对象。
如果读取成功，就打印读取的数据，然后向客户端发送一条消息。&lt;/p>
&lt;p>如果 &lt;strong>type&lt;/strong> 是 &lt;strong>WRITE&lt;/strong>，说明是写事件，在这里就是向客户端写数据完成了。
调用 &lt;code>addSocketRead&lt;/code> 函数，向 &lt;strong>Submission Queue&lt;/strong> 中添加一个 读的请求，然后这个 &lt;strong>fd&lt;/strong> 就会继续接收 &lt;strong>I/O&lt;/strong> 事件。&lt;/p>
&lt;p>最后调用 &lt;code>io_uring_cqe_seen&lt;/code> 函数，标记 &lt;strong>cqe&lt;/strong> 为已处理。&lt;/p>
&lt;p>这样一个简单的 &lt;strong>tcp&lt;/strong> 服务就实现了。这个服务只是一个简单的例子，没法用在生产环境中，只是用来学习 &lt;strong>iouring&lt;/strong> 的基本使用。&lt;/p>
&lt;p>像是中间的错误处理，连接的超时等问题都没有处理，这些问题需要根据实际情况来处理。&lt;/p>
&lt;p>这个例子中，一个 &lt;strong>socket&lt;/strong> 同时只能读或者写，不能同时读写，这个问题也需要根据实际情况来处理。&lt;/p>
&lt;h2 id="总结">&lt;a href="#%e6%80%bb%e7%bb%93" class="header-anchor">&lt;/a>总结
&lt;/h2>&lt;p>这篇文章主要介绍了 &lt;strong>iouring&lt;/strong> 的基本使用，实现了一个简单的 &lt;strong>tcp&lt;/strong> 服务。只是介绍了 &lt;strong>iouring&lt;/strong> 的基本使用，没有涉及底层实现。
后面有时间再去学一下 &lt;strong>liburing&lt;/strong> 的源码，看看底层是如何实现的。&lt;/p>
&lt;p>其实 &lt;strong>iouring&lt;/strong> 最主要的两个操作是提交 &lt;strong>I/O&lt;/strong> 请求到 &lt;strong>sq&lt;/strong> ，然后等待 &lt;strong>I/O&lt;/strong> 请求的完成后,从 &lt;strong>cq&lt;/strong> 获取然后处理。&lt;/p>
&lt;p>看很多人都说 &lt;strong>iouring&lt;/strong> 性能很高，尤其是在 &lt;strong>I/O&lt;/strong> 密集型的场景下，性能提升很明显。这部分内容还没有验证，后面有时间再去验证一下。&lt;/p>
&lt;p>因为也是初学 &lt;strong>iouring&lt;/strong>，所以文章中可能有错误，欢迎批评指正。&lt;/p>
&lt;hr>
&lt;h2 id="追更">&lt;a href="#%e8%bf%bd%e6%9b%b4" class="header-anchor">&lt;/a>追更
&lt;/h2>&lt;p>&lt;strong>2024-10-23&lt;/strong>&lt;/p>
&lt;p>在服务端加了一点代码，写了一个简单的 &lt;strong>HTTP&lt;/strong> 服务器，可以通过浏览器访问，然后找了一个 HTTP 压测工具，测试了一下性能。&lt;/p>
&lt;p>HTTP 服务器返回的内容：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>conn&lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>writeBuf &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;HTTP/1.1 200 OK&lt;/span>&lt;span style="color:#f1fa8c">\r\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;Content-Length: 55&lt;/span>&lt;span style="color:#f1fa8c">\r\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;Content-Type: text/html&lt;/span>&lt;span style="color:#f1fa8c">\r\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;Connection: keep-alive&lt;/span>&lt;span style="color:#f1fa8c">\r\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;Date: Mon, 23 Oct 2024 13:24:24 GMT&lt;/span>&lt;span style="color:#f1fa8c">\r\n\r\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;&amp;lt;h1&amp;gt;hello&amp;lt;/h1&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>同样的，使用 &lt;strong>epoll&lt;/strong> 也实现了一个 &lt;strong>HTTP&lt;/strong> 服务器，返回了同样的内容。&lt;/p>
&lt;p>几轮测试下来，发现 &lt;strong>epoll&lt;/strong> 的性能要比 &lt;strong>iouring&lt;/strong> 高一点。至于原因还在研究中。&lt;/p>
&lt;p>猜测的原因可能是 在数据量很小的时候， &lt;strong>iouring&lt;/strong> 的性能发挥不出来，甚至效果更差了。
还有一个原因可能是我使用的方法有问题，这个等后面继续研究。&lt;/p></description></item><item><title>debian11 升级到 debian12</title><link>https://lqxhub.github.io/posts/39fad342/</link><pubDate>Sun, 14 May 2023 14:12:12 +0000</pubDate><guid>https://lqxhub.github.io/posts/39fad342/</guid><description>&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/debian-12-banner.jpg" alt="Featured image of post debian11 升级到 debian12" />&lt;p>根据debian官方发布的公告，debian12的发布日期是2023年6月10日。
我原本以为要等到那天才能更新呢，去网站看了一下，现在就可以更新了，那还用说了，直接冲。&lt;/p>
&lt;p>其实更新方式也非常简单，只需要把 &lt;strong>apt&lt;/strong> 的源换成 debian12的，然后执行 &lt;code>apt full-upgrade&lt;/code>
就可以了&lt;/p>
&lt;p>在国内，不建议使用官方的源，网速慢，国内有很多镜像，找一下替换一下就行。&lt;/p>
&lt;p>我用的是清华大学的镜像，&lt;/p>
&lt;p>&lt;a class="link" href="https://mirrors.tuna.tsinghua.edu.cn/help/debian/" target="_blank" rel="noopener"
>地址&lt;/a>&lt;/p>
&lt;p>选择对应的debian版本，如图中&lt;/p>
&lt;p>
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/tsinghua.png">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/tsinghua.png" alt="" />
&lt;/a>
&lt;/div>
&lt;/p>
&lt;p>回到linux中，在升级12前，建议把关键数据做一次备份，出问题了还有回头路。 我使用的虚拟机，在升级前创建了一个快照&lt;/p>
&lt;p>在升级前 先把11的所有包都更新到最新&lt;/p>
&lt;ol>
&lt;li>&lt;code>sudo apt update&lt;/code>&lt;/li>
&lt;li>&lt;code>sudo apt upgrade&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>将 &lt;code>/etc/apt/sources.list&lt;/code> 所有的配置删掉，把debian12 的复制进去&lt;/p>
&lt;p>然后执行&lt;/p>
&lt;ol>
&lt;li>&lt;code>sudo apt update&lt;/code>&lt;/li>
&lt;li>&lt;code>sudo apt full-upgrade&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>等待下载完成后会自动安装。如果你有更改过一些包的配置，在重新安装的时候会询问你使用默认的配置还是修改后的配置&lt;/p>
&lt;p>一般情况下选择自己修改后的配置就可以了。&lt;/p>
&lt;p>等全部完成后 重启进入系统，整个升级就完成了&lt;/p>
&lt;p>系统升级后，如果使用的是gnome桌面，因为gnome从3升级到了4，所以原来的一些插件就不能用了，这时候只需要把旧的插件卸载 换成新的就可以&lt;/p>
&lt;p>如果这个插件没有兼容gnome4的，那就没法了 0.0&lt;/p>
&lt;p>我升级后只有一个插件不能用了，换成最新版的就可以，原来软件都能正常使用，已经用了两天了，完全没有问题&lt;/p></description></item><item><title>linux 多线程或多进程 epoll处理 accept 导致惊群</title><link>https://lqxhub.github.io/posts/4926d2f3/</link><pubDate>Sun, 22 Aug 2021 00:10:33 +0000</pubDate><guid>https://lqxhub.github.io/posts/4926d2f3/</guid><description>&lt;p>
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-75bcac218baeff46.webp">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-75bcac218baeff46.webp" alt="" />
&lt;/a>
&lt;/div>
&lt;/p>
&lt;h2 id="什么是惊群">&lt;a href="#%e4%bb%80%e4%b9%88%e6%98%af%e6%83%8a%e7%be%a4" class="header-anchor">&lt;/a>什么是惊群
&lt;/h2>&lt;p>简单说，惊群是因为多进程（多线程）在同时阻塞等待同一个事件的时候（休眠状态），当事件发生时，就会唤醒所有等待的（休眠的）进程（线程）。但是事件只能被一个进程或线程处理，而其他进程（线程）获取失败，只能重新进入休眠状态，这种现象和性能浪费就叫做惊群。&lt;a class="link" href="https://zh.wikipedia.org/wiki/%E6%83%8A%E7%BE%A4%E9%97%AE%E9%A2%98" target="_blank" rel="noopener"
>维基百科-惊群&lt;/a>&lt;/p>
&lt;h2 id="产生惊群的条件">&lt;a href="#%e4%ba%a7%e7%94%9f%e6%83%8a%e7%be%a4%e7%9a%84%e6%9d%a1%e4%bb%b6" class="header-anchor">&lt;/a>产生惊群的条件
&lt;/h2>&lt;ol>
&lt;li>多个进程或者多个线程&lt;/li>
&lt;li>同时等待处理一个事件&lt;/li>
&lt;/ol>
&lt;h2 id="具体场景复现">&lt;a href="#%e5%85%b7%e4%bd%93%e5%9c%ba%e6%99%af%e5%a4%8d%e7%8e%b0" class="header-anchor">&lt;/a>具体场景复现
&lt;/h2>&lt;p>测试环境 :&lt;/p>
&lt;ol>
&lt;li>debian11&lt;/li>
&lt;li>内核5.10.0-8&lt;/li>
&lt;li>编译器 clang11&lt;/li>
&lt;/ol>
&lt;p>多线程和多进程在惊群问题上差不多，为了少些一点，下文中没有特殊说明，多线程 也包含了多进程&lt;/p>
&lt;p>在linux中，使用C/C++ 编写 tcp server时，会依次调用 &lt;code>socket()&lt;/code> &lt;code>bind()&lt;/code> &lt;code>listen()&lt;/code> &lt;code>accept()&lt;/code> 这几个函数，这几个函数会打开socket，绑定ip和端口，开始监听端口，accept函数会阻塞当前进程，等待客户端连接。&lt;/p>
&lt;p>如果在单线程中，只有一个accept函数在等待客户端连接，当客户端来连接的时候，只会有一个accept函数来处理，所以也不会存在惊群问题了。&lt;/p>
&lt;p>在多线模型中，多个线程分别accept同一个socket，当有客户端连接时，内核会通知所有的线程来处理这个请求，但是呢，请求只能被一个线程处理，其他的线程的不到这个事件，只能白白被唤醒。&lt;/p>
&lt;p>这是最简单的一种惊群，这种情况在linux2.6以后就不会产生了。因为在Linux 2.6 版本之后，通过引入一个标记位 WQ_FLAG_EXCLUSIVE，解决掉了 Accept 惊群效应。我原本还想在centos3.9（内核版本是2.5）中去复现这种情况，但是折腾了好久，也没能在centos上编译也运行C++程序，遂放弃。
不废话了，上代码，测试第一种情况&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;netinet/in.h&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;sys/epoll.h&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;thread&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;mutex&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;condition_variable&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span>&lt;span style="color:#ff79c6">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#define WORKER_THREAD 4
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span>&lt;span style="color:#ff79c6">&lt;/span>&lt;span style="color:#6272a4">//创建socket，并返回fd
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">createSocket&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> fd &lt;span style="color:#ff79c6">=&lt;/span> socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (fd &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;create socket error&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span> sockaddr_in sockAddr{};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>&lt;span> sockAddr.sin_port &lt;span style="color:#ff79c6">=&lt;/span> htons(PORT);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20&lt;/span>&lt;span> sockAddr.sin_family &lt;span style="color:#ff79c6">=&lt;/span> AF_INET;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21&lt;/span>&lt;span> sockAddr.sin_addr.s_addr &lt;span style="color:#ff79c6">=&lt;/span> htons(INADDR_ANY);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (bind(fd, (sockaddr &lt;span style="color:#ff79c6">*&lt;/span>) &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>sockAddr, &lt;span style="color:#ff79c6">sizeof&lt;/span>(sockAddr)) &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;bind socket error, port:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> PORT &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (listen(fd, &lt;span style="color:#bd93f9">100&lt;/span>) &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;listen port error&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> fd;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35&lt;/span>&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">Worker1&lt;/span>(&lt;span style="color:#8be9fd">int&lt;/span> socketFd, &lt;span style="color:#8be9fd">int&lt;/span> k) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34; Worker&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> k &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34; run &amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37&lt;/span>&lt;span> &lt;span style="color:#ff79c6">while&lt;/span> (&lt;span style="color:#8be9fd;font-style:italic">true&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> tfd &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39&lt;/span>&lt;span> sockaddr_in cli_addr{};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40&lt;/span>&lt;span> socklen_t length &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">sizeof&lt;/span>(cli_addr);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41&lt;/span>&lt;span> tfd &lt;span style="color:#ff79c6">=&lt;/span> accept(socketFd, (sockaddr &lt;span style="color:#ff79c6">*&lt;/span>) &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>cli_addr, &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>length);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;worker&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> k &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34; in &amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (tfd &lt;span style="color:#ff79c6">&amp;lt;=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">44&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;accept error&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">45&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">46&lt;/span>&lt;span> } &lt;span style="color:#ff79c6">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">47&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;worker&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> k &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34; accept &amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">48&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">49&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">50&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">51&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">52&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">53&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>mutex mutex;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">54&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>unique_lock&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>std&lt;span style="color:#ff79c6">::&lt;/span>mutex&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> lck(mutex);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">55&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>condition_variable cv;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">56&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">57&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> fd &lt;span style="color:#ff79c6">=&lt;/span> createSocket();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">58&lt;/span>&lt;span> &lt;span style="color:#6272a4">//第一种,多个线程不使用多路复用,accept同一个socket
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">59&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#ff79c6">for&lt;/span> (&lt;span style="color:#8be9fd">int&lt;/span> i &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>; i &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> WORKER_THREAD; &lt;span style="color:#ff79c6">++&lt;/span>i) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">60&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>&lt;span style="color:#ff79c6">thread&lt;/span> th(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>Worker1, fd, i &lt;span style="color:#ff79c6">+&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">61&lt;/span>&lt;span> th.detach();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">62&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">63&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">64&lt;/span>&lt;span> cv.wait(lck);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">65&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">66&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这代码可以用C写，但是习惯用C++了，就用C++写吧。代码也比较简单，&lt;code>createSocket()&lt;/code>创建了一个socket，然后4个线程分别去accept这个socket。
下面是运行结果：
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-c48c3f0cd5d7d843.webp">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-c48c3f0cd5d7d843.webp" alt="" />
&lt;/a>
&lt;/div>
&lt;/p>
&lt;p>可以看到，4个线程都在运行，并且accept，但是当连接来的时候，只有个线程能得到事件。&lt;/p>
&lt;p>既然linux内核已经帮我们处理了惊群，那我们还考虑这些干啥，直接用不就完了。&lt;/p>
&lt;p>但是，我们在写代码的时候一般不会直接阻塞accept的，都是使用多路复用来帮我们处理连接阻塞的是多路复用函数。目前综合性能比较好的IO多路复用是epoll。当在多线程中使用epoll时，惊群问题就会出现了。
先代码和结果，然后再解释&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;netinet/in.h&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;sys/epoll.h&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;thread&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;mutex&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;condition_variable&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span>&lt;span style="color:#ff79c6">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#define WORKER_THREAD 4
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span>&lt;span style="color:#ff79c6">&lt;/span>&lt;span style="color:#6272a4">//创建socket，并返回fd
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">createSocket&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> fd &lt;span style="color:#ff79c6">=&lt;/span> socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (fd &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;create socket error&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span> sockaddr_in sockAddr{};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>&lt;span> sockAddr.sin_port &lt;span style="color:#ff79c6">=&lt;/span> htons(PORT);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20&lt;/span>&lt;span> sockAddr.sin_family &lt;span style="color:#ff79c6">=&lt;/span> AF_INET;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21&lt;/span>&lt;span> sockAddr.sin_addr.s_addr &lt;span style="color:#ff79c6">=&lt;/span> htons(INADDR_ANY);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (bind(fd, (sockaddr &lt;span style="color:#ff79c6">*&lt;/span>) &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>sockAddr, &lt;span style="color:#ff79c6">sizeof&lt;/span>(sockAddr)) &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;bind socket error, port:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> PORT &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (listen(fd, &lt;span style="color:#bd93f9">100&lt;/span>) &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;listen port error&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> fd;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35&lt;/span>&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">Worker2&lt;/span>(&lt;span style="color:#8be9fd">int&lt;/span> socketFd, &lt;span style="color:#8be9fd">int&lt;/span> k) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34; Worker&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> k &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34; run &amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> eFd &lt;span style="color:#ff79c6">=&lt;/span> epoll_create(&lt;span style="color:#bd93f9">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (eFd &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;create epoll fail&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43&lt;/span>&lt;span> epoll_event epev_{};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">44&lt;/span>&lt;span> epev_.events &lt;span style="color:#ff79c6">=&lt;/span> EPOLLIN;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">45&lt;/span>&lt;span> epev_.data.fd &lt;span style="color:#ff79c6">=&lt;/span> socketFd;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">46&lt;/span>&lt;span> epoll_ctl(eFd, EPOLL_CTL_ADD, socketFd, &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>epev_);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">47&lt;/span>&lt;span> epoll_event events[EVENT_NUM];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">48&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">49&lt;/span>&lt;span> &lt;span style="color:#ff79c6">while&lt;/span> (&lt;span style="color:#8be9fd;font-style:italic">true&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">50&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> eNum &lt;span style="color:#ff79c6">=&lt;/span> epoll_wait(eFd, events, EVENT_NUM, &lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">51&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (eNum &lt;span style="color:#ff79c6">==&lt;/span> &lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">52&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;epoll error&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">53&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">54&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">55&lt;/span>&lt;span> &lt;span style="color:#6272a4">//一定要加上这句,防止事件被瞬间处理,导致看不到结果
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">56&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>this_thread&lt;span style="color:#ff79c6">::&lt;/span>sleep_for((std&lt;span style="color:#ff79c6">::&lt;/span>chrono&lt;span style="color:#ff79c6">::&lt;/span>seconds (&lt;span style="color:#bd93f9">1&lt;/span>)));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">57&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;worker&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> k &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34; in &amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">58&lt;/span>&lt;span> &lt;span style="color:#ff79c6">for&lt;/span> (&lt;span style="color:#8be9fd">int&lt;/span> i &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>; i &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> eNum; &lt;span style="color:#ff79c6">++&lt;/span>i) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">59&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (events[i].data.fd &lt;span style="color:#ff79c6">==&lt;/span> socketFd) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">60&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> tfd &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">61&lt;/span>&lt;span> sockaddr_in cli_addr{};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">62&lt;/span>&lt;span> socklen_t length &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">sizeof&lt;/span>(cli_addr);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">63&lt;/span>&lt;span> tfd &lt;span style="color:#ff79c6">=&lt;/span> accept(socketFd, (sockaddr &lt;span style="color:#ff79c6">*&lt;/span>) &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>cli_addr, &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>length);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">64&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (tfd &lt;span style="color:#ff79c6">&amp;lt;=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">65&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;accept error&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">66&lt;/span>&lt;span> } &lt;span style="color:#ff79c6">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">67&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;worker&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> k &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34; accept &amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">68&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">69&lt;/span>&lt;span> } &lt;span style="color:#ff79c6">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">70&lt;/span>&lt;span> &lt;span style="color:#6272a4">//处理正常的socket读写事件,这里可以忽略,不是这次关注的点
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">71&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">72&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">73&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">74&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">75&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">76&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">77&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>mutex mutex;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">78&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>unique_lock&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>std&lt;span style="color:#ff79c6">::&lt;/span>mutex&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> lck(mutex);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">79&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>condition_variable cv;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">80&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> fd &lt;span style="color:#ff79c6">=&lt;/span> createSocket();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">81&lt;/span>&lt;span> &lt;span style="color:#6272a4">//第二种,多个线程使用epoll多路复用,accept同一个socket
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">82&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#ff79c6">for&lt;/span> (&lt;span style="color:#8be9fd">int&lt;/span> i &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>; i &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> WORKER_THREAD; &lt;span style="color:#ff79c6">++&lt;/span>i) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">83&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>&lt;span style="color:#ff79c6">thread&lt;/span> th(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>Worker2, fd, i &lt;span style="color:#ff79c6">+&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">84&lt;/span>&lt;span> th.detach();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">85&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">86&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>结果
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-7e95cb7234b64dc1.webp">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-7e95cb7234b64dc1.webp" alt="" />
&lt;/a>
&lt;/div>
这里可以看到，当有客户端来连接的时候，4个线程都被唤醒了，但是只有workr2 线程成功获取了事件，其余的3个线程都白白唤醒浪费了性能&lt;/p>
&lt;p>为啥内核已经处理了第一种情景下的惊群问题，第二种情景下的惊群问题为啥就不处理了呢？&lt;/p>
&lt;p>我的猜想不一定正确，如果有错误，请指出：&lt;/p>
&lt;blockquote>
&lt;p>accept 只能是被一个进程调用成功（连接事件只会处理一次嘛），所以内核就直接处理了（一个accept只会唤醒一个进程）。但 epoll 不一样，epoll中管理了很多连接，不止socket这一个，除了可能后续被 accept 调用外，还有可能是其他网络 IO 事件的，而其他 IO 事件是否只能由一个进程处理，是不一定的，这是一个由用户决定的事情，例如可能一个文件会由多个进程来读写。所以，对 epoll 默认对于多进程监听同一文件不会设置互斥，所以就导致了epoll惊群问题。&lt;/p>
&lt;/blockquote>
&lt;p>在linux4.5内核之后给epoll添加了一个 &lt;code>EPOLLEXCLUSIVE&lt;/code>的标志位，如果设置了这个标志位，那epoll将进程挂到等待队列时将会设置一下互斥标志位，这时实现跟内核原生accept一样的特性，只会唤醒队列中的一个进程。&lt;a class="link" href="https://segmentfault.com/a/1190000039676522" target="_blank" rel="noopener"
>参考资料&lt;/a> 感谢这位大神的文章&lt;/p>
&lt;p>修改一下worker2函数:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">Worker2&lt;/span>(&lt;span style="color:#8be9fd">int&lt;/span> socketFd, &lt;span style="color:#8be9fd">int&lt;/span> k) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34; Worker&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> k &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34; run &amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> eFd &lt;span style="color:#ff79c6">=&lt;/span> epoll_create(&lt;span style="color:#bd93f9">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (eFd &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;create epoll fail&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span> epoll_event epev_{};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span> &lt;span style="color:#6272a4">//给epoll加上 互斥标志
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> epev_.events &lt;span style="color:#ff79c6">=&lt;/span> EPOLLIN &lt;span style="color:#ff79c6">|&lt;/span> EPOLLEXCLUSIVE;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span> epev_.data.fd &lt;span style="color:#ff79c6">=&lt;/span> socketFd;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span> epoll_ctl(eFd, EPOLL_CTL_ADD, socketFd, &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>epev_);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span> epoll_event events[EVENT_NUM];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span> &lt;span style="color:#ff79c6">while&lt;/span> (&lt;span style="color:#8be9fd;font-style:italic">true&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> eNum &lt;span style="color:#ff79c6">=&lt;/span> epoll_wait(eFd, events, EVENT_NUM, &lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (eNum &lt;span style="color:#ff79c6">==&lt;/span> &lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;epoll error&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22&lt;/span>&lt;span> &lt;span style="color:#6272a4">//一定要加上这句,防止事件被瞬间处理,导致看不到结果
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>this_thread&lt;span style="color:#ff79c6">::&lt;/span>sleep_for((std&lt;span style="color:#ff79c6">::&lt;/span>chrono&lt;span style="color:#ff79c6">::&lt;/span>seconds(&lt;span style="color:#bd93f9">1&lt;/span>)));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;worker&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> k &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34; in &amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25&lt;/span>&lt;span> &lt;span style="color:#ff79c6">for&lt;/span> (&lt;span style="color:#8be9fd">int&lt;/span> i &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>; i &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> eNum; &lt;span style="color:#ff79c6">++&lt;/span>i) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (events[i].data.fd &lt;span style="color:#ff79c6">==&lt;/span> socketFd) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> tfd &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28&lt;/span>&lt;span> sockaddr_in cli_addr{};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29&lt;/span>&lt;span> socklen_t length &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">sizeof&lt;/span>(cli_addr);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30&lt;/span>&lt;span> tfd &lt;span style="color:#ff79c6">=&lt;/span> accept(socketFd, (sockaddr &lt;span style="color:#ff79c6">*&lt;/span>) &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>cli_addr, &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>length);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (tfd &lt;span style="color:#ff79c6">&amp;lt;=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;accept error&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33&lt;/span>&lt;span> } &lt;span style="color:#ff79c6">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;worker&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> k &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34; accept &amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36&lt;/span>&lt;span> } &lt;span style="color:#ff79c6">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37&lt;/span>&lt;span> &lt;span style="color:#6272a4">//处理正常的socket读写事件,这里可以忽略,不是这次关注的点
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>现在来测试一下
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-5b7fb90f54f0e9d8.webp">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-5b7fb90f54f0e9d8.webp" alt="" />
&lt;/a>
&lt;/div>
现在的epoll已经不会有惊群问题了&lt;/p>
&lt;h2 id="另一种方式">&lt;a href="#%e5%8f%a6%e4%b8%80%e7%a7%8d%e6%96%b9%e5%bc%8f" class="header-anchor">&lt;/a>另一种方式
&lt;/h2>&lt;p>其实解决多线程使用epoll等多路复用导致的惊群问题，还有一个更彻底解决方法，让每个线程分别打开一个socket，并且这些socket绑定在同一个端口，然后accept这个socket。这就像第一种情景那样，内核直接帮我们做了惊群处理。这里会使用到 linux 3.9后 socket提供&lt;code>SO_REUSEPORT&lt;/code>标志。使用这个标志后，会允许多个socket绑定和监听同一个端口。
代码如下&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;netinet/in.h&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;sys/epoll.h&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;thread&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;mutex&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;condition_variable&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span>&lt;span style="color:#ff79c6">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#define WORKER_THREAD 4
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span>&lt;span style="color:#ff79c6">&lt;/span>&lt;span style="color:#6272a4">//创建socket，并返回fd
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">createSocket2&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> fd &lt;span style="color:#ff79c6">=&lt;/span> socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (fd &lt;span style="color:#ff79c6">==&lt;/span> &lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;create socket error&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> on &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (setsockopt(fd, SOL_SOCKET, SO_REUSEPORT, (&lt;span style="color:#ff79c6">const&lt;/span> &lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>) &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>on, &lt;span style="color:#ff79c6">sizeof&lt;/span>(on)) &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;set opt error, ret:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23&lt;/span>&lt;span> sockaddr_in sockAddr{};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24&lt;/span>&lt;span> sockAddr.sin_port &lt;span style="color:#ff79c6">=&lt;/span> htons(PORT);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25&lt;/span>&lt;span> sockAddr.sin_family &lt;span style="color:#ff79c6">=&lt;/span> AF_INET;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26&lt;/span>&lt;span> sockAddr.sin_addr.s_addr &lt;span style="color:#ff79c6">=&lt;/span> htons(INADDR_ANY);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (bind(fd, (sockaddr &lt;span style="color:#ff79c6">*&lt;/span>) &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>sockAddr, &lt;span style="color:#ff79c6">sizeof&lt;/span>(sockAddr)) &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;bind socket error, port:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> PORT &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (listen(fd, &lt;span style="color:#bd93f9">100&lt;/span>) &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;listen port error&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> fd;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40&lt;/span>&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">Worker3&lt;/span>(&lt;span style="color:#8be9fd">int&lt;/span> k) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34; Worker&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> k &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34; run &amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> socketFd &lt;span style="color:#ff79c6">=&lt;/span> createSocket2();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">44&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> eFd &lt;span style="color:#ff79c6">=&lt;/span> epoll_create(&lt;span style="color:#bd93f9">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">45&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (eFd &lt;span style="color:#ff79c6">==&lt;/span> &lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">46&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;create epoll fail&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">47&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">48&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">49&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">50&lt;/span>&lt;span> epoll_event epev_{};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">51&lt;/span>&lt;span> epev_.events &lt;span style="color:#ff79c6">=&lt;/span> EPOLLIN;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">52&lt;/span>&lt;span> epev_.data.fd &lt;span style="color:#ff79c6">=&lt;/span> socketFd;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">53&lt;/span>&lt;span> epoll_ctl(eFd, EPOLL_CTL_ADD, socketFd, &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>epev_);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">54&lt;/span>&lt;span> epoll_event events[EVENT_NUM];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">55&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">56&lt;/span>&lt;span> &lt;span style="color:#ff79c6">while&lt;/span> (&lt;span style="color:#8be9fd;font-style:italic">true&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">57&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> eNum &lt;span style="color:#ff79c6">=&lt;/span> epoll_wait(eFd, events, EVENT_NUM, &lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">58&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (eNum &lt;span style="color:#ff79c6">==&lt;/span> &lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">59&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;epoll error&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">60&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">61&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">62&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>this_thread&lt;span style="color:#ff79c6">::&lt;/span>sleep_for((std&lt;span style="color:#ff79c6">::&lt;/span>chrono&lt;span style="color:#ff79c6">::&lt;/span>seconds(&lt;span style="color:#bd93f9">1&lt;/span>)));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">63&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;worker&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> k &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34; in &amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">64&lt;/span>&lt;span> &lt;span style="color:#ff79c6">for&lt;/span> (&lt;span style="color:#8be9fd">int&lt;/span> i &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>; i &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> eNum; &lt;span style="color:#ff79c6">++&lt;/span>i) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">65&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (events[i].data.fd &lt;span style="color:#ff79c6">==&lt;/span> socketFd) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">66&lt;/span>&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> tfd &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">67&lt;/span>&lt;span> sockaddr_in cli_addr{};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">68&lt;/span>&lt;span> socklen_t length &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">sizeof&lt;/span>(cli_addr);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">69&lt;/span>&lt;span> tfd &lt;span style="color:#ff79c6">=&lt;/span> accept(socketFd, (sockaddr &lt;span style="color:#ff79c6">*&lt;/span>) &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>cli_addr, &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>length);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">70&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (tfd &lt;span style="color:#ff79c6">&amp;lt;=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">71&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;accept error&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">72&lt;/span>&lt;span> } &lt;span style="color:#ff79c6">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">73&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;worker&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> k &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34; accept &amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#ff79c6">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">74&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">75&lt;/span>&lt;span> } &lt;span style="color:#ff79c6">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">76&lt;/span>&lt;span> &lt;span style="color:#6272a4">//处理正常的socket读写事件
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">77&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">78&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">79&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">80&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">81&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">82&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">83&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>mutex mutex;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">84&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>unique_lock&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>std&lt;span style="color:#ff79c6">::&lt;/span>mutex&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> lck(mutex);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">85&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>condition_variable cv;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">86&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">87&lt;/span>&lt;span> &lt;span style="color:#6272a4">//第三种,多个线程使用epoll多路复用,每个线程分别bind,listen 同一个端口, accept各自的socket
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">88&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#ff79c6">for&lt;/span> (&lt;span style="color:#8be9fd">int&lt;/span> i &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>; i &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> WORKER_THREAD; &lt;span style="color:#ff79c6">++&lt;/span>i) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">89&lt;/span>&lt;span> std&lt;span style="color:#ff79c6">::&lt;/span>&lt;span style="color:#ff79c6">thread&lt;/span> th(&lt;span style="color:#ff79c6">&amp;amp;&lt;/span>Worker3, i &lt;span style="color:#ff79c6">+&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">90&lt;/span>&lt;span> th.detach();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">91&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">92&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">93&lt;/span>&lt;span> cv.wait(lck);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">94&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">95&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>结果
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-a210ececf944df66.webp">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-a210ececf944df66.webp" alt="" />
&lt;/a>
&lt;/div>
&lt;/p>
&lt;p>也是没有问题的，多个连接来的时候，只会有一个线程被唤醒，相当于在内核级别中实现了一个负载均衡&lt;/p>
&lt;h2 id="总结">&lt;a href="#%e6%80%bb%e7%bb%93" class="header-anchor">&lt;/a>总结
&lt;/h2>&lt;p>简单总结一下，当多个线程或者进程同时阻塞同一个事件的时候，会出现惊群现象，如果不适用epoll等多路复用技术，在linux2.6 以后内核已经帮我们处理了惊群问题。&lt;/p>
&lt;p>如果使用了epoll，就需要额外处理epoll导致的惊群问题，有两种方式&lt;/p>
&lt;ol>
&lt;li>linux4.5内核之后，epoll有一个&lt;code>EPOLLEXCLUSIVE&lt;/code>特性，可以防止epoll惊群出现&lt;/li>
&lt;li>linux 3.9内核之后给 socket 提供&lt;code>SO_REUSEPORT&lt;/code>特性，可以允许多个socket绑定在同一个端口上，相当于每个线程都有一个socket，在处理accept时，内核会自动处理惊群问题&lt;/li>
&lt;/ol>
&lt;p>1和2两种方式都能有效解决惊群问题，但是目前使用 socket的 &lt;code>SO_REUSEPORT&lt;/code> 是最好的方式.。&lt;/p>
&lt;p>我通过查资料得到 &lt;code> EPOLLEXCLUSIVE&lt;/code> 标识会保证一个事件发生时候只有一个线程会被唤醒，来避免多惊群问题。不过任一时候只能有一个Worker调用 accept，限制了真正并行的吞吐量。
这个有待验证，等我有时间再去深入了解一下。&lt;/p>
&lt;p>&lt;a class="link" href="https://gitee.com/lqxlucky/linux_socket_test1" target="_blank" rel="noopener"
>测试demo&lt;/a>&lt;/p></description></item><item><title>linux下 C++ 使用 epoll 多路复用 实现高性能的tcpserver</title><link>https://lqxhub.github.io/posts/91655bdf/</link><pubDate>Sun, 14 Mar 2021 13:58:35 +0000</pubDate><guid>https://lqxhub.github.io/posts/91655bdf/</guid><description>&lt;p>linux系统中，实现socket多路复用的技术有&lt;strong>select&lt;/strong> 、&lt;strong>poll&lt;/strong> 、&lt;strong>epoll&lt;/strong> 等多种方式。这些不同方式个有优缺点和适用场景，这不是本文讨论的重点，又兴趣的可以自己搜索学习一下。但是在高并发场景下， &lt;strong>epoll&lt;/strong> 性能是最高的， &lt;strong>Nginx&lt;/strong> 都听说过吧，大名鼎鼎的&lt;strong>Nginx&lt;/strong> 底层用的就是 &lt;strong>epoll&lt;/strong>。&lt;/p>
&lt;p>这篇文章主要是写怎么用 epoll，而不是原理分析。这篇文章不是最全的，也不是最深入的，但是绝对是一篇能让普通人看懂的，看完能自己用epoll写出一个tcpserver的文章。全废话不多说，直接开始搞&lt;/p>
&lt;p>首先明确一点，epoll 是linux系统提供的系统调用，也就说，epoll 在Windows系统上是没法使用的，相应的代码也是没法编译的。如果有人知道怎么在Windows中编译，请赐教。&lt;/p>
&lt;h2 id="工具">&lt;a href="#%e5%b7%a5%e5%85%b7" class="header-anchor">&lt;/a>工具
&lt;/h2>&lt;p>文中使用的开发环境&lt;/p>
&lt;ol>
&lt;li>系统: &lt;code>Debian GNU/Linux 10 (buster)&lt;/code>&lt;/li>
&lt;li>linux内核: &lt;code>4.19.0-14&lt;/code>&lt;/li>
&lt;li>gcc版本: &lt;code>8.3.0&lt;/code>&lt;/li>
&lt;/ol>
&lt;h2 id="准备知识">&lt;a href="#%e5%87%86%e5%a4%87%e7%9f%a5%e8%af%86" class="header-anchor">&lt;/a>准备知识
&lt;/h2>&lt;p>epoll是linux内核提供的功能，这个功能对外提供系统调用，在C/C++中通过三个函数对用户提供功能&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;code>epoll_create(int __size)&lt;/code> 创建一个epoll，&lt;strong>_size&lt;/strong> 参数在linux2.6内核之后就没有什么作用了, 但是要&amp;gt;0，一般直接填 &lt;strong>1&lt;/strong> 就好了。函数返回创建的epoll的文件描述符，如果创建失败，会返回 -1。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>epoll_ctl(nt __epfd, int __op, int __fd,struct epoll_event *__event)&lt;/code> 操作已有的epoll,&lt;strong>epfd&lt;/strong>epoll的文件描述符；&lt;strong>op&lt;/strong>操作方式，有添加、删除、修改等等；&lt;strong>_fd&lt;/strong> 要操作对象的描述符，如果是操作tcp连接，也会就是这个连接的描述符。&lt;strong>_event&lt;/strong> epoll 的响应事件，当epoll管理的tcp连接有事件发生时，会通过 _event 这个对象传递出来，所以在添加连接时，要把这个连接包装成一个 &lt;strong>epoll_event&lt;/strong> 对象 &lt;/br>&lt;/p>
&lt;ul>
&lt;li>op 类型&lt;/li>
&lt;li>&lt;strong>EPOLL_CTL_ADD&lt;/strong> 添加一个描述符&lt;/li>
&lt;li>&lt;strong>EPOLL_CTL_DEL&lt;/strong> 删除一个描述符&lt;/li>
&lt;li>&lt;strong>EPOLL_CTL_MOD&lt;/strong> 修改一个描述符&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>epoll_wait(int __epfd, struct epoll_event *__events,int __maxevents, int __timeout)&lt;/code> 当epoll管理的连接中有响应事件发生时,会回调这个函数。&lt;strong>epfd&lt;/strong>epoll的文件描述符；&lt;strong>__events&lt;/strong> 可以操作的连接数组；&lt;strong>__maxevents&lt;/strong> 一个可以处理的最大事件数量；&lt;strong>__timeout&lt;/strong> 超时时间（单位毫秒），如果填-1，会直到有可操作事件发生时才会返回，因为C++不支持函数多返回值，像Go可以直接返回所有事件和数量了 (╥╯^╰╥)。&lt;br>&lt;/p>
&lt;p>events 中的常用的类型：&lt;br>&lt;/p>
&lt;ul>
&lt;li>EPOLLIN ：表示对应的文件描述符可以读（SOCKET正常关闭）&lt;/li>
&lt;li>EPOLLOUT：表示对应的文件描述符可以写&lt;/li>
&lt;li>EPOLLPRI：表示对应的文件描述符有紧急的数据可读（表示有带外数据到来）&lt;/li>
&lt;li>EPOLLERR：表示对应的文件描述符发生错误(默认注册)&lt;/li>
&lt;li>EPOLLHUP：表示对应的文件描述符被挂断(默认注册)&lt;/li>
&lt;li>EPOLLET： 将EPOLL设为边缘触发(Edge Triggered)模式，这是相对于水平触发(Level Triggered)来说的&lt;/li>
&lt;li>EPOLLONESHOT：只监听一次事件，当监听完这次事件之后，如果还需要继续监听这个socket的话，需要再次把这个socket加入到EPOLL队列里
是不是很惊奇，这么牛逼的epoll就三个函数，第一次看到的时候我也觉得很奇怪，三个函数就能搞定那么复杂的事情。不过想想也是，把复杂的东西简化，才能体现出大神的实力&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="epoll的两种模式">&lt;a href="#epoll%e7%9a%84%e4%b8%a4%e7%a7%8d%e6%a8%a1%e5%bc%8f" class="header-anchor">&lt;/a>epoll的两种模式
&lt;/h3>&lt;p>epoll 事件有两种模型 &lt;strong>Level Triggered&lt;/strong> (LT) 和 &lt;strong>Edge Triggered&lt;/strong> (ET)：&lt;/br>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>LT(level triggered，水平触发模式)是默认的工作方式，并且同时支持 block 和 non-block socket。在这种做法中，内核告诉你一个文件描述符是否就绪了，然后你可以对这个就绪的fd进行IO操作。如果你不作任何操作，内核还是会继续通知你的，所以，这种模式编程出错误可能性要小一点。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ET(edge-triggered，边缘触发模式)是高速工作方式，只支持no-block socket。在这种模式下，当描述符从未就绪变为就绪时，内核通过epoll告诉你。然后它会假设你知道文件描述符已经就绪，并且不会再为那个文件描述符发送更多的就绪通知，等到下次有新的数据进来的时候才会再次出发就绪事件。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>把socket设置为非阻塞模式的方法&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> flags &lt;span style="color:#ff79c6">=&lt;/span> fcntl(fd, F_GETFL, &lt;span style="color:#bd93f9">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span>fcntl(fd, F_SETFL, flags &lt;span style="color:#ff79c6">|&lt;/span> O_NONBLOCK);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>需要的头文件 &lt;code>#include &amp;lt;fcntl.h&amp;gt;&lt;/code>&lt;/p>
&lt;h2 id="epoll原理">&lt;a href="#epoll%e5%8e%9f%e7%90%86" class="header-anchor">&lt;/a>epoll原理
&lt;/h2>&lt;p>简单通过画图解释一下epoll的工作原理
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-cb78a80f112544ea.webp">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-cb78a80f112544ea.webp" alt="" />
&lt;/a>
&lt;/div>
&lt;/p>
&lt;p>这里没有涉及太底层的东西，因为太底层的我也没研究过，不敢乱讲。知之为知之，不知为不知。&lt;/br>
epoll可以看做是一个由操作系统提供的容器，这个容器管理了一些 &lt;strong>epoll_event&lt;/strong> （图中我画成单向链表了，实际上用的是红黑树，因为画树太麻烦了），这个event是我们添加进去的，event中设置了要响应的事件类型，当epoll 检测到具体的 event 有对应的事件发生时，会通过&lt;strong>epoll_wait()&lt;/strong> 通知。&lt;/p>
&lt;h2 id="简单的epoll实现">&lt;a href="#%e7%ae%80%e5%8d%95%e7%9a%84epoll%e5%ae%9e%e7%8e%b0" class="header-anchor">&lt;/a>简单的epoll实现
&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#6272a4">//控制台输出
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;sys/socket.h&amp;gt;&lt;/span>&lt;span style="color:#6272a4">//创建socket
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;netinet/in.h&amp;gt;&lt;/span>&lt;span style="color:#6272a4">//socket addr
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;sys/epoll.h&amp;gt;&lt;/span>&lt;span style="color:#6272a4">//epoll
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span style="color:#6272a4">//close函数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;fcntl.h&amp;gt;&lt;/span>&lt;span style="color:#6272a4">//设置非阻塞
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span>&lt;span style="color:#ff79c6">using&lt;/span> &lt;span style="color:#ff79c6">namespace&lt;/span> std;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 10&lt;/span>&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 11&lt;/span>&lt;span> &lt;span style="color:#ff79c6">const&lt;/span> &lt;span style="color:#8be9fd">int&lt;/span> EVENTS_SIZE &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">20&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 12&lt;/span>&lt;span> &lt;span style="color:#6272a4">//读socket的数组
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 13&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#8be9fd">char&lt;/span> buff[&lt;span style="color:#bd93f9">1024&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 14&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 15&lt;/span>&lt;span> &lt;span style="color:#6272a4">//创建一个tcp socket
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 16&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#8be9fd">int&lt;/span> socketFd &lt;span style="color:#ff79c6">=&lt;/span> socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 17&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 18&lt;/span>&lt;span> &lt;span style="color:#6272a4">//设置socket监听的地址和端口
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 19&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> sockaddr_in sockAddr{};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 20&lt;/span>&lt;span> sockAddr.sin_port &lt;span style="color:#ff79c6">=&lt;/span> htons(&lt;span style="color:#bd93f9">8088&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 21&lt;/span>&lt;span> sockAddr.sin_family &lt;span style="color:#ff79c6">=&lt;/span> AF_INET;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 22&lt;/span>&lt;span> sockAddr.sin_addr.s_addr &lt;span style="color:#ff79c6">=&lt;/span> htons(INADDR_ANY);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 23&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 24&lt;/span>&lt;span> &lt;span style="color:#6272a4">//将socket和地址绑定
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 25&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#ff79c6">if&lt;/span> (bind(socketFd, (sockaddr &lt;span style="color:#ff79c6">*&lt;/span>) &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>sockAddr, &lt;span style="color:#ff79c6">sizeof&lt;/span>(sockAddr)) &lt;span style="color:#ff79c6">==&lt;/span> &lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 26&lt;/span>&lt;span> cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;bind error&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 27&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 28&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 29&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 30&lt;/span>&lt;span> &lt;span style="color:#6272a4">//开始监听socket,当调用listen之后,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 31&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#6272a4">//进程就可以调用accept来接受一个外来的请求
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 32&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#6272a4">//第二个参数,请求队列的长度
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 33&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#ff79c6">if&lt;/span> (listen(socketFd, &lt;span style="color:#bd93f9">10&lt;/span>) &lt;span style="color:#ff79c6">==&lt;/span> &lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 34&lt;/span>&lt;span> cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;listen error&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 35&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 36&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 37&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 38&lt;/span>&lt;span> &lt;span style="color:#6272a4">//创建一个epoll,size已经不起作用了,一般填1就好了
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 39&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#8be9fd">int&lt;/span> eFd &lt;span style="color:#ff79c6">=&lt;/span> epoll_create(&lt;span style="color:#bd93f9">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 40&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 41&lt;/span>&lt;span> &lt;span style="color:#6272a4">//把socket包装成一个epoll_event对象
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 42&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#6272a4">//并添加到epoll中
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 43&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> epoll_event epev{};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 44&lt;/span>&lt;span> epev.events &lt;span style="color:#ff79c6">=&lt;/span> EPOLLIN;&lt;span style="color:#6272a4">//可以响应的事件,这里只响应可读就可以了
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 45&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> epev.data.fd &lt;span style="color:#ff79c6">=&lt;/span> socketFd;&lt;span style="color:#6272a4">//socket的文件描述符
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 46&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> epoll_ctl(eFd, EPOLL_CTL_ADD, socketFd, &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>epev);&lt;span style="color:#6272a4">//添加到epoll中
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 47&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 48&lt;/span>&lt;span> &lt;span style="color:#6272a4">//回调事件的数组,当epoll中有响应事件时,通过这个数组返回
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 49&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> epoll_event events[EVENTS_SIZE];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 50&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 51&lt;/span>&lt;span> &lt;span style="color:#6272a4">//整个epoll_wait 处理都要在一个死循环中处理
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 52&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#ff79c6">while&lt;/span> (&lt;span style="color:#8be9fd;font-style:italic">true&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 53&lt;/span>&lt;span> &lt;span style="color:#6272a4">//这个函数会阻塞,直到超时或者有响应事件发生
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 54&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#8be9fd">int&lt;/span> eNum &lt;span style="color:#ff79c6">=&lt;/span> epoll_wait(eFd, events, EVENTS_SIZE, &lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 55&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 56&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (eNum &lt;span style="color:#ff79c6">==&lt;/span> &lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 57&lt;/span>&lt;span> cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;epoll_wait&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 58&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 59&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 60&lt;/span>&lt;span> &lt;span style="color:#6272a4">//遍历所有的事件
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 61&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#ff79c6">for&lt;/span> (&lt;span style="color:#8be9fd">int&lt;/span> i &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>; i &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> eNum; i&lt;span style="color:#ff79c6">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 62&lt;/span>&lt;span> &lt;span style="color:#6272a4">//判断这次是不是socket可读(是不是有新的连接)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 63&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#ff79c6">if&lt;/span> (events[i].data.fd &lt;span style="color:#ff79c6">==&lt;/span> socketFd) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 64&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (events[i].events &lt;span style="color:#ff79c6">&amp;amp;&lt;/span> EPOLLIN) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 65&lt;/span>&lt;span> sockaddr_in cli_addr{};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 66&lt;/span>&lt;span> socklen_t length &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">sizeof&lt;/span>(cli_addr);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 67&lt;/span>&lt;span> &lt;span style="color:#6272a4">//接受来自socket连接
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 68&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#8be9fd">int&lt;/span> fd &lt;span style="color:#ff79c6">=&lt;/span> accept(socketFd, (sockaddr &lt;span style="color:#ff79c6">*&lt;/span>) &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>cli_addr, &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>length);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 69&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (fd &lt;span style="color:#ff79c6">&amp;gt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 70&lt;/span>&lt;span> &lt;span style="color:#6272a4">//设置响应事件,设置可读和边缘(ET)模式
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 71&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#6272a4">//很多人会把可写事件(EPOLLOUT)也注册了,后面会解释
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 72&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> epev.events &lt;span style="color:#ff79c6">=&lt;/span> EPOLLIN &lt;span style="color:#ff79c6">|&lt;/span> EPOLLET;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 73&lt;/span>&lt;span> epev.data.fd &lt;span style="color:#ff79c6">=&lt;/span> fd;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 74&lt;/span>&lt;span> &lt;span style="color:#6272a4">//设置连接为非阻塞模式
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 75&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#8be9fd">int&lt;/span> flags &lt;span style="color:#ff79c6">=&lt;/span> fcntl(fd, F_GETFL, &lt;span style="color:#bd93f9">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 76&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (flags &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 77&lt;/span>&lt;span> cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;set no block error, fd:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> fd &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 78&lt;/span>&lt;span> &lt;span style="color:#ff79c6">continue&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 79&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 80&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (fcntl(fd, F_SETFL, flags &lt;span style="color:#ff79c6">|&lt;/span> O_NONBLOCK) &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 81&lt;/span>&lt;span> cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;set no block error, fd:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> fd &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 82&lt;/span>&lt;span> &lt;span style="color:#ff79c6">continue&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 83&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 84&lt;/span>&lt;span> &lt;span style="color:#6272a4">//将新的连接添加到epoll中
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 85&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> epoll_ctl(eFd, EPOLL_CTL_ADD, fd, &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>epev);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 86&lt;/span>&lt;span> cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;client on line fd:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> fd &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 87&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 88&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 89&lt;/span>&lt;span> } &lt;span style="color:#ff79c6">else&lt;/span> {&lt;span style="color:#6272a4">//不是socket的响应事件
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 90&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 91&lt;/span>&lt;span> &lt;span style="color:#6272a4">//判断是不是断开和连接出错
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 92&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#6272a4">//因为连接断开和出错时,也会响应`EPOLLIN`事件
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 93&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#ff79c6">if&lt;/span> (events[i].events &lt;span style="color:#ff79c6">&amp;amp;&lt;/span> EPOLLERR &lt;span style="color:#ff79c6">||&lt;/span> events[i].events &lt;span style="color:#ff79c6">&amp;amp;&lt;/span> EPOLLHUP) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 94&lt;/span>&lt;span> &lt;span style="color:#6272a4">//出错时,从epoll中删除对应的连接
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 95&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#6272a4">//第一个是要操作的epoll的描述符
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 96&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#6272a4">//因为是删除,所有event参数天null就可以了
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 97&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> epoll_ctl(eFd, EPOLL_CTL_DEL, events[i].data.fd, &lt;span style="color:#ff79c6">nullptr&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 98&lt;/span>&lt;span> cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;client out fd:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> events[i].data.fd &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 99&lt;/span>&lt;span> close(events[i].data.fd);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">100&lt;/span>&lt;span> } &lt;span style="color:#ff79c6">else&lt;/span> &lt;span style="color:#ff79c6">if&lt;/span> (events[i].events &lt;span style="color:#ff79c6">&amp;amp;&lt;/span> EPOLLIN) {&lt;span style="color:#6272a4">//如果是可读事件
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">101&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">102&lt;/span>&lt;span> &lt;span style="color:#6272a4">//如果在windows中,读socket中的数据要用recv()函数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">103&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#8be9fd">int&lt;/span> len &lt;span style="color:#ff79c6">=&lt;/span> read(events[i].data.fd, buff, &lt;span style="color:#ff79c6">sizeof&lt;/span>(buff));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">104&lt;/span>&lt;span> &lt;span style="color:#6272a4">//如果读取数据出错,关闭并从epoll中删除连接
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">105&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#ff79c6">if&lt;/span> (len &lt;span style="color:#ff79c6">==&lt;/span> &lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">106&lt;/span>&lt;span> epoll_ctl(eFd, EPOLL_CTL_DEL, events[i].data.fd, &lt;span style="color:#ff79c6">nullptr&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">107&lt;/span>&lt;span> cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;client out fd:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> events[i].data.fd &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">108&lt;/span>&lt;span> close(events[i].data.fd);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">109&lt;/span>&lt;span> } &lt;span style="color:#ff79c6">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">110&lt;/span>&lt;span> &lt;span style="color:#6272a4">//正常读取,打印读到的数据
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">111&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> buff &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">112&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">113&lt;/span>&lt;span> &lt;span style="color:#6272a4">//向客户端发数据
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">114&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#8be9fd">char&lt;/span> a[] &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;123456&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">115&lt;/span>&lt;span> &lt;span style="color:#6272a4">//如果在windows中,向socket中写数据要用send()函数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">116&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> write(events[i].data.fd, a, &lt;span style="color:#ff79c6">sizeof&lt;/span>(a));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">117&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">118&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">119&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">120&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">121&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">122&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>常见的问题和注意事项在注释中，就单解释一下新连接注册事件的问题吧，很多文章中都会把可写事件也注册进去，像这样&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C++" data-lang="C++">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>sockaddr_in cli_addr{};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>socklen_t length &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">sizeof&lt;/span>(cli_addr);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span>&lt;span style="color:#6272a4">//接受来自socket连接
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>&lt;span style="color:#8be9fd">int&lt;/span> fd &lt;span style="color:#ff79c6">=&lt;/span> accept(socketFd, (sockaddr &lt;span style="color:#ff79c6">*&lt;/span>) &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>cli_addr, &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>length);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span>&lt;span style="color:#ff79c6">if&lt;/span> (fd &lt;span style="color:#ff79c6">&amp;gt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span> epev.events &lt;span style="color:#ff79c6">=&lt;/span> EPOLLIN &lt;span style="color:#ff79c6">|&lt;/span> EPOLLET &lt;span style="color:#ff79c6">|&lt;/span> EPOLLOUT;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span> epev.data.fd &lt;span style="color:#ff79c6">=&lt;/span> fd;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span> epoll_ctl(eFd, EPOLL_CTL_ADD, fd, &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>epev);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span> cout &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;client on line fd:&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> fd &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>但是经过测试，不注册可写事件，直接往socket中写也是可以的&lt;br>
经过查资料得知:&lt;br>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>EPOLLIN&lt;/strong> : 如果状态改变了(比如 从无到有)，只要输入缓冲区可读就会触发&lt;/li>
&lt;li>&lt;strong>EPOLLOUT&lt;/strong> : 如果状态改变了(比如 从满到不满)，只要输出缓冲区可写就会触
如果把可写也注册上，会频繁回调，这里会有很多无用的回调，导致性能下降。
有一种思路，当向socket写失败后（write函数返回值 == -1），注册上 &lt;strong>EPOLLOUT&lt;/strong> 当响应了可写事件后，重新往socket中写数据，写成功后，再取消掉 &lt;strong>EPOLLOUT&lt;/strong>。 这里就不给出示例了&lt;/li>
&lt;/ul>
&lt;h2 id="客户端测试">&lt;a href="#%e5%ae%a2%e6%88%b7%e7%ab%af%e6%b5%8b%e8%af%95" class="header-anchor">&lt;/a>客户端测试
&lt;/h2>&lt;p>这次关注的是服务端实现，客户端就不用C++写了，用Go写了一个client（没别的原因，只是因为Go写起了简单）&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">package&lt;/span> main
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span>&lt;span style="color:#ff79c6">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;net&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;sync&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;time&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">const&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span> MAX_CONN = &lt;span style="color:#bd93f9">10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">func&lt;/span> &lt;span style="color:#50fa7b">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span> &lt;span style="color:#8be9fd;font-style:italic">var&lt;/span> wg sync.WaitGroup
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span> wg.&lt;span style="color:#50fa7b">Add&lt;/span>(&lt;span style="color:#bd93f9">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span> &lt;span style="color:#ff79c6">for&lt;/span> i &lt;span style="color:#ff79c6">:=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>; i &amp;lt; MAX_CONN; i&lt;span style="color:#ff79c6">++&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span> &lt;span style="color:#ff79c6">go&lt;/span> &lt;span style="color:#50fa7b">Conn&lt;/span>(&lt;span style="color:#f1fa8c">&amp;#34;192.168.199.164:8088&amp;#34;&lt;/span>, i)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>&lt;span> time.&lt;span style="color:#50fa7b">Sleep&lt;/span>(time.Millisecond &lt;span style="color:#ff79c6">*&lt;/span> &lt;span style="color:#bd93f9">100&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21&lt;/span>&lt;span> wg.&lt;span style="color:#50fa7b">Wait&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">func&lt;/span> &lt;span style="color:#50fa7b">Conn&lt;/span>(addr &lt;span style="color:#8be9fd">string&lt;/span>, id &lt;span style="color:#8be9fd">int&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25&lt;/span>&lt;span> conn, err &lt;span style="color:#ff79c6">:=&lt;/span> net.&lt;span style="color:#50fa7b">Dial&lt;/span>(&lt;span style="color:#f1fa8c">&amp;#34;tcp&amp;#34;&lt;/span>, addr)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> err &lt;span style="color:#ff79c6">!=&lt;/span> &lt;span style="color:#ff79c6">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27&lt;/span>&lt;span> fmt.&lt;span style="color:#50fa7b">Println&lt;/span>(err)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30&lt;/span>&lt;span> fmt.&lt;span style="color:#50fa7b">Println&lt;/span>(&lt;span style="color:#f1fa8c">&amp;#34;connect &amp;#34;&lt;/span>, id)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31&lt;/span>&lt;span> &lt;span style="color:#ff79c6">go&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">func&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32&lt;/span>&lt;span> buf &lt;span style="color:#ff79c6">:=&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">make&lt;/span>([]&lt;span style="color:#8be9fd">byte&lt;/span>, &lt;span style="color:#bd93f9">1024&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33&lt;/span>&lt;span> &lt;span style="color:#ff79c6">for&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34&lt;/span>&lt;span> n, err &lt;span style="color:#ff79c6">:=&lt;/span> conn.&lt;span style="color:#50fa7b">Read&lt;/span>(buf)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> err &lt;span style="color:#ff79c6">!=&lt;/span> &lt;span style="color:#ff79c6">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36&lt;/span>&lt;span> &lt;span style="color:#ff79c6">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38&lt;/span>&lt;span> fmt.&lt;span style="color:#50fa7b">Println&lt;/span>(id, &lt;span style="color:#f1fa8c">&amp;#34;read: &amp;#34;&lt;/span>, &lt;span style="color:#8be9fd;font-style:italic">string&lt;/span>(buf[:n]))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40&lt;/span>&lt;span> }()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41&lt;/span>&lt;span> time.&lt;span style="color:#50fa7b">Sleep&lt;/span>(time.Second &lt;span style="color:#ff79c6">*&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42&lt;/span>&lt;span> &lt;span style="color:#ff79c6">for&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43&lt;/span>&lt;span> _, err &lt;span style="color:#ff79c6">:=&lt;/span> conn.&lt;span style="color:#50fa7b">Write&lt;/span>([]&lt;span style="color:#8be9fd;font-style:italic">byte&lt;/span>(&lt;span style="color:#f1fa8c">&amp;#34;hello&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">44&lt;/span>&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> err &lt;span style="color:#ff79c6">!=&lt;/span> &lt;span style="color:#ff79c6">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">45&lt;/span>&lt;span> &lt;span style="color:#ff79c6">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">46&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">47&lt;/span>&lt;span> time.&lt;span style="color:#50fa7b">Sleep&lt;/span>(time.Second &lt;span style="color:#ff79c6">*&lt;/span> &lt;span style="color:#bd93f9">10&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">48&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">49&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这只是一个测试用的，写的很粗糙，但是不影响使用&lt;/p>
&lt;p>服务端打印信息
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-8fb0e898063f3db7.webp">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-8fb0e898063f3db7.webp" alt="服务端" />
&lt;/a>
&lt;/div>
&lt;/p>
&lt;p>客户端打印信息
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-42cda40faa00d188.webp">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-42cda40faa00d188.webp" alt="客户端" />
&lt;/a>
&lt;/div>
&lt;/p>
&lt;h2 id="总结">&lt;a href="#%e6%80%bb%e7%bb%93" class="header-anchor">&lt;/a>总结
&lt;/h2>&lt;ol>
&lt;li>epoll是socket多路复用技术的一种，还有select和poll&lt;/li>
&lt;li>epoll 只能在linux使用(Windows下怎么用我没找到,如果说错了请指正)&lt;/li>
&lt;li>epoll 事件有 Level Triggered (LT) 和 Edge Triggered (ET) 两种模型，LT是默认模式，ET是高性能模式&lt;/li>
&lt;/ol>
&lt;p>另外，我使用面向对象的方式封装了一个epoll的tcpserver 代码有点多，就不贴在这了，已经上传
&lt;a class="link" href="https://github.com/lqxhub/epoll_server" target="_blank" rel="noopener"
>github&lt;/a>
&lt;a class="link" href="https://gitee.com/lqxlucky/epoll_server" target="_blank" rel="noopener"
>码云&lt;/a>&lt;/p>
&lt;p>欢迎给点个star ヾ(o◕∀◕)ﾉヾ&lt;/p></description></item><item><title>linux shell 脚本 常用的if判断条件</title><link>https://lqxhub.github.io/posts/6cd27815/</link><pubDate>Sat, 13 Mar 2021 11:27:54 +0000</pubDate><guid>https://lqxhub.github.io/posts/6cd27815/</guid><description>&lt;p>工作中经常需要写shell脚本来处理一些重复的东西，使用脚本自动编译，使用脚本多机器传输文件。&lt;/p>
&lt;p>因为不是天天写shell，只是用到的时候写一个，再加上脚本中的if的判断条件有点多，容易忘记，所以做个备忘录，以备不时之需&lt;/p>
&lt;h2 id="先说一下-if-表达式的基本语法">&lt;a href="#%e5%85%88%e8%af%b4%e4%b8%80%e4%b8%8b-if-%e8%a1%a8%e8%be%be%e5%bc%8f%e7%9a%84%e5%9f%ba%e6%9c%ac%e8%af%ad%e6%b3%95" class="header-anchor">&lt;/a>先说一下 if 表达式的基本语法
&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">if&lt;/span> &lt;span style="color:#ff79c6">[&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">command&lt;/span> &lt;span style="color:#ff79c6">]&lt;/span>; &lt;span style="color:#ff79c6">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span> 符合该条件执行的语句
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3&lt;/span>&lt;span>&lt;span style="color:#ff79c6">fi&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">if&lt;/span> &lt;span style="color:#ff79c6">[&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">command&lt;/span> &lt;span style="color:#ff79c6">]&lt;/span>;&lt;span style="color:#ff79c6">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span> 符合该条件执行的语句
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3&lt;/span>&lt;span>&lt;span style="color:#ff79c6">elif&lt;/span> &lt;span style="color:#ff79c6">[&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">command&lt;/span> &lt;span style="color:#ff79c6">]&lt;/span>;&lt;span style="color:#ff79c6">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4&lt;/span>&lt;span> 符合该条件执行的语句
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5&lt;/span>&lt;span>&lt;span style="color:#ff79c6">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6&lt;/span>&lt;span> 符合该条件执行的语句
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7&lt;/span>&lt;span>&lt;span style="color:#ff79c6">fi&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>注意：&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>if 条件 要以 &lt;code>fi&lt;/code> 结束&lt;/li>
&lt;li>&lt;code>[]&lt;/code> if语句中 和 表达式要注意空格&lt;/li>
&lt;li>&lt;code>then&lt;/code> 和 &lt;code>fi&lt;/code> 是分开的语句。如果要在同一行里面输入，则需要用分号将他们隔开&lt;/li>
&lt;li>使用 &lt;code>-z&lt;/code> 或者 &lt;code>-n&lt;/code> 来检查长度的时候，没有定义的变量也为0&lt;/li>
&lt;/ol>
&lt;h2 id="下面是常用表达式">&lt;a href="#%e4%b8%8b%e9%9d%a2%e6%98%af%e5%b8%b8%e7%94%a8%e8%a1%a8%e8%be%be%e5%bc%8f" class="header-anchor">&lt;/a>下面是常用表达式
&lt;/h2>&lt;h3 id="数字判断">&lt;a href="#%e6%95%b0%e5%ad%97%e5%88%a4%e6%96%ad" class="header-anchor">&lt;/a>数字判断
&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>表达式&lt;/th>
&lt;th>含义&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>int1 -eq int2&lt;/td>
&lt;td>两数相等为真&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>int1 -ne int2&lt;/td>
&lt;td>两数不等为真&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>int1 -gt int2&lt;/td>
&lt;td>int1大于int2为真&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>int1 -ge int2&lt;/td>
&lt;td>int1大于等于int2为真&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>int1 -lt int2&lt;/td>
&lt;td>int1小于int2为真&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>int1 -le int2&lt;/td>
&lt;td>int1小于等于int2为真&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="逻辑相关">&lt;a href="#%e9%80%bb%e8%be%91%e7%9b%b8%e5%85%b3" class="header-anchor">&lt;/a>逻辑相关
&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>表达式&lt;/th>
&lt;th>含义&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>-a&lt;/td>
&lt;td>与&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-o　&lt;/td>
&lt;td>或&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>!&lt;/td>
&lt;td>　非&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="字符串相关">&lt;a href="#%e5%ad%97%e7%ac%a6%e4%b8%b2%e7%9b%b8%e5%85%b3" class="header-anchor">&lt;/a>字符串相关
&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>表达式&lt;/th>
&lt;th>含义&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>STRING　&lt;/td>
&lt;td>当串str1为非空时为真&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-z STRING&lt;/td>
&lt;td>“STRING” 的长度为零则为真&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-n STRING&lt;/td>
&lt;td>“STRING” 的长度为非零 non-zero则为真&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>STRING1 == STRING2&lt;/td>
&lt;td>如果2个字符串相同则为真&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>STRING1 != STRING2&lt;/td>
&lt;td>如果字符串不相等则为&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="文件相关">&lt;a href="#%e6%96%87%e4%bb%b6%e7%9b%b8%e5%85%b3" class="header-anchor">&lt;/a>文件相关
&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>表达式&lt;/th>
&lt;th>含义&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>-a FILE&lt;/td>
&lt;td>如果 FILE 存在则为真&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-b FILE&lt;/td>
&lt;td>如果 FILE 存在且是一个块特殊文件则为真&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-c FILE&lt;/td>
&lt;td>如果 FILE 存在且是一个字特殊文件则为真&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-d FILE&lt;/td>
&lt;td>如果 FILE 存在且是一个目录则为真&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-e FILE&lt;/td>
&lt;td>如果 FILE 存在则为真&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-f FILE&lt;/td>
&lt;td>如果 FILE 存在且是一个普通文件则为真&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-g FILE&lt;/td>
&lt;td>如果 FILE 存在且已经设置了SGID则为真&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-h FILE&lt;/td>
&lt;td>如果 FILE 存在且是一个符号连接则为真&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-k FILE&lt;/td>
&lt;td>如果 FILE 存在且已经设置了粘制位则为真&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-p FILE&lt;/td>
&lt;td>如果 FILE 存在且是一个名字管道(F如果O)则为真&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-r FILE&lt;/td>
&lt;td>如果 FILE 存在且是可读的则为真&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-s FILE&lt;/td>
&lt;td>如果 FILE 存在且大小不为0则为真&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-t FD&lt;/td>
&lt;td>如果文件描述符 FD 打开且指向一个终端则为真&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-u FILE&lt;/td>
&lt;td>如果 FILE 存在且设置了SUID (set user ID)则为真&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-w FILE&lt;/td>
&lt;td>如果 FILE 如果 FILE 存在且是可写的则为真&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-x FILE&lt;/td>
&lt;td>如果 FILE 存在且是可执行的则为真&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-O FILE&lt;/td>
&lt;td>如果 FILE 存在且属有效用户ID则为真&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-G FILE&lt;/td>
&lt;td>如果 FILE 存在且属有效用户组则为真&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-L FILE&lt;/td>
&lt;td>如果 FILE 存在且是一个符号连接则为真&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-S FILE&lt;/td>
&lt;td>如果 FILE 存在且是一个套接字则为真&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>FILE1 -ot FILE2&lt;/td>
&lt;td>如果 FILE1 比 FILE2 要老, 或者 FILE2 存在且 FILE1 不存在则为真&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>FILE1 -ef FILE2&lt;/td>
&lt;td>如果 FILE1 和 FILE2 指向相同的设备和节点号则为真&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-o OPTIONNAME&lt;/td>
&lt;td>如果 shell选项 “OPTIONNAME” 开启则为真&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>ansible 在参数中传入密码</title><link>https://lqxhub.github.io/posts/f6596db0/</link><pubDate>Sat, 13 Jun 2020 17:06:53 +0000</pubDate><guid>https://lqxhub.github.io/posts/f6596db0/</guid><description>&lt;p>ansible是一个基于python开发自动化的运维工具，这个工具强大的地方是，被操作的机器上不需要安装任何软件，只需要在发起操作的机器上安装就可以使用了。
而且ansible支持很多模块，还可以基于ansible二次开发，添加自己的功能&lt;/p>
&lt;p>ansible功能和模块很多，这次我们只讲其中的一个。在命令行中，直接把要操作主机的用户名和密码传入。别的东西等以后有时间会继续写的，毕竟996太累了&lt;/p>
&lt;p>正常使用ansible一般都是 在 &lt;code>/ect/ansible/hosts&lt;/code> 中配置远程主机的用户和密码
一般写法&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>[test]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span>one ansible_ssh_host=192.168.199.209 ansible_ssh_port=22 ansible_ssh_user=root ansible_ssh_pass=123456
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后使用命令行
&lt;code>ansible test -m ping&lt;/code>
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-cfb7e759ab9cb508.webp">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-cfb7e759ab9cb508.webp" alt="" />
&lt;/a>
&lt;/div>
&lt;/p>
&lt;p>看到截图，说明已经ping通，说明配置是没问题的&lt;/p>
&lt;p>有时候，需要单独指定连接一台主机，或者只是临时连接一次，这时候没必要在&lt;strong>hosts&lt;/strong>文件中配置，可以直接在命令行中传入主机ip和连接用户名和密码
&lt;code>ansible all -i &amp;quot;192.168.199.209:22,&amp;quot; -m ping -e&amp;quot;ansible_user=root ansible_password=123456&amp;quot;&lt;/code>
&lt;strong>注意&lt;/strong>：ip后面一定要有一个&amp;quot;,&amp;quot;
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-e2301bcfad8e9e6a.webp">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-e2301bcfad8e9e6a.webp" alt="" />
&lt;/a>
&lt;/div>
&lt;/p>
&lt;p>截图中，说明没问题&lt;/p>
&lt;p>好了先写这些，ansible模块跟多，功能很多。尤其是playbook这个东西，更是牛逼，以后有时间继续写&lt;/p></description></item><item><title>使用tcpdump+wireshark抓包分析网络数据包</title><link>https://lqxhub.github.io/posts/a3fd02f/</link><pubDate>Sun, 16 Dec 2018 10:54:33 +0000</pubDate><guid>https://lqxhub.github.io/posts/a3fd02f/</guid><description>&lt;p>最近和学弟在调试一个GPRS通信模块,需求是通过GPRS模块通过http协议发送数据到服务器,但是http协议一直失败,服务器返回400,通过查询http状态码得知,http400错误是请求无效,因为GPRS模块没有实现http协议的封装,需要在TCP协议的基础上,手动拼装http格式的报文.所以初步猜测是http协议格式错误导致的.&lt;/p>
&lt;p>这时候,最简单有效的调错方式就是通过抓包分析,查看数据格式,然后修改.但是在GPRS模块上没法安装抓包工具,只能在服务器上抓包,服务器是centos的,虽然有tcpdump工具,但是没有界面,没法具体分析数据包.
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-07e76fa9d331441d.webp">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-07e76fa9d331441d.webp" alt="tcpdump" />
&lt;/a>
&lt;/div>
直接使用tcpdump抓到的数据包,根本没法分析好不.&lt;/p>
&lt;p>在windows上,有wireshark这个工具,可以很方便的分析网络数据包,这个软件有多牛鼻就不用多说了,所有经过网卡数据都能抓到,配合图形界面,可以很方便的查看分析数据.不知能查看应用层协议的数据,网络中的五层协议都能查看.
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-3c4762f575fb0262.webp">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-3c4762f575fb0262.webp" alt="wireshark" />
&lt;/a>
&lt;/div>
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-98ef788511211707.png">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-98ef788511211707.png" alt="wireshark" />
&lt;/a>
&lt;/div>
有没有办法把tcpdump和wireshark这两个软件结合起来使用呢???
办法当然是有的,把tcpdump抓取的数据转存文件,然后用wireshark打开文件,分析数据.&lt;/p>
&lt;blockquote>
&lt;p>1.开启tcpdump抓包,并将结果转存为文件
&lt;code>tcpdump tcp -s 0 port 80 -w ./http.cap&lt;/code>
说一下这几个参数
&lt;code>tcp&lt;/code>是指定抓取那种协议的数据,因为我们要抓取http协议,但是tcp不能指定http协议,但是http协议是基于TCP协议的,所以抓取TCP协议数据.
&lt;code>-s 0&lt;/code> tcpdump 抓取数据包时默认抓取长度为68字节。加上-S 0 后可以抓到完整的数据包
&lt;code>port 80&lt;/code> 我的服务器监听的80端口,所以只抓取80端口的数据.
&lt;code>-w ./http.cap&lt;/code> 指定tcpdump转存数据时的文件 &lt;code>./http.cap&lt;/code>是当前目录下的http.cap文件&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;ol start="2">
&lt;li>发起请求
在终端中使用 &lt;strong>ctrl+c&lt;/strong>组合键结束抓包,然后会在当前目录下生成一个http.cap文件
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-729afb96de3efa57.webp">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-729afb96de3efa57.webp" alt="http.cap" />
&lt;/a>
&lt;/div>
&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;blockquote>
&lt;p>3.把文件下载下来,使用tcpdump分析数据
在wireshark中,通过&lt;strong>文件&lt;/strong>&amp;gt;&lt;strong>打开&lt;/strong> 找到从服务器下载的http.cap文件,并打开
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-f93441beb2843761.png">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-f93441beb2843761.png" alt="" />
&lt;/a>
&lt;/div>
到这已经成功打开了,剩下的就是分析数据包了
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-f324b589b3b8c925.png">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-f324b589b3b8c925.png" alt="wireshark" />
&lt;/a>
&lt;/div>
在协议http的那一行右键,选择追踪流,然后选择http
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-884eb6da73617670.png">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-884eb6da73617670.png" alt="http" />
&lt;/a>
&lt;/div>
&lt;/p>
&lt;/blockquote>
&lt;p>到这,整个抓包就完成了,是不是很简单呢&lt;/p>
&lt;p>经过抓包分析,终于解决了http400的问题&lt;/p></description></item><item><title>nginx反向代理webSocket配置</title><link>https://lqxhub.github.io/posts/83c41ef3/</link><pubDate>Sun, 21 Oct 2018 15:57:21 +0000</pubDate><guid>https://lqxhub.github.io/posts/83c41ef3/</guid><description>&lt;p>最近在做项目的时候用到了webSocket协议,而且是在微信小程序中用到了webSocket,微信小程序中使用wss协议的时候不能设置端口,只能使用默认的443端口。
我擦，我的https已经监听了443端口，webSocket再去监听443，肯定不行啊。要想办法解决，老大把这个问题交给我了，我愉快（手动懵逼）的接收了这个任务。想到了两种办法解决。
一种解决办法是把webSocket部署到另一台服务器上，这样成本也太高了。另一种办法，就是使用nginx反向代理。&lt;/p>
&lt;p>因为webSocket协议是基于http协议升级的（见下图），所以可以使用nginx反向代理webSocket.
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-0dd0a9b8d24ca99d.webp">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-0dd0a9b8d24ca99d.webp" alt="webSocket" />
&lt;/a>
&lt;/div>
从这张图片上可以看出，webSocket连接的建立是在http协议的基础上。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>GET /chat HTTP/1.1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span>Host: server.example.com
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3&lt;/span>&lt;span>Upgrade: websocket
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4&lt;/span>&lt;span>Connection: Upgrade
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5&lt;/span>&lt;span>Sec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw==
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6&lt;/span>&lt;span>Sec-WebSocket-Protocol: chat, superchat
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7&lt;/span>&lt;span>Sec-WebSocket-Version: 13
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8&lt;/span>&lt;span>Origin: http://example.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>熟悉HTTP的童鞋可能发现了，这段类似HTTP协议的握手请求中，只是多了几个东西。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>Upgrade: websocket
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span>Connection: Upgrade
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3&lt;/span>&lt;span>这个就是Websocket的核心了，告诉Apache、Nginx等服务器：我发起的是Websocket协议。
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4&lt;/span>&lt;span>Sec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw==
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5&lt;/span>&lt;span>Sec-WebSocket-Protocol: chat, superchat
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6&lt;/span>&lt;span>Sec-WebSocket-Version: 13
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>首先，Sec-WebSocket-Key 是一个Base64 encode的值，这个是浏览器随机生成的，告诉服务器：泥煤，不要忽悠窝，我要验证尼是不是真的是Websocket助理。
最后，Sec-WebSocket-Version 是告诉服务器所使用的Websocket Draft（协议版本），在最初的时候，Websocket协议还在 Draft 阶段，各种奇奇怪怪的协议都有，而且还有很多期奇奇怪怪不同的东西，什么Firefox和Chrome用的不是一个版本之类的，当初Websocket协议太多可是一个大难题。。不过现在还好，已经定下来啦&lt;del>大家都使用的一个东西&lt;/del>&lt;/p>
&lt;p>然后服务器会返回下列东西，表示已经接受到请求， 成功建立Websocket啦！&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>HTTP/1.1 101 Switching Protocols
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span>Upgrade: websocket
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3&lt;/span>&lt;span>Connection: Upgrade
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4&lt;/span>&lt;span>Sec-WebSocket-Accept: HSmrc0sMlYUkAGmm5OPpG2HaGWk=
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5&lt;/span>&lt;span>Sec-WebSocket-Protocol: chat
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里开始就是HTTP最后负责的区域了，告诉客户，我已经成功切换协议啦~&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>Upgrade: websocket
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span>Connection: Upgrade
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>依然是固定的，告诉客户端即将升级的是Websocket协议。至此，HTTP已经完成它所有工作了，接下来就是完全按照Websocket协议进行了。&lt;/p>
&lt;p>明白协议的原理了就可以下一步了&lt;/p>
&lt;h2 id="首先nginx先配置好https的证书">&lt;a href="#%e9%a6%96%e5%85%88nginx%e5%85%88%e9%85%8d%e7%bd%ae%e5%a5%bdhttps%e7%9a%84%e8%af%81%e4%b9%a6" class="header-anchor">&lt;/a>首先nginx先配置好https的证书
&lt;/h2>&lt;p>服务器的证书是老大配置好的，我就直接用了。&lt;/p>
&lt;p>在nginx配置文件的&lt;code>service&lt;/code>节点中添加如下配置&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>location /wss
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3&lt;/span>&lt;span> proxy_pass http://127.0.0.1:8888;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4&lt;/span>&lt;span> proxy_http_version 1.1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5&lt;/span>&lt;span> proxy_set_header Upgrade $http_upgrade;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6&lt;/span>&lt;span> proxy_set_header Connection &amp;#34;Upgrade&amp;#34;;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7&lt;/span>&lt;span> proxy_set_header X-Real-IP $remote_addr;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>解释一下参数
&lt;code>/wss&lt;/code>这个是随便起的,告诉Nginx要代理的url,现在我的设置为&lt;code>wss&lt;/code>,当我访问的我的服务器&lt;code>https://abc.com/wss&lt;/code>时,Nginx会把我的请求映射到本机的8888端口。
&lt;code>proxy_pass&lt;/code> 要代理到的url,我的代理到本机的8888端口。
&lt;code>proxy_http_version&lt;/code> 代理时使用的 http版本。
&lt;strong>重点来了:&lt;/strong>
代理webSocket的关键参数
&lt;code>proxy_set_header Upgrade&lt;/code> 把代理时http请求头的&lt;code>Upgrade&lt;/code> 设置为原来http请求的请求头,wss协议的请求头为&lt;code>websocket&lt;/code>
&lt;code>proxy_set_header Connection&lt;/code> 因为代理的wss协议,所以http请求头的&lt;code>Connection&lt;/code>设置为&lt;code>Upgrade&lt;/code>
&lt;code>proxy_set_header X-Real-IP&lt;/code> 给代理设置原http请求的ip,填写&lt;code>$remote_addr&lt;/code> 即可
至于websocket协议的response的参数，在反向代理的时候不用管。
到这里,Nginx反向代理webSocket的配置就完成了,重启Nginx,用websocket连接试试，在原来wss地址的地方填写&lt;code>wss://abc.com/wss&lt;/code>。如果websocket成功连接,说明Nginx反向代理websocket已经成功了。&lt;/p>
&lt;h2 id="总结">&lt;a href="#%e6%80%bb%e7%bb%93" class="header-anchor">&lt;/a>总结
&lt;/h2>&lt;p>现在的配置只是反向代理到本机时的配置,如果要反向代理到别的主机,在代理时可能会跨域问题,需要在Nginx的反向代理中做跨域的配置。&lt;/p>
&lt;h2 id="思考">&lt;a href="#%e6%80%9d%e8%80%83" class="header-anchor">&lt;/a>思考
&lt;/h2>&lt;p>在Nginx的配置文件中能看到这一段&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>location ~ .php$ {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span> root html;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3&lt;/span>&lt;span> fastcgi_pass 127.0.0.1:9000;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4&lt;/span>&lt;span> fastcgi_index index.php;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5&lt;/span>&lt;span> fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6&lt;/span>&lt;span> include fastcgi_params;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这是Nginx中php的配置文件,我擦,怎么这么眼熟,这个配置清单跟刚才的websocket的反向代理这么像。通过上网查资料才知道，原来Nginx在处理php类型的请求时，把请求发fastcgi管理进程处理，fascgi管理进程选择cgi子进程处理结果并返回被nginx,而php-fpm是一个PHP FastCGI管理器,nginx本身不能处理PHP，它只是个web服务器，当接收到请求后，如果是php请求,则发给php解释器处理，并把结果返回给客户端。所以说Nginx在处理php类型的请求时,本质上也是通过反向代理功能实现的。
我们可以把思维展开，用Nginx反向代理可以实现更多的功能，比如代理Tomcat&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>location /Tomcat
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3&lt;/span>&lt;span> proxy_pass http://127.0.0.1:8080;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4&lt;/span>&lt;span> proxy_http_version 1.1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5&lt;/span>&lt;span> proxy_set_header X-Real-IP $remote_addr;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>当然，也可以用Nginx反向代理实现负载均衡,这个我还没有试过,等以后用到了,再来补充&lt;/p></description></item><item><title>修改Ubuntu和win10双系统启动顺序</title><link>https://lqxhub.github.io/posts/fcd83655/</link><pubDate>Sun, 25 Mar 2018 12:39:52 +0000</pubDate><guid>https://lqxhub.github.io/posts/fcd83655/</guid><description>&lt;p>因为想玩Linux，遂装了Ubuntu和win10的双系统，安装还好，一切顺利，两个系统都能正常启动，但是有一点让我非常不爽。就是启动的时候Ubuntu是默认启动项，开电脑一不注意就进Ubuntu了。额，重启吧&amp;hellip;&amp;hellip;&lt;/p>
&lt;p>默认的启动项顺序(图片是我盗的，因为我的已经改了)
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-7c02264608790c89.webp">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-7c02264608790c89.webp" alt="grub" />
&lt;/a>
&lt;/div>
&lt;/p>
&lt;p>有没有办法能改一下启动顺序呢？方法当然有了。因为用的是grub2引导，所以上网查了这方面的资料，没找到合适的，要不就是grub1的资料，要不就是治标不治本。所以本着大不了重装系统的心态，自己捣鼓&lt;/p>
&lt;h1 id="第一种方法只更改默认选项">&lt;a href="#%e7%ac%ac%e4%b8%80%e7%a7%8d%e6%96%b9%e6%b3%95%e5%8f%aa%e6%9b%b4%e6%94%b9%e9%bb%98%e8%ae%a4%e9%80%89%e9%a1%b9" class="header-anchor">&lt;/a>第一种方法，只更改默认选项
&lt;/h1>&lt;blockquote>
&lt;p>首先进入 &lt;em>/etc/default&lt;/em> 目录，执行&lt;code>sudo vim grub&lt;/code>
正常的话你看到的是这个
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-23b903b0e3106d73.webp">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-23b903b0e3106d73.webp" alt="grub.png" />
&lt;/a>
&lt;/div>
&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span> 6 GRUB_DEFAULT=&amp;#34;0&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span> 7 #GRUB_HIDDEN_TIMEOUT=&amp;#34;0&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3&lt;/span>&lt;span> 8 GRUB_HIDDEN_TIMEOUT_QUIET=&amp;#34;true&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4&lt;/span>&lt;span> 9 GRUB_TIMEOUT=&amp;#34;10&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5&lt;/span>&lt;span> 10 GRUB_DISTRIBUTOR=&amp;#34;`lsb_release -i -s 2&amp;gt; /dev/null || echo Debian`&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6&lt;/span>&lt;span> 11 GRUB_CMDLINE_LINUX_DEFAULT=&amp;#34;quiet splash&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7&lt;/span>&lt;span> 12 GRUB_CMDLINE_LINUX=&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>这是我们关注的内容，只需要把第6行的&lt;code>GRUB_DEFAULT=&amp;quot;0&amp;quot;&lt;/code>改成你想要默认选中的序号减去1就行，比如第一张图中，想要默认选中&lt;code>Windows boot manger&lt;/code>，修改&lt;code>GRUB_DEFAULT=&amp;quot;2&amp;quot;&lt;/code>保存，退出
&lt;strong>然后执行关键的一步&lt;code>sudo update-grub&lt;/code>&lt;/strong>
这样，下次开机的时候默认选中的启动项就是Windows了。&lt;/p>
&lt;/blockquote>
&lt;p>这样的操作对于我这种强迫症晚期的人来说是绝对不能忍的。必须把Windows boot manger 放到第一位，下面就是第二种方法&lt;/p>
&lt;h1 id="第二种方法彻底解决">&lt;a href="#%e7%ac%ac%e4%ba%8c%e7%a7%8d%e6%96%b9%e6%b3%95%e5%bd%bb%e5%ba%95%e8%a7%a3%e5%86%b3" class="header-anchor">&lt;/a>第二种方法，彻底解决
&lt;/h1>&lt;blockquote>
&lt;p>首先进入*/boot/grub&lt;em>目录，先把&lt;/em>grub.cfg文件复制一份出来，以免搞坏了没法恢复。&lt;em>然后查看 &lt;em>grub.cfg&lt;/em>文件的读写权限，默认是只读的。先给&lt;/em>grub.cfg&lt;em>文件加上可写的权限。
执行&lt;code>sudo chmod u+w grub.cfg&lt;/code> 这样能修改这个文件了。
然后&lt;code>sudo vim grub.cfg&lt;/code>打开这个文件。然后你会发现这个文件有300多行，这怎么修改，不要慌在vim里搜索&lt;/em>menuentry* (搜索menuentry的命令是“/menuentry”)
我的在134行。上图
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-1f808bc27f28213e.webp">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-1f808bc27f28213e.webp" alt="menuenty.png" />
&lt;/a>
&lt;/div>
&lt;/p>
&lt;/blockquote>
&lt;p>这时候再往下找直到找到&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#bd93f9">276&lt;/span> menuentry &lt;span style="color:#f1fa8c">&amp;#39;Windows Boot Manager (on /dev/sda1)&amp;#39;&lt;/span> &lt;span style="color:#ff79c6">--&lt;/span>&lt;span style="color:#ff79c6">class&lt;/span> windows &lt;span style="color:#ff79c6">--&lt;/span>&lt;span style="color:#ff79c6">class&lt;/span> os &lt;span style="color:#ff79c6">$&lt;/span>menuentry_id_option &lt;span style="color:#f1fa8c">&amp;#39;osprober-efi-78EE-BE29&amp;#39;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>&lt;span style="color:#bd93f9">277&lt;/span> insmod part_gpt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span>&lt;span style="color:#bd93f9">278&lt;/span> insmod fat
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span>&lt;span style="color:#bd93f9">279&lt;/span> set root&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#39;hd0,gpt1&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span>&lt;span style="color:#bd93f9">280&lt;/span> &lt;span style="color:#ff79c6">if&lt;/span> [ x&lt;span style="color:#ff79c6">$&lt;/span>feature_platform_search_hint &lt;span style="color:#ff79c6">=&lt;/span> xy ]; then
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span>&lt;span style="color:#bd93f9">281&lt;/span> search &lt;span style="color:#ff79c6">--&lt;/span>no&lt;span style="color:#ff79c6">-&lt;/span>floppy &lt;span style="color:#ff79c6">--&lt;/span>fs&lt;span style="color:#ff79c6">-&lt;/span>uuid &lt;span style="color:#ff79c6">--&lt;/span>set&lt;span style="color:#ff79c6">=&lt;/span>root &lt;span style="color:#ff79c6">--&lt;/span>hint&lt;span style="color:#ff79c6">-&lt;/span>bios&lt;span style="color:#ff79c6">=&lt;/span>hd0,gpt1 &lt;span style="color:#ff79c6">--&lt;/span>hint&lt;span style="color:#ff79c6">-&lt;/span>efi&lt;span style="color:#ff79c6">=&lt;/span>hd0,gpt1 &lt;span style="color:#ff79c6">--&lt;/span>hint&lt;span style="color:#ff79c6">-&lt;/span>baremetal&lt;span style="color:#ff79c6">=&lt;/span>ahci0,gpt1 &lt;span style="color:#bd93f9">78&lt;/span>EE&lt;span style="color:#ff79c6">-&lt;/span>BE29
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span>&lt;span style="color:#bd93f9">282&lt;/span> &lt;span style="color:#ff79c6">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span>&lt;span style="color:#bd93f9">283&lt;/span> search &lt;span style="color:#ff79c6">--&lt;/span>no&lt;span style="color:#ff79c6">-&lt;/span>floppy &lt;span style="color:#ff79c6">--&lt;/span>fs&lt;span style="color:#ff79c6">-&lt;/span>uuid &lt;span style="color:#ff79c6">--&lt;/span>set&lt;span style="color:#ff79c6">=&lt;/span>root &lt;span style="color:#bd93f9">78&lt;/span>EE&lt;span style="color:#ff79c6">-&lt;/span>BE29
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span>&lt;span style="color:#bd93f9">284&lt;/span> fi
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span>&lt;span style="color:#bd93f9">285&lt;/span> chainloader &lt;span style="color:#ff79c6">/&lt;/span>EFI&lt;span style="color:#ff79c6">/&lt;/span>Microsoft&lt;span style="color:#ff79c6">/&lt;/span>Boot&lt;span style="color:#ff79c6">/&lt;/span>bootmgfw&lt;span style="color:#ff79c6">.&lt;/span>efi
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span>&lt;span style="color:#bd93f9">286&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span>&lt;span style="color:#bd93f9">287&lt;/span> set timeout_style&lt;span style="color:#ff79c6">=&lt;/span>menu
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span>&lt;span style="color:#bd93f9">288&lt;/span> &lt;span style="color:#ff79c6">if&lt;/span> [ &lt;span style="color:#f1fa8c">&amp;#34;${timeout}&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span> ]; then
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span>&lt;span style="color:#bd93f9">289&lt;/span> set timeout&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#bd93f9">10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span>&lt;span style="color:#bd93f9">290&lt;/span> fi
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>然后把这一段剪切，放到刚才134那个&lt;em>menuentry&lt;/em>前边。这时保存，退出。
OK，完成了，下次开机就会发现&lt;em>Windows boot manger&lt;/em> 成为第一启动项了&lt;/p>
&lt;/blockquote>
&lt;p>这里&lt;strong>千万不要&lt;/strong> &lt;strong>千万不要&lt;/strong> &lt;strong>千万不要&lt;/strong> 执行&lt;code>sudo update-grub&lt;/code>&lt;/p>
&lt;p>下次开机就是这样了
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-293181890a273082.webp">
&lt;img src="https://cdn.jsdelivr.net/gh/lqxhub/images@master/blog/3622259-293181890a273082.webp" alt="修改后的grub" />
&lt;/a>
&lt;/div>
&lt;/p></description></item></channel></rss>